<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0"
  xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
  <title>npmawesome.com</title>
  <link>http://npmawesome.com</link>
  <wp:wxr_version>1.2</wp:wxr_version>
  <wp:base_site_url>http://npmawesome.com</wp:base_site_url>
  <wp:base_blog_url>http://npmawesome.com</wp:base_blog_url><item>
  <wp:post_id>0</wp:post_id>
  <title><![CDATA[flake]]></title>
  <link>http://npmawesome.com/2013-11-17-flake/</link>
  <pubDate>Sun Nov 17 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-17-flake/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-17 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-17 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>flake</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[flake]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c80]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[chilts/flake]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c81]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c82]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] can generate practically unique
approximately sortable IDs in a distributed environment, similiar to
Twitter’s [Snowflake](https://github.com/twitter/snowflake).

```javascript
npm install flake
```

Use in distributed environments where you don’t have a central service
which can be a single point of failure - perfect when you want
everything to be redundant and independent of each other. Flake Id is
made up of `timestamp-counter-pid-macaddress`

```javascript
> var flake = require('flake')('eth0');
> console.log(flake());
013b829b1520-0000-18f0-984be1b8b104
> console.log(flake());
013b829b1527-0000-18f0-984be1b8b104
> console.log(flake());
013b829b1527-0001-18f0-984be1b8b104
```

In the example above, `eth0` is used for machine’s network interface,
but this is not guaranteed to work on your machine. You need to change
it to something which exists on your machine. It’s easy to find it on
your machine using `ifconfig` or something similiar.

There are plenty of examples and information on the
[github page](https://github.com/chilts/flake).]]></content:encoded>
</item><item>
  <wp:post_id>1</wp:post_id>
  <title><![CDATA[node-jvm]]></title>
  <link>http://npmawesome.com/2013-11-17-node-jvm/</link>
  <pubDate>Sun Nov 17 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-17-node-jvm/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-17 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-17 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>node-jvm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[node-jvm]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c83]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[YaroslavGaponov/node-jvm]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c84]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c85]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a complete
JVM virtual machine written in JavaScript written by Yaroslav Gaponov
during his preparation for a Java SE 7 exam.

```javascript
npm install node-jvm
```

In Java land:

```javascript
public class Main {
    public static long fib(int n) {
        if (n <= 1) return n;
        return fib(n-1) + fib(n-2);
    }

    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.print("help: java Main.class {Number}");
            return;
        }

        int N = Integer.parseInt(args[0]);
        long start = System.currentTimeMillis();
        System.out.format("Fibonacci from 1 to %s:\n", N);

        for (int i = 1; i <= N; i++) {
            System.out.println(i + ": " + fib(i));
        }

        long stop = System.currentTimeMillis();
        System.out.println("time: " + (stop - start) + "ms");

        System.out.println("done.");
    }
}
```

In JavaScript land:

```javascript
var JVM = require("node-jvm");
var jvm = new JVM();

jvm.setLogLevel(7);
var entryPointClassName = jvm.loadJarFile("./Main.jar");

jvm.setEntryPointClassName(entryPointClassName);

jvm.on("exit", function(code) {
    process.exit(code);
});

jvm.run([15]);
```

There are plenty of examples on the
[github page](https://github.com/YaroslavGaponov/node-jvm).]]></content:encoded>
</item><item>
  <wp:post_id>2</wp:post_id>
  <title><![CDATA[vm.js]]></title>
  <link>http://npmawesome.com/2013-11-17-vm-js/</link>
  <pubDate>Sun Nov 17 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-17-vm-js/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-17 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-17 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>vm-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[vm.js]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c86]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[tarruda/vm.js]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c87]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c88]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a pretty impressive fully
functional ECMAScript virtual machine that can be used from any
ECMAScript3-compatible environment. Eventually it will provide a
complete ECMAScript 6 environment (for now only some features are
supported).

```javascript
npm install vm.js
```

It’s written in CoffeeScript and has plenty of tests. The most
impressive thing is that the tests themselves run inside `vm.js`.

Here are some possible use cases:

- Simple in-process javascript sandbox
- Async-to-sync API adapter using fibers (lightweight in-process threads, not node.js fibers)
- Use new ECMAScript features in very old browsers

The main API can be accessed through vm instances. Each vm is indirectly
associated with a global object (through a “realm”) and is isolated from
other vms.

Start by creating a new instance:

```javascript
> Vm = require('vm.js')
> vm = new Vm()
```

Evaluate simple expressions:

```javascript
> vm.eval('40 + 2')
42
> vm.eval('[a, b, c] = [1, 2, 3]') // Harmony destructuring assignment
[1, 2, 3]
> vm.realm.global.a
1
> vm.realm.global.b
2
> vm.realm.global.c
3
```

Compile programs and run later

```javascript
// pass filename as second argument for stack traces/debugging
> script = Vm.compile('2 + 2', 'sum.js')
> vm.run(script)
4
```

Compiled scripts can be serialized/deserialized to/from JSON-friendly
structures:

```javascript
> scriptObj = script.toJSON()
> serializedScript = JSON.stringify(scriptObj)
> deserializedScript = Vm.fromJSON(JSON.parse(serializedScript))
> vm.run(deserializedScript)
```

Expose objects to be used by code running inside the Vm

```javascript
> vm.realm.global.factorial = function factorial(n) { return n > 1 ? factorial(n - 1) * n : 1 }
> vm.eval('factorial(5)')
120
```

The inverse also works:

```javascript
> vm.eval('function factorial(n) { return n > 1 ? factorial(n - 1) * n : 1 }')
> vm.realm.global.factorial(5)
120
```

Return values asynchronously using fiber pause/resume:

```javascript
// created a paused fiber from compiled code
fiber = vm.createFiber(Vm.compile('user = null; user = fetchAsync("/users/1");'))
vm.realm.global.fetchAsync = function(url) {
  fiber.pause() // pause execution
  $.get(url, function(data) {
    // user === null
    fiber.setReturnValue(data)
    fiber.resume()
    // user === data
  });
}
// start fiber
fiber.run()
```

There are plenty of examples on the
[github page](https://github.com/tarruda/vm.js).]]></content:encoded>
</item><item>
  <wp:post_id>3</wp:post_id>
  <title><![CDATA[nixt]]></title>
  <link>http://npmawesome.com/2013-11-18-nixt/</link>
  <pubDate>Mon Nov 18 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-18-nixt/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-18 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-18 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>nixt</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[nixt]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c89]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[vesln/nixt]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c8a]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c8b]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[<img class="hide-on-mobile" src="/images/posts/nixt.jpg" style="width: 200px; float: right"/>

[module full] is aiming to make testing of
command-line apps as simple as possible. It plays nice with the testing
tools that you are already using and in case you are one of those guys
who practice outside-in BDD, it has the potential to become something
that lives in every command-line app that you are going to build.

```javascript
npm install nixt
```

The use is very straightforward:

```javascript
describe('todo add', function() {
  it('adds a new todo item', function(done) {
    nixt()
      .run('todo add')
      .stdout('A new todo has been added')
      .end(done);
  });
});
```

There are plenty of examples and information on the
[github page](https://github.com/vesln/nixt).]]></content:encoded>
</item><item>
  <wp:post_id>4</wp:post_id>
  <title><![CDATA[npmd]]></title>
  <link>http://npmawesome.com/2013-11-18-npmd/</link>
  <pubDate>Mon Nov 18 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-18-npmd/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-18 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-18 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>npmd</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[npmd]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c8c]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[dominictarr/npmd]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c8d]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c8e]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is an alternative npm
client, based around a local replication of the npm metadata
(package.json & readmes are replicated for every package, but only
tarballs that you have installed are replicated). Replicating data
locally makes the client much smarter, and enables all manner of Mad
Science.

```javascript
npm install npmd
```

To begin, replicate the registry metadata. When this gets near 100% you
can use the other commands.

```javascript
npmd --sync
```

You should leave the npmd service running in the background, this will
make running other npmd commands much faster. npmd will pull down npm
metadata, and store it in a leveldb. This will be less than 200mb,
including a full text index.

To publish a module locally from the package directory, just do:

```javascript
npmd publish
```

and your package version will be stashed into a queue for local use. You
can npmd install yourpkg locally even if yourpkg isn’t on the public npm
yet. You can even have multiple versions of your package queued up
locally.

There are plenty of examples and information on the
[github page](https://github.com/dominictarr/npmd).]]></content:encoded>
</item><item>
  <wp:post_id>5</wp:post_id>
  <title><![CDATA[pm2]]></title>
  <link>http://npmawesome.com/2013-11-18-pm2/</link>
  <pubDate>Mon Nov 18 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-18-pm2/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-18 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-18 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>pm2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[pm2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c8f]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[Unitech/pm2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c90]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[AGPL 3.0]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c91]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a process manager for Node apps with a builtin load-balancer.

```javascript
npm install pm2
```

<img class="hide-on-mobile" src="/images/posts/pm2.png" style="width: 200px; float: right"/>

pm2 is perfect when you need to spread your stateless code accross all
CPUs available on a server, to keep all processes alive forever and to
0s reload it. Good fit for IaaS structures. Don’t use it on PaaS
solutions (a solution for PaaS will be developed later).

## Main features

- Builtin load-balancer (using the node cluster module)
- Script daemonization
- 0s downtime reload
- Startup scripts for Ubuntu and CentOS
- Stop unstable process (avoid infinite loop)
- Monitoring in console
- HTTP API
- [module full name="pm2-interface" displayName="Remote control and real time interface API" repo="Unitech/pm2-interface" license="Apache 2.0"]

## More Details

- [Usage/Features](https://raw.github.com/Unitech/pm2#a2)
- [Different ways to launch a process](https://raw.github.com/Unitech/pm2#a3)
- [0s downtime reload](https://raw.github.com/Unitech/pm2#a16)
- [CoffeeScript](https://raw.github.com/Unitech/pm2#a19)
- [Is my production server ready for PM2](https://raw.github.com/Unitech/pm2#a4)
- [Listing processes : pm2 list](https://raw.github.com/Unitech/pm2#a6)
- [Monitoring processes (CPU/RAM) : pm2 monit](https://raw.github.com/Unitech/pm2#a7)
- [Startup script generation : pm2 startup](https://raw.github.com/Unitech/pm2#a8)
- [Log aggregation : pm2 logs](https://raw.github.com/Unitech/pm2#a9)
- [Fork mode](https://raw.github.com/Unitech/pm2#a23)
- [Customization](https://raw.github.com/Unitech/pm2#a24)
- [API health end point : pm2 web](https://raw.github.com/Unitech/pm2#a12)
- [JSON processes declaration](https://raw.github.com/Unitech/pm2#a13)
- [Contributing/Development mode](https://raw.github.com/Unitech/pm2#a27)
- [Known bugs](https://raw.github.com/Unitech/pm2#a21)
- [Launching the tests](https://raw.github.com/Unitech/pm2#a4)

There are plenty of examples and information on the
[github page](https://github.com/Unitech/pm2).]]></content:encoded>
</item><item>
  <wp:post_id>6</wp:post_id>
  <title><![CDATA[json-mask]]></title>
  <link>http://npmawesome.com/2013-11-19-json-mask/</link>
  <pubDate>Tue Nov 19 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-19-json-mask/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-19 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-19 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>json-mask</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[json-mask]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c92]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[nemtsov/json-mask]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c93]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c94]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a tiny language and
an engine for selecting specific parts of a JavaScript object.

```javascript
npm install json-mask
```

The use is very straightforward:

```javascript
> var mask = require('json-mask')
> mask({p: {a: 1, b: 2}, z: 1}, 'p/a,z')
{p: {a: 1}, z: 1}
```

<img class="hide-on-mobile" src="/images/posts/json-mask.png" style="width: 200px; float: right"/>

The main difference between JSONPath / JSONSelect and this engine is
that JSON Mask preserves the structure of the original input object.
Instead of returning an array of selected sub-elements (e.g.
`[{a: 1}, {z: 1}]` from example above), it filters-out the parts of the
object that you don’t need, keeping the structure unchanged:
`{p: {a: 1}, z: 1}`.

This is important because JSON Mask was designed with HTTP resources in
mind, the structure of which I didn’t want to change after the unwanted
fields were masked / filtered.

## Syntax

The syntax is loosely based on XPath:

- `a,b,c` comma-separated list will select multiple fields
- `a/b/c` path will select a field from its parent
- `a(b,c)` sub-selection will select many fields from a parent
- `a/*/c` the star `*` wildcard will select all items in a field

There are plenty of examples and information on the
[github page](https://github.com/nemtsov/json-mask).]]></content:encoded>
</item><item>
  <wp:post_id>7</wp:post_id>
  <title><![CDATA[spdy]]></title>
  <link>http://npmawesome.com/2013-11-20-spdy/</link>
  <pubDate>Wed Nov 20 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-20-spdy/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-20 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-20 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>spdy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[spdy]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c95]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[indutny/node-spdy]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c96]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c97]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] lets you create [SPDY
servers](http://www.chromium.org/spdy) in node.js with natural http
module interface and fallback to regular https (for browsers that don’t
support SPDY yet).

```javascript
npm install spdy
```

From [Wikipedia](http://en.wikipedia.org/wiki/SPDY):

<img class="hide-on-mobile" src="/images/posts/spdy.jpg" style="width: 200px; float: right"/>

> The goal of SPDY is to reduce web page load time. This is achieved by
> prioritizing and multiplexing the transfer of web page subresources so
> that only one connection per client is required. TLS encryption is
> nearly ubiquitous in SPDY implementations, and transmission headers
> are gzip-or DEFLATE-compressed by design (in contrast to HTTP, where
> the headers are sent as human-readable text). Moreover, servers may
> hint or even push content instead of awaiting individual requests for
> each resource of a web page.

Here’s how you would use it with express:

```javascript
var spdy = require('spdy'),
    express = require('express'),
    fs = require('fs');

var options = {
  key: fs.readFileSync(__dirname + '/keys/spdy-key.pem'),
  cert: fs.readFileSync(__dirname + '/keys/spdy-cert.pem'),
  ca: fs.readFileSync(__dirname + '/keys/spdy-ca.pem'),

  // SPDY-specific options
  windowSize: 1024 // Server's window size
};

var app = express();
app.use(/* your favorite middleware */);
var server = spdy.createServer(options, app);
server.listen(443);
```

There are plenty of examples and information on the
[github page](https://github.com/indutny/node-spdy).]]></content:encoded>
</item><item>
  <wp:post_id>8</wp:post_id>
  <title><![CDATA[baconjs]]></title>
  <link>http://npmawesome.com/2013-11-21-bacon-js/</link>
  <pubDate>Thu Nov 21 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-21-bacon-js/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-21 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-21 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bacon-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[baconjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c98]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[baconjs/bacon.js]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c99]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c9a]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a library for
functional reactive programming. Or let’s say it’s a library for working
with events and dynamic values (which are called Properties in
Bacon.js). [Check out](http://raimohanska.github.io/bacon.js-slides/)
the interactive demo.

```javascript
npm install baconjs
```

Conal Elliot explains functional reactive programming (FPR) over at
[Stack Overflow](http://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming/1030631#1030631):

<img class="hide-on-mobile" src="/images/posts/baconjs.png" style="width: 200px; float: right"/>

> So, what is FRP? You could have invented it yourself. Start with these
> ideas:
>
> -   Dynamic/evolving values (i.e., values “over time”) are first class
>```javascript
 values in themselves. You can define them and combine them, pass
>     them into & out of functions. I called these things “behaviors”.
>
> -   Behaviors are built up out of a few primitives, like constant
>     (static) behaviors and time (like a clock), and then with
>     sequential and parallel combination. n behaviors are combined by
>     applying an n-ary function (on static values), “point-wise”, i.e.,
>     continuously over time.
>
> -   To account for discrete phenomena, have another type (family) of
>     “events”, each of which has a stream (finite or infinite) of
>     occurrences. Each occurrence has an associated time and value.
>
> -   To come up with the compositional vocabulary out of which all
>     behaviors and events can be built, play with some examples. Keep
>     deconstructing into pieces that are more general/simple.
>
> -   So that you know you’re on solid ground, give the whole model a
>     compositional foundation, using the technique of denotational
>     semantics, which just means that (a) each type has a corresponding
>     simple & precise mathematical type of “meanings”, and (b) each
>     primitive and operator has a simple & precise meaning as a
>     function of the meanings of the constituents. Never, ever mix
>     implementation considerations into your exploration process. If
>     this description is gibberish to you, consult (a) Denotational
>     design with type class morphisms, (b) Push-pull functional
>     reactive programming (ignoring the implementation bits), and (c)
>     the Denotational Semantics Haskell wikibooks page. Beware that
>     denotational semantics has two parts, from its two founders
>     Christopher Strachey and Dana Scott: the easier & more useful
>     Strachey part and the harder and less useful (for software design)
>     Scott part.
```

There are plenty of examples and information on the
[github page](https://github.com/baconjs/bacon.js).]]></content:encoded>
</item><item>
  <wp:post_id>9</wp:post_id>
  <title><![CDATA[event-stream]]></title>
  <link>http://npmawesome.com/2013-11-22-event-stream/</link>
  <pubDate>Fri Nov 22 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-22-event-stream/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-22 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-22 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>event-stream</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[event-stream]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c9b]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[dominictarr/event-stream]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c9c]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c9d]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[<img class="hide-on-mobile" src="/images/posts/event-stream.gif" style="width: 200px; float: right"/>

[module full] is a toolkit to make creating and working with streams easy..

```javascript
npm install event-stream
```

The usage is pretty straight forward:

```javascript
var es = require('event-stream');

es.pipeline(                         // connect streams together with `pipe`
  process.openStdin(),               // open stdin
  es.split(),                        // split stream to break on newlines
  es.map(function (data, callback) { // turn this async function into a stream
    callback(null
      , inspect(JSON.parse(data)))   // render it nicely
  }),
  process.stdout                     // pipe it to stdout!
);
```

I found the `map` function to be especially exciting because it takes a callback and lets you asynchronously process stream data where as regular stream `data` event does not.

There are plenty of examples and information on the
[github page](https://github.com/dominictarr/event-stream).]]></content:encoded>
</item><item>
  <wp:post_id>10</wp:post_id>
  <title><![CDATA[videoconverter.js]]></title>
  <link>http://npmawesome.com/2013-11-22-videoconverter-js/</link>
  <pubDate>Fri Nov 22 2013 15:20:01 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-22-videoconverter-js/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-22 15:20:01</wp:post_date>
  <wp:post_date_gmt>2013-11-22 23:20:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>videoconverter-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>  <content:encoded><![CDATA[[videoconverter.js](https://github.com/bgrins/videoconverter.js)
is not really an NPM module, but is a library that allows you to convert
and manipulate videos inside of your web browser. This is achieved by
converting the popular [FFmpeg](http://ffmpeg.org/) library into
JavaScript, using [Emscripten](https://github.com/kripken/emscripten).
In other words, it’s damn impressive! Just [check out the
demo](http://bgrins.github.io/videoconverter.js/demo).

<img class="hide-on-mobile" src="/images/posts/ffmpeg.png" style="width: 200px; float: right; margin-left: 1em;"/>

Here’s the fun fact,
[ffmpeg.js](https://github.com/bgrins/videoconverter.js/blob/master/build/ffmpeg.js)
is a whoping 29MB in size. GZipped it comes down to 6MB. I have tried
using [UglifyJS](https://github.com/mishoo/UglifyJS2) to minify the
source and gave up after 1 hour.

There are plenty of examples and information on the [github
page](https://github.com/bgrins/videoconverter.js).
]]></content:encoded>
</item><item>
  <wp:post_id>11</wp:post_id>
  <title><![CDATA[grunt-angular-builder]]></title>
  <link>http://npmawesome.com/2013-11-25-grunt-angular-builder/</link>
  <pubDate>Mon Nov 25 2013 15:19:48 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-25-grunt-angular-builder/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-25 15:19:48</wp:post_date>
  <wp:post_date_gmt>2013-11-25 23:19:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>grunt-angular-builder</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[grunt-angular-builder]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c9e]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[claudio-silva/grunt-angular-builder]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6c9f]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca0]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a specialized Grunt plugin to handle all of AngularJS
related assets issues in a truly practical, automated, simple and easy way.

```javascript
npm install angular-builder
```

<div class="hide-on-mobile" style="position: relative; float: right; height: 200px;">
```javascript
<div style="position: relative; width: 200px; height: 200px; background: url('http://npmawesome.com/wp-content/uploads/2013/11/angularjs.png') 50% 50% no-repeat; background-size: contain"></div>
<div style="position: absolute; top: 0px; left: 0px; width: 200px; height: 190px; overflow: hidden; background: url('http://npmawesome.com/wp-content/uploads/2013/11/grunt.png'); background-size: cover"></div>
</div>
```

Features
--------

1.  Analyzes your AngularJS source code and “understands” module
```javascript
dependencies and the relationships between your files. No need for
AMD or CommonJS loaders.
```

2.  Accepts source code split into as many files as you want and spread
```javascript
over any directory structure you prefer.
```

3.  Assembles one javascript file (or just a few) for production with
```javascript
all code assembled in the correct loading order required by your
module’s dependencies.
```

4.  Builds fast in debug mode by generating a single script that loads
```javascript
the original source files in the correct order (no minified or
concatenated files in debug builds).
```

5.  Allows you to debug the source code in the browser itself and see
```javascript
readable source code for any debug breakpoint or error location,
with the correct original line numbers.
```

6.  Includes in the build *only* the modules that your app actually
```javascript
needs and discards dead code.
```

7.  Includes in the build the stylesheets and assets each module
```javascript
requires and excludes those that are not used by your app.
```

8.  Can also include in the build scripts that are not based on
```javascript
AngularJS.
```

9.  Recognizes modules and libraries that are loaded independently and,
```javascript
therefore, are not part of the build.
```

10. Not only builds complete applications but also builds library
```javascript
projects, generating *readable* redistributable source code files
for them.
```

11. Allows each module to have its own build configuration file. Just
```javascript
drag-and-drop a module to your project and it’s ready to build!
```

12. Integrates easily with other Grunt plugins to expand your build
```javascript
process with minification, optimization, preprocessing and/or
compilation st
```

There are plenty of examples and information on the
[github page](https://github.com/claudio-silva/grunt-angular-builder). Check it out!]]></content:encoded>
</item><item>
  <title>angularjs</title>
  <wp:post_parent>11</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/angularjs.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-11-25 15:19:48</wp:post_date>
  <wp:post_date_gmt>2013-11-25 23:19:48</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>grunt</title>
  <wp:post_parent>11</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/grunt.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-11-25 15:19:48</wp:post_date>
  <wp:post_date_gmt>2013-11-25 23:19:48</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>12</wp:post_id>
  <title><![CDATA[docpad]]></title>
  <link>http://npmawesome.com/2013-11-26-docpad/</link>
  <pubDate>Tue Nov 26 2013 15:18:56 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-26-docpad/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-26 15:18:56</wp:post_date>
  <wp:post_date_gmt>2013-11-26 23:18:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>docpad</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[docpad]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca1]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[bevry/docpad]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca3]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a static web site generator that is has been used in production by big and small companies for over a year and a half now to create [plenty of amazing and powerful web sites and applications](http://docpad.org/docs/showcase) quicker than ever before. What makes it different is instead of being a box to cram yourself into and hold you back, it is freeway to what you want to accomplish, just getting out of your way and allowing you to create stuff quicker than ever before without limits. Leave the redudant stuff up to me, so you can focus on the awesome stuff.

```javascript
npm install docpad
```

## Features out of the box

- Competely file based
- Write your documents in any language, markup, templating engine, or pre-processor you wish
- Changes to your website are automatically recompiled through our built in watch system
- Add meta data to the top of your files to be used by templating engines to display non-standard information
- Display custom listings of content with our powerful [module full name="query-engine" displayName="Query Engine" repo="bevry/query-engine" license="MIT"]
- Abstract out generic headers and footers into layouts using our nested layout system
- Deploy by copying static files
- Built-in server to save you from having to startup your own, for dynamic deployments this even supports things like clean urls, custom routes and server-side logic
- Robust architecture and powerful plugin system
- Built in support for dynamic documents (e.g. search pages, signup forms, etc.)
- Embeddable

There are plenty of examples and information on [bevry/docpad](https://github.com/bevry/docpad). Check it
out!]]></content:encoded>
</item><item>
  <wp:post_id>13</wp:post_id>
  <title><![CDATA[rx]]></title>
  <link>http://npmawesome.com/2013-11-26-rx-js/</link>
  <pubDate>Tue Nov 26 2013 16:40:43 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-26-rx-js/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-26 16:40:43</wp:post_date>
  <wp:post_date_gmt>2013-11-27 00:40:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>rx-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[rx]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca4]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[Reactive-Extensions/RxJS]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca5]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[Apache 2.0]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca6]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a set of libraries to compose asynchronous and event-based programs using observable collections and Array#extras style composition in JavaScript.

Using RxJS, you can represent multiple asynchronous data streams (that come from diverse sources, e.g., stock quote, tweets, computer events, web service requests, etc.), and subscribe to the event stream using the Observer object. The Observable notifies the subscribed Observer instance whenever an event occurs.

```javascript
npm install rx
```

## Example

```javascript
/* Get stock data somehow */
var source = getAsyncStockData();

var subscription = source
  .filter(function (quote) {
    return quote.price > 30;
  })
  .map(function (quote) {
    return quote.price;
  })
  .subscribe(
    function (price) {
      console.log('Prices higher than $30: $' + price);
    },
    function (err) {
      console.log('Something went wrong: ' + err.message);
    });

/* When we're done */
subscription.dispose();
```

Reactive programming is a very interesting way of writing code. Check out a few videos and presentations linked from rx.js

## Presentations
- [Don't Cross the Streams - Cascadia.js 2012](http://www.slideshare.net/mattpodwysocki/cascadiajs-dont-cross-the-streams)
- [Curing Your Asynchronous Blues - Strange Loop 2013](https://github.com/Reactive-Extensions/StrangeLoop2013)

## Videos
- [Hello RxJS - Channel 9](http://channel9.msdn.com/Blogs/Charles/Introducing-RxJS-Reactive-Extensions-for-JavaScript)
- [MIX 2011](http://channel9.msdn.com/events/MIX/MIX11/HTM07)
- [RxJS Today and Tomorrow - Channel 9](http://channel9.msdn.com/Blogs/Charles/Matthew-Podwysocki-and-Bart-J-F-De-Smet-RxJS-Today-and-Tomorrow)
- [Cascadia.js 2012](http://www.youtube.com/watch?v=FqBq4uoiG0M)
- [Reactive Extensions Videos on Channel 9](http://channel9.msdn.com/Tags/reactive+extensions)

There are plenty of examples and information on [RxJS](https://github.com/Reactive-Extensions/RxJS). Check it
out!]]></content:encoded>
</item><item>
  <wp:post_id>14</wp:post_id>
  <title><![CDATA[scalenpm.org]]></title>
  <link>http://npmawesome.com/2013-11-27-scale-npm/</link>
  <pubDate>Wed Nov 27 2013 11:27:43 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-27-scale-npm/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-27 11:27:43</wp:post_date>
  <wp:post_date_gmt>2013-11-27 19:27:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>scale-npm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>  <content:encoded><![CDATA[<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/11/npm.png" style="float: right; width: 200px; margin-left: 1em;" />

The [NPM](http://npmjs.org) registry recently got crashy, and it was incredibly painful. Here at [Good Eggs](http://www.goodeggs.com) we were affected as much as any other node shop - we couldn't push a build out.

<a href="http://scalenpm.org">scalenpm.org</a> is an effort to fix this problem by throwing some money at it. The plan is to use the money to dedicate extra engineer time and hardware to the repository we all know and love. At the moment of writing the funding reached $115k out of $200k estimated.

For just $75 you get can support NPM aaaaand get a t-shirt! Woot! [Go donate!](https://scalenpm.org/donate)]]></content:encoded>
</item><item>
  <title>npm</title>
  <wp:post_parent>14</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npm.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-11-27 11:27:43</wp:post_date>
  <wp:post_date_gmt>2013-11-27 19:27:43</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>15</wp:post_id>
  <title><![CDATA[scala.js]]></title>
  <link>http://npmawesome.com/2013-11-30-scala-js/</link>
  <pubDate>Sat Nov 30 2013 08:52:13 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-11-30-scala-js/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-11-30 08:52:13</wp:post_date>
  <wp:post_date_gmt>2013-11-30 16:52:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>scala-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>  <content:encoded><![CDATA[<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/11/scala.png" style="float: right; width: 200px; margin-left: 1em;" />

[Scala.js](http://www.scala-js.org/), a Scala to JavaScript compiler.

Outstanding features are:

* Support all of Scala (including macros!), modulo [a few semantic differences](http://www.scala-js.org/doc/semantics.html)
* Very good [interoperability with JavaScript code](http://www.scala-js.org/doc/js-interoperability.html). For example, use jQuery and HTML5 from your Scala.js code, either in a typed or untyped way. Or create Scala.js objects and call their methods from JavaScript.
* Integrated with [sbt](http://www.scala-sbt.org/) (including support for dependency management and incremental compilation)
* Can be used with your favorite IDE for Scala
* Generates [Source Maps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/) for a smooth debugging experience (step through your Scala code from within your browser supporting source maps)
* Integrates [Google Closure Compiler](https://developers.google.com/closure/compiler/) for producing minimal code for production.

There is plenty more information on the [github](https://github.com/scala-js/scala-js) page. Check it out!]]></content:encoded>
</item><item>
  <title>scala</title>
  <wp:post_parent>15</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/scala.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-11-30 08:52:13</wp:post_date>
  <wp:post_date_gmt>2013-11-30 16:52:13</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>16</wp:post_id>
  <title><![CDATA[nak]]></title>
  <link>http://npmawesome.com/2013-12-03-nak/</link>
  <pubDate>Tue Dec 03 2013 11:00:17 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-03-nak/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-03 11:00:17</wp:post_date>
  <wp:post_date_gmt>2013-12-03 19:00:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>nak</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[nak]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca7]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[gjtorikian/nak]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca8]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ca9]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is an ack/ag clone written in Node.js. The focus here is on speed and performance, rather than trying to 100% mimic all the functionality of ack.

```javascript
npm install nak
```

There were two goals set out:

1. Be faster than ack
1. Return matches in order

A lot of the functionality is modeled around ag. In fact, you can provide a `.nakignore` file to define patterns to ignore. `.nakignore` files in the directory you're searching under are automatically included as ignore rules, but you can choose to specify any additional file (with `.gitignore`-style rules) with `-a`.

## Usages

```javascript
nak -G '*.js' 'function' .
```

Find all files ending in `js`, in the current directory, with the phrase `function`.

```javascript
nak -a ../.gitignore -i 'def' .
```

Find all files in the current directory, with the phrase in `def` (case-insensitive), in the current directory; also, use the _.gitignore_ rules from the folder above

```javascript
nak -d '*.less' -w 'mixin' .
```

Find all files in the current directory that are not `.less`, with the phrase `mixin` (whole word), in the current directory

There are plenty of examples and information on the
[github page](https://github.com/gjtorikian/nak). Check it out!]]></content:encoded>
</item><item>
  <wp:post_id>17</wp:post_id>
  <title><![CDATA[verymodel]]></title>
  <link>http://npmawesome.com/2013-12-03-verymodel/</link>
  <pubDate>Tue Dec 03 2013 09:57:46 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-03-verymodel/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-03 09:57:46</wp:post_date>
  <wp:post_date_gmt>2013-12-03 17:57:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>verymodel</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[verymodel]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6caa]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[fritzy/VeryModel]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cab]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cac]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a system for validation, creation, and editing of models. VeryModel is not tied to a framework, and it implements a full purpose Model system.

```javascript
npm install verymodel
```

Here's an example of a model definition:

```javascript
// Create a User Factory
var User = new VeryModel({
  id: {primary: true, type: VeryType().isAlphanumeric(), default: 1},
  username: {required: true, type: VeryType().isAlphanumeric().len(4, 25), default: ''},
  password: {required: false, type: VeryType().len(6).custom(goodPassword)}, default: ''},
  passhash: {private: true},
});
```

Model defintions are recursive Javascript object. At each layer, you can have the following fields:

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/orm.png" style="width: 200px; float: right; margin-left: 1em;"/>

* `required` (boolean): Error on validation if this field isn't set.
* `type` (VeryType): VeryType chain to validate field against if set.
* `default` (any): Default value set automatically.
* `model` (definition object or VeryModel): set this field as another model.
* `collection` (definition object or VeryModel): set this field as a collection of a model.
* `derive` `function`): Derive the value of this field with this function whenever field is accessed `{derive: function(model) {return model.first + ' ' + model.last}`
* `depends` ({some_other_field: VeryType or true}, ...): Require other fields when this field is set, optionally run VeryType chain check on other field.
* `primary` (boolean): Set this on one of your fiels for easy saving and loading.
* `private` (boolean): `toObject()` will not include this field in expect unless the argumnet usePrivate is true

There are plenty of examples and information on the
[github page](https://github.com/fritzy/VeryModel). Check it out!]]></content:encoded>
</item><item>
  <title>orm</title>
  <wp:post_parent>17</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/orm.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-03 09:57:46</wp:post_date>
  <wp:post_date_gmt>2013-12-03 17:57:46</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>18</wp:post_id>
  <title><![CDATA[gm]]></title>
  <link>http://npmawesome.com/2013-12-05-gm/</link>
  <pubDate>Thu Dec 05 2013 09:44:35 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-05-gm/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-05 09:44:35</wp:post_date>
  <wp:post_date_gmt>2013-12-05 17:44:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[gm]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cad]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[aheckmann/gm]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cae]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6caf]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is [ImageMagick](http://www.imagemagick.org) for node, what else is there to say?

```javascript
npm install gm
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/imagemagick.png" style="float: right; width: 100px; margin-left: 1em;" />

> ImageMagick is a software suite to create, edit, compose, or convert bitmap images. It can read and write images in a variety of formats (over 100) including DPX, EXR, GIF, JPEG, JPEG-2000, PDF, PNG, Postscript, SVG, and TIFF. Use ImageMagick to resize, flip, mirror, rotate, distort, shear and transform images, adjust image colors, apply various special effects, or draw text, lines, polygons, ellipses and Bézier curves.

The [demo](http://aheckmann.github.io/gm/) page has an interactive playground that shows a tiny fraction of what [module] can do.

```javascript
var gm = require('./gm');

// resize and remove EXIF profile data
gm('/path/to/my/img.jpg')
  .resize(240, 240)
  .noProfile()
  .write('/path/to/resize.png', function (err) {
    if (!err) console.log('done');
  });

// annotate an image
gm('/path/to/my/img.jpg')
  .stroke("#ffffff")
  .drawCircle(10, 10, 20, 10)
  .font("Helvetica.ttf", 12)
  .drawText(30, 20, "GMagick!")
  .write("/path/to/drawing.png", function (err) {
    if (!err) console.log('done');
  });
```

There are plenty of examples and information on the
[github page](https://github.com/aheckmann/gm). Check it out!]]></content:encoded>
</item><item>
  <title>imagemagick</title>
  <wp:post_parent>18</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/imagemagick.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-05 09:44:35</wp:post_date>
  <wp:post_date_gmt>2013-12-05 17:44:35</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>19</wp:post_id>
  <title><![CDATA[blessed]]></title>
  <link>http://npmawesome.com/2013-12-09-blessed/</link>
  <pubDate>Mon Dec 09 2013 14:17:51 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-09-blessed/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-09 14:17:51</wp:post_date>
  <wp:post_date_gmt>2013-12-09 22:17:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>blessed</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[blessed]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb0]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[chjj/blessed]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb1]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb2]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a terminal control library for Unix-like systems, enabling the construction of text user interface (TUI) applications. In other words it's a curses-like library for node.js

```javascript
npm install blessed
```

## Example

This will render a box with line borders containing the text 'Hello world!', perfectly centered horizontally and vertically.

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/blessed.png" style="float: right; margin-left: 1em;" />

```javascript
var blessed = require('blessed');

// Create a screen object.
var screen = blessed.screen();

// Create a box perfectly centered horizontally and vertically.
var box = blessed.box({
  top: 'center',
  left: 'center',
  width: '50%',
  height: '50%',
  content: 'Hello {bold}world{/bold}!',
  tags: true,
  border: {
    type: 'line'
  },
  style: {
    fg: 'white',
    bg: 'magenta',
    border: {
      fg: '#ffffff'
    },
    hover: {
      bg: 'green'
    }
  }
});

// Append our box to the screen.
screen.append(box);

// If our box is clicked, change the content.
box.on('click', function(data) {
  box.setContent('{center}Some different {red-fg}content{/red-fg}.{/center}');
  screen.render();
});

// If box is focused, handle `enter`/`return` and give us some more content.
box.key('enter', function(ch, key) {
  box.setContent('{right}Even different {black-fg}content{/black-fg}.{/right}\n');
  box.setLine(1, 'bar');
  box.insertLine(1, 'foo');
  screen.render();
});

// Quit on Escape, q, or Control-C.
screen.key(['escape', 'q', 'C-c'], function(ch, key) {
  return process.exit(0);
});

// Focus our element.
box.focus();

// Render the screen.
screen.render();
```

There are plenty of examples and information on the
[github page](https://github.com/chjj/blessed). Check it out!]]></content:encoded>
</item><item>
  <title>blessed</title>
  <wp:post_parent>19</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/blessed.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-09 14:17:51</wp:post_date>
  <wp:post_date_gmt>2013-12-09 22:17:51</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>20</wp:post_id>
  <title><![CDATA[state]]></title>
  <link>http://npmawesome.com/2013-12-10-state/</link>
  <pubDate>Tue Dec 10 2013 16:08:10 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-10-state/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-10 16:08:10</wp:post_date>
  <wp:post_date_gmt>2013-12-11 00:08:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>state</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[state]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb3]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[nickfargo/state]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb4]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb5]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a library for implementing [first-class states](http://statejs.org/docs/#concepts--states) on arbitrary owner objects.

```javascript
npm install state
```

There's an incredible amount of funtionality described in the [very extensive documentation](http://statejs.org/docs/).

<img class="hide-on-mobile" src="http://statejs.org/img/dodecagem-640px.png" style="float: right; width: 200px; margin-left: 1em;" />

## Minimal footprint

All functionality of State is to be instigated through the exported state function. It should be able both to generate state expressions and to implement expressed states into an existing JavaScript object, depending on the arguments provided. In the latter case, the newly implemented system of states should be accessible from a single object. `state()` method on the affected object.

## Expressive power

As much as possible, State should aim to look and feel like a feature of the language. The interpreted shorthand syntax, simple keyword attributes, and limited interface should allow for production code that is terse, declarative, and easy to write and understand.

## Opacity

Apart from the addition of the `object.state()` method, a call to `state()` must make no other modifications to a State–affected object's interface. Methods are replaced with delegators, which forward method calls to the current state. This is to be implemented opaquely and non-destructively: consumers of the object need not be aware of which states are active in the object, or even that a concept of state exists at all, and a call to `object.state('').destroy()` must restore the object to its original form.

## Example

```javascript
var flavors = [
  'vanilla',
  'chocolate',
  'strawberry',
  'AmeriCone Dream'
];

function Kid () {}

state( Kid.prototype, 'mutable', {
  data: {
    favorite: 'chocolate'
  },

  waver: state.bind( function () {
    var i = Math.random() * flavors.length << 0;
    this.data({ favorite: flavors[i] });
  }),

  whine: function ( complaint ) {
    if ( typeof console !== 'undefined' ) {
      console.log( complaint );
    }
  },

  mutate: function ( mutation, replaced ) {
    this.owner().whine(
      "I hate " + replaced.favorite + ", " +
      "I want " + mutation.favorite + "!"
    );
  }
});

var jr = new Kid;

jr.waver();  // log <<< "I hate chocolate, I want strawberry!"
jr.waver();  // log <<< "I hate strawberry, I want chocolate!"
jr.waver();  // nothing
jr.waver();  // log <<< "I hate chocolate, I want AmeriCone Dream!"
```

There are plenty of examples and information on the [documentation site](http://statejs.org). Check it out!]]></content:encoded>
</item><item>
  <wp:post_id>21</wp:post_id>
  <title><![CDATA[prettyjson]]></title>
  <link>http://npmawesome.com/2013-12-11-prettyjson/</link>
  <pubDate>Wed Dec 11 2013 17:27:02 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-11-prettyjson/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-11 17:27:02</wp:post_date>
  <wp:post_date_gmt>2013-12-12 01:27:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>prettyjson</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[prettyjson]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb6]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[rafeca/prettyjson]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb7]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb8]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is package for formatting JSON data in a coloured YAML-style, perfect for CLI output.

```javascript
npm install prettyjson
```

## CLI

```javascript
$ prettyjson package.json
...
$ curl https://api.github.com/users/rafeca | prettyjson
...
$ PRETTYJSON_KEYS=red PRETTYJSON_DASH=blue PRETTYJSON_STRING=yellow prettyjson package.json
```

## API

[<img class="hide-on-mobile" src="https://github-camo.global.ssl.fastly.net/84c63f2a817ca95b6ccaff240a75fbf1b11f7b87/687474703a2f2f7261666563612e636f6d2f7072657474796a736f6e2f696d616765732f6578616d706c65332e706e67" style="float: right; width: 300px; margin-left: 1em" />](https://github-camo.global.ssl.fastly.net/84c63f2a817ca95b6ccaff240a75fbf1b11f7b87/687474703a2f2f7261666563612e636f6d2f7072657474796a736f6e2f696d616765732f6578616d706c65332e706e67)

```javascript
var prettyjson = require('prettyjson');

var data = {
  username: 'rafeca',
  url: 'https://github.com/rafeca',
  twitter_account: 'https://twitter.com/rafeca',
  projects: ['prettyprint', 'connfu']
};

console.log(prettyjson.render(data));
```

There are plenty of examples and information on the
[github page](https://github.com/rafeca/prettyjson). Check it out!]]></content:encoded>
</item><item>
  <wp:post_id>22</wp:post_id>
  <title><![CDATA[chrono-node]]></title>
  <link>http://npmawesome.com/2013-12-13-chrono/</link>
  <pubDate>Fri Dec 13 2013 17:14:45 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-13-chrono/</guid>
  <description></description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-13 17:14:45</wp:post_date>
  <wp:post_date_gmt>2013-12-14 01:14:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>chrono</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[chrono-node]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cb9]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[wanasit/chrono]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cba]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cbb]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a natural language date parser in Javascript. It is designed to extract date informations from any given text. Works in node and browser. Check out the [nifty test page](http://wanasit.github.io/pages/chrono/).

```javascript
npm install chrono-node
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/clock.gif" style="float: right; width: 100px; margin-left: 1em" />

[module] supports a number of date and time formats, including:

* Today, Tomorrow, Yesterday, last Friday, etc
* 10/13/2013
* this Friday from 13:00 - 16.00
* Saturday, 17 August 2013 - Monday, 19 August 2013
* Sat Aug 17 2013 18:40:39 GMT+0900 (JST)

## Usage

```javascript
> var chrono = require('chrono-node')

> chrono.parseDate('An appointment on Sep 12-13')
Thu Sep 12 2013 12:00:00 GMT+0900 (JST)

> chrono.parse('An appointment on Sep 12-13')
[ { start:
     { year: 2013,
       month: 8,
       day: 12,
       impliedComponents: [Object],
       isCertain: [Function],
       date: [Function] },
    startDate: Thu Sep 12 2013 12:00:00 GMT+0900 (JST),
    end:
     { year: 2013,
       month: 8,
       day: 13,
       impliedComponents: [Object],
       isCertain: [Function],
       date: [Function] },
    endDate: Fri Sep 13 2013 12:00:00 GMT+0900 (JST),
    referenceDate: Sat Aug 17 2013 17:54:57 GMT+0900 (JST),
    index: 18,
    text: 'Sep 12-13',
    concordance: 'An appointment on Sep 12-13' } ]
```

What's even more cool, [module] is designed to work with long text (notes, emails, articles, etc). `chrono.parse` will return an array of every date mentioned in the story.

```javascript
> var text = 'October 7, 2011, of which details were not revealed out of respect to Jobs\'s family.[239] Apple announced on the same day that they had no plans for a public service, but were encouraging "well-wishers" to send their remembrance messages to an email address created to receive such messages.[240] Sunday, October 16, 2011'
> chrono.parse(text)
[{ start:
    { year: 2011,
      month: 9,
      day: 7,
      ....
 { start:
    { year: 2011,
      month: 9,
      day: 16,
      ....
```

There are plenty of examples and information on the
[github page](https://github.com/wanasit/chrono). Check it out!]]></content:encoded>
</item><item>
  <title>clock</title>
  <wp:post_parent>22</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/clock.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-13 17:14:45</wp:post_date>
  <wp:post_date_gmt>2013-12-14 01:14:45</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>23</wp:post_id>
  <title><![CDATA[ect]]></title>
  <link>http://npmawesome.com/2013-12-16-ect/</link>
  <pubDate>Mon Dec 16 2013 16:57:39 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-16-ect/</guid>
  <description>ect is a performance focused JavaScript template engine with embedded CoffeeScript syntax.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-16 16:57:39</wp:post_date>
  <wp:post_date_gmt>2013-12-17 00:57:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ect</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[ect is a performance focused JavaScript template engine with embedded CoffeeScript syntax.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[ect]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cbc]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[baryshev/ect]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cbd]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cbe]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a [performance focused](http://ectjs.com/#benchmark) JavaScript template engine with embedded CoffeeScript syntax. [Just try demo](http://ectjs.com) to check all features.

```javascript
npm install ect
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/coffeescript.png" style="float: right" />

## Features

* Excellent performance
* Templates caching
* Automatic reloading of changed templates
* CoffeeScript code in templates
* Multi-line expressions support
* Tag customization support
* Node.JS and client-side support
* Powerful but simple syntax
* Inheritance, partials, blocks
* Compatible with `express`
* Compatible with `RequireJS`
* Backward compatible with `eco`
* [Syntax highlighting for Sublime Text 2](https://github.com/TurtlePie/Sublime-ECT) by [TurtlePie](https://github.com/TurtlePie)

## Example

app.js

```javascript
express = require("express")
app = express()
ECT = require("ect")
ectRenderer = ECT watch: true, root: __dirname + "/views"
app.engine ".ect", ectRenderer.render

app.get "/", (req, res) ->
  res.render "index.ect"

app.listen 3000
console.log "Listening on port 3000"
```

views/index.ect

```javascript
<% extend 'layout.ect' %>
<div>Hello, World!</div>
```

views/layout.ect

```javascript
<html>
  <body>
    <% content %>
  </body>
</html>
```

There are plenty of examples and information on [baryshev/ect](https://github.com/baryshev/ect). Check it out!]]></content:encoded>
</item><item>
  <title>coffeescript</title>
  <wp:post_parent>23</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/coffeescript.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-16 16:57:39</wp:post_date>
  <wp:post_date_gmt>2013-12-17 00:57:39</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>24</wp:post_id>
  <title><![CDATA[npm v1.3.18]]></title>
  <link>http://npmawesome.com/2013-12-17-npm/</link>
  <pubDate>Tue Dec 17 2013 10:41:23 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-17-npm/</guid>
  <description>Adds an --ignore-scripts option, which will prevent package.json scripts from being run.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-17 10:41:23</wp:post_date>
  <wp:post_date_gmt>2013-12-17 18:41:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>npm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Adds an --ignore-scripts option, which will prevent package.json scripts from being run.]]></wp:meta_value>
  </wp:postmeta>  <content:encoded><![CDATA[NPM v1.3.18 release notes:

* Added an `--ignore-scripts` option, which will prevent package.json scripts from being run. Most notably, this will work on npm install, so e.g. npm install `--ignore-scripts` will not run preinstall and prepublish scripts. ([d7e67bf](https://github.com/isaacs/npm/commit/d7e67bf0d94b085652ec1c87d595afa6f650a8f6), @sqs)

* Fixed a bug introduced in 1.3.16 that would manifest with certain cache configurations, by causing spurious errors saying "Adding a cache directory to the cache will make the world implode." ([966373f](https://github.com/isaacs/npm/commit/966373fad8d741637f9744882bde9f6e94000865), @domenic)

* Re-fixed the multiple download of URL dependencies, whose fix was reverted in 1.3.17. ([a362c3f](https://github.com/isaacs/npm/commit/a362c3f1919987419ed8a37c8defa19d2e6697b0), @spmason)

https://github.com/isaacs/npm/releases/tag/v1.3.18]]></content:encoded>
</item><item>
  <wp:post_id>25</wp:post_id>
  <title><![CDATA[xregexp]]></title>
  <link>http://npmawesome.com/2013-12-18-xregexp/</link>
  <pubDate>Wed Dec 18 2013 17:27:16 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-18-xregexp/</guid>
  <description>XRegExp provides augmented and extensible JavaScript regular expressions.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-18 17:27:16</wp:post_date>
  <wp:post_date_gmt>2013-12-19 01:27:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>xregexp</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[XRegExp provides augmented and extensible JavaScript regular expressions.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[xregexp]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cbf]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[slevithan/xregexp]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc0]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc1]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] provides augmented and extensible JavaScript regular expressions. You get new syntax, flags, and methods beyond what browsers support natively. XRegExp is also a regex utility belt with tools to make your client-side grepping simpler and more powerful, while freeing you from worrying about pesky cross-browser inconsistencies and the dubious lastIndex property.

```javascript
npm install xregexp
```

## Usage examples

[<img class="hide-on-mobile" src="http://www.bennadel.com/resources/regexday/2011/photos/1__original.jpg" style="width: 300px; float: right" />](http://www.bennadel.com/blog/2383-The-5th-Annual-Regular-Expression-Day-And-Prizes-June-1st-2012.htm)

```javascript
// Using named capture and flag x (free-spacing and line comments)
var date = XRegExp('(?<year>  [0-9]{4} ) -?  # year  \n\
                    (?<month> [0-9]{2} ) -?  # month \n\
                    (?<day>   [0-9]{2} )     # day   ', 'x');

// XRegExp.exec gives you named backreferences on the match result
var match = XRegExp.exec('2012-02-22', date);
match.year; // -> '2012'

// It also includes optional pos and sticky arguments
var pos = 3, result = [];
while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\d+)>/, pos, 'sticky')) {
  result.push(match[1]);
  pos = match.index + match[0].length;
} // result -> ['2', '3', '4']

// XRegExp.replace allows named backreferences in replacements
XRegExp.replace('2012-02-22', date, '${month}/${day}/${year}'); // -> '02/22/2012'
XRegExp.replace('2012-02-22', date, function(match) {
  return match.month + '/' + match.day + '/' + match.year;
}); // -> '02/22/2012'
```

## Addons

Addons are one of the more impressive features of [module]. In particular, the `matchRecursive` addon allows you to match balanced brackets and quotes, which is otherwise impossible with regular regex (.NET had this extension built in for some time now however).

In browsers, first include the script:

```javascript
<script src="src/xregexp.js"></script>
<script src="src/addons/matchrecursive.js"></script>
```

You can then match recursive constructs using XRegExp pattern strings as left and right delimiters:

```javascript
var str = '(t((e))s)t()(ing)';
XRegExp.matchRecursive(str, '\\(', '\\)', 'g');
// -> ['t((e))s', '', 'ing']

// Extended information mode with valueNames
str = 'Here is <div> <div>an</div></div> example';
XRegExp.matchRecursive(str, '<div\\s*>', '</div>', 'gi', {
    valueNames: ['between', 'left', 'match', 'right']
});
/* -> [
{name: 'between', value: 'Here is ',       start: 0,  end: 8},
{name: 'left',    value: '<div>',          start: 8,  end: 13},
{name: 'match',   value: ' <div>an</div>', start: 13, end: 27},
{name: 'right',   value: '</div>',         start: 27, end: 33},
{name: 'between', value: ' example',       start: 33, end: 41}
] */

// Omitting unneeded parts with null valueNames, and using escapeChar
str = '...{1}\\{{function(x,y){return y+x;}}';
XRegExp.matchRecursive(str, '{', '}', 'g', {
    valueNames: ['literal', null, 'value', null],
    escapeChar: '\\'
});
/* -> [
{name: 'literal', value: '...', start: 0, end: 3},
{name: 'value',   value: '1',   start: 4, end: 5},
{name: 'literal', value: '\\{', start: 6, end: 8},
{name: 'value',   value: 'function(x,y){return y+x;}', start: 9, end: 35}
] */

// Sticky mode via flag y
str = '<1><<<2>>><3>4<5>';
XRegExp.matchRecursive(str, '<', '>', 'gy');
// -> ['1', '<<2>>', '3']
```

XRegExp.matchRecursive throws an error if it scans past an unbalanced delimiter in the target string.

I've been using [module] in [module full name="syntaxhighlighter" displayName="SyntaxHighlighter" repo="alexgorbatchev/SyntaxHighlighter" license="MIT LGPL"] for a while now. My favourite feature is named captures, which JavaScript is desperately missing. Have you used [module] already? How?]]></content:encoded>
</item><item>
  <wp:post_id>26</wp:post_id>
  <title><![CDATA[dat]]></title>
  <link>http://npmawesome.com/2013-12-19-dat/</link>
  <pubDate>Thu Dec 19 2013 10:08:03 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-19-dat/</guid>
  <description>Real-time replication and versioning for large tabular data sets.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-19 10:08:03</wp:post_date>
  <wp:post_date_gmt>2013-12-19 18:08:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>dat</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Real-time replication and versioning for large tabular data sets.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[dat]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[maxogden/dat]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc3]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[BSD 4-Clause]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc4]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a project that seeks providing better tools for data collaboration.

```javascript
npm install dat
```

## What is dat?

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/dat.png" style="float: right" />

I like the name, makes for clever titles like this :) Anyways, dat:

* make data syncable. automatic sync and updates of entire data sets (or subsets)
* data sets can be very large (billions of items) or updated frequently (real time data)
* sync and transformation plugin API to connect dat to any existing database/format/language
* built with automated + decentralized workflows in mind

To illustrate the goals of `dat` consider the GitHub project, which is a great model of this idea working in a different space. GitHub is built on top of an open source tool called `git` and provides a user-friendly web application that lets software developers find code written by others, use it in their own programs and improve upon it. In a similar fashion `dat` will be developed as a set of tools to store, synchronize, manipulate and collaborate in a decentralized fashion on sets of data, hopefully enabling platforms analogous to GitHub to be built on top of it.

The concept sounds pretty amazing to me. Currently `dat` is in pre-alpha stage but with full time support from [Max Ogden](http://maxogden.com/gut-hosted-open-data-filets.html) it will evolve very quickly.

<iframe width="560" height="315" src="//www.youtube.com/embed/FX7qSwz3SCk" frameborder="0" allowfullscreen></iframe>

Aside from a truly epic beard, Max also has a [cool talk](http://www.youtube.com/watch?v=FX7qSwz3SCk) on YouTube introducing `dat`. Have you gotten any ideas on how this could be used yet?]]></content:encoded>
</item><item>
  <title>dat</title>
  <wp:post_parent>26</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/dat.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-19 10:08:03</wp:post_date>
  <wp:post_date_gmt>2013-12-19 18:08:03</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>27</wp:post_id>
  <title><![CDATA[cheerio]]></title>
  <link>http://npmawesome.com/2013-12-27-cheerio/</link>
  <pubDate>Fri Dec 27 2013 09:19:30 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-27-cheerio/</guid>
  <description>Fast, flexible, and lean implementation of core jQuery designed specifically for the server.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-27 09:19:30</wp:post_date>
  <wp:post_date_gmt>2013-12-27 17:19:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cheerio</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Fast, flexible, and lean implementation of core jQuery designed specifically for the server.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[cheerio]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc5]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[MatthewMueller/cheerio]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc6]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc7]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]

[module full] is a fast, flexible, and lean implementation of core jQuery written by [author] and designed specifically for the server.

```bash
[module install]
```

## Features

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/cheerio.jpg" style="width: 150px; float: right" />

* Familiar syntax. [module] implements a subset of core jQuery. [module] removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing its truly gorgeous API.
* Blazingly fast. [module] works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient. Preliminary end-to-end benchmarks suggest that [module] is about 8x faster than JSDOM.
* Insanely flexible. [module] wraps around [@FB55](https://twitter.com/fb55)'s [module full name="htmlparser2" repo="fb55/htmlparser2" license="MIT"]. [module] can parse nearly any HTML or XML document.

## Example

```javascript
var cheerio = require('cheerio'),
    $ = cheerio.load('<h2 class="title">Hello world</h2>');

$('h2.title').text('Hello there!');
$('h2').addClass('welcome');

$.html();
//=> <h2 class="title welcome">Hello there!</h2>
```

## Screencast Introduction

<iframe src="//player.vimeo.com/video/31950192" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

Are you using jQuery on the server side?]]></content:encoded>
</item><item>
  <title>cheerio</title>
  <wp:post_parent>27</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/cheerio.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-27 09:19:30</wp:post_date>
  <wp:post_date_gmt>2013-12-27 17:19:30</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>28</wp:post_id>
  <title><![CDATA[rework]]></title>
  <link>http://npmawesome.com/2013-12-30-rework/</link>
  <pubDate>Mon Dec 30 2013 10:27:29 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-30-rework/</guid>
  <description>CSS manipulations built on css, allowing you to automate vendor prefixing, create your own properties, inline images, anything you can imagine! Also works in the browser.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-30 10:27:29</wp:post_date>
  <wp:post_date_gmt>2013-12-30 18:27:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>rework</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[CSS manipulations built on css, allowing you to automate vendor prefixing, create your own properties, inline images, anything you can imagine! Also works in the browser.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[rework]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc8]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[reworkcss/rework]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cc9]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cca]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a tool for CSS manipulations built on css, allowing you to automate vendor prefixing, create your own properties, inline images, anything you can imagine! Also works in the browser.

```javascript
npm install rework
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/rework.gif" style="width: 250px; float: right" />

Originally written by TJ Holowaychuk, [module] is a module for working with CSS. Just like [module full name="esprima" repo="ariya/esprima" license="BSD 4-Clause"] for JavaScript, [module] allows you to change and extend CSS, basically take it to a whole new level.

## Example

To get an idea of how to use [module], take a look at one of the many plugins. A good example would be [module full name="rework-imagesize" repo="simme/rework-imagesize" license="MIT"] plugin.

```javascript
var rework = require('rework');
var size   = require('rework-imagesize');

var css = rework(str)
  .use(size('path/to/images/folder'))
  .toString();
```

Using the above JavaScript. This:

```javascript
h1 {
  background: url('myimage.png');
  imgsize: myimage.png;
  text-indent: 100%;
}
```

Would produce something like:

```javascript
h1 {
  background: url('myimage.png');
  text-indent: 100%;
  height: 201px;
  width: 300px;
}
```

[Rework Github](https://github.com/reworkcss) account has a good number of modules to do various things to your CSS. I also like the idea of using [module] as a post processor for your favourite dynamic CSS language, such as [LESS](http://lesscss.org/), [Stylus](http://learnboost.github.io/stylus/) or [SASS](https://github.com/andrew/node-sass).

Curious what is your favourite dynamic CSS framework?

_Image borrowed from [horrible logos](http://www.horriblelogos.com/rework-digital/) and isn't the official logo :)_]]></content:encoded>
</item><item>
  <title>rework</title>
  <wp:post_parent>28</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/rework.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-30 10:27:29</wp:post_date>
  <wp:post_date_gmt>2013-12-30 18:27:29</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>29</wp:post_id>
  <title><![CDATA[recluster]]></title>
  <link>http://npmawesome.com/2013-12-31-recluster/</link>
  <pubDate>Tue Dec 31 2013 10:45:13 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2013-12-31-recluster/</guid>
  <description>Clustering library with support for zero-downtime reloading.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2013-12-31 10:45:13</wp:post_date>
  <wp:post_date_gmt>2013-12-31 18:45:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>recluster</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Clustering library with support for zero-downtime reloading.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[recluster]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ccb]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[doxout/recluster]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ccc]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ccd]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a
clustering library with support for zero-downtime reloading.

```javascript
npm install recluster
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2013/12/recluster.jpg" style="width: 250px; float: right" />

Delivering that 100% uptime for web apps can be a tricky business. Errors and new code rollouts are the things we have to deal with on a daily basis and if you run continuous integration, your app is probably restarting many times a day. What kind of experience this might be creating for your users?

[module] is among a [few][browsenpm-forever] [other][browsenpm-naught]
libraries that try to address this issue. It is:

* Cluster aware.
* Zero downtime errors and deploys.
* Does not run as daemon.
* Log agnostic.
* Simple, relatively easy to reason about.

## Example

If `server.js` is your regular http server (e.g. express), create `cluster.js` and add:

```javascript
var recluster = require('recluster'),
    path = require('path');

var cluster = recluster(path.join(__dirname, 'server.js'));
cluster.run();

process.on('SIGUSR2', function() {
    console.log('Got SIGUSR2, reloading cluster...');
    cluster.reload();
});

console.log("spawned cluster, kill -s SIGUSR2", process.pid, "to reload");
```

then run it

```javascript
node cluster.js
```

To hot-reload the server, simply run

```javascript
kill -s SIGUSR2 <cluster_pid>
```

A server worker can gracefully exit by cleaning up in the 'close' event of its server:

```javascript
server.on('close', function() {
    // cleanup
});
```

Non-server workers can listen for the disconnect command and shut down gracefully before the kill timeout:

```javascript
process.on('message', function(m) {
    if (m.cmd == 'disconnect') {
        // cleanup
    }
})
```

For some fantastic insights on the subject, checkout [Towards 100% Uptime with Node.js](http://sandinmyjoints.github.io/towards-100-pct-uptime) slides by [William Bert](https://github.com/sandinmyjoints) [@williamjohnbert](https://twitter.com/williamjohnbert) and [10 steps to nodejs nirvana in production](http://qzaidi.github.io/2013/05/14/node-in-production/) by [Qasim Zaidi](http://github.com/qzaidi) [@kernelhacker](http://twitter.com/#!/kernelhacker).

Curious, how do you manage your node process?

[browsenpm-forever]: http://browsenpm.org/package/forever
[browsenpm-naught]: http://browsenpm.org/package/naught]]></content:encoded>
</item><item>
  <title>recluster</title>
  <wp:post_parent>29</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/recluster.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2013-12-31 10:45:13</wp:post_date>
  <wp:post_date_gmt>2013-12-31 18:45:13</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>30</wp:post_id>
  <title><![CDATA[chalk]]></title>
  <link>http://npmawesome.com/2014-01-06-chalk/</link>
  <pubDate>Mon Jan 06 2014 16:17:02 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-06-chalk/</guid>
  <description>Chalk is a clean and focused alternative to colors.js</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-06 16:17:02</wp:post_date>
  <wp:post_date_gmt>2014-01-07 00:17:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>chalk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Chalk is a clean and focused alternative to colors.js]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[chalk]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cce]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[sindresorhus/chalk]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ccf]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd0]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a clean and focused alternative to [module full name="colors" repo="Marak/colors" license="MIT"], which is currently the most popular
string styling module, but it has serious deficiencies like extending
String.prototype which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68). Although there are other ones, they either do too much or not enough.

```javascript
npm install chalk
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/01/chalk.png" style="width: 250px; float: right" />

## Why

- **Doesn't extend String.prototype**
- Expressive API
- Clean and focused
- Auto-detects color support
- Actively maintained
- [Used by 150+ modules](https://npmjs.org/browse/depended/chalk)

## Example

```javascript
var chalk = require('chalk');

// style a string
console.log(  chalk.blue('Hello world!')  );

// combine styled and normal strings
console.log(  chalk.blue('Hello'), 'World' + chalk.red('!')  );

// compose multiple styles using the chainable API
console.log(  chalk.blue.bgRed.bold('Hello world!')  );

// nest styles
console.log(  chalk.red('Hello', chalk.underline.bgBlue('world') + '!')  );

// pass in multiple arguments
console.log(  chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz')  );
```

[sindresorhus/chalk](https://github.com/sindresorhus/chalk) was written by [Sindre Sorhus](https://github.com/sindresorhus) [@sindresorhus](https://twitter.com/sindresorhus) who's got a ton of other opensource work. Thank you!]]></content:encoded>
</item><item>
  <title>chalk</title>
  <wp:post_parent>30</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/chalk.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-01-06 16:17:02</wp:post_date>
  <wp:post_date_gmt>2014-01-07 00:17:02</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>31</wp:post_id>
  <title><![CDATA[gulp]]></title>
  <link>http://npmawesome.com/2014-01-09-gulp/</link>
  <pubDate>Thu Jan 09 2014 09:57:52 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-09-gulp/</guid>
  <description>Gulp.js is a streaming build and task runner system.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-09 09:57:52</wp:post_date>
  <wp:post_date_gmt>2014-01-09 17:57:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gulp</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Gulp.js is a streaming build and task runner system.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[gulp]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd1]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[gulpjs/gulp]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd3]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a streaming build and task runner system. It's an alternative to the ever prelific <a href="http://gruntjs.com/">grunt.js</a>. There's been quite [a bit of buzz on the twitters](https://twitter.com/search?q=gulp%20grunt&src=typd).

```javascript
npm install gulp
```

## Example

This file is just a quick sample to give you a taste of what gulp does.

```javascript
var gulp = require('gulp');
var uglify = require('gulp-uglify');
var imagemin = require('gulp-imagemin');

gulp.task('scripts', function() {
  // Minify and copy all JavaScript (except vendor scripts)
  return gulp.src(['client/js/**/*.js', '!client/js/vendor/**'])
    .pipe(uglify())
    .pipe(gulp.dest('build/js'));
});

// Copy all static images
gulp.task('images', function() {
 return gulp.src('client/img/**')
    .pipe(imagemin())
    .pipe(gulp.dest('build/img'));
});

// The default task (called when you run `gulp`)
gulp.task('default', function() {
  gulp.run('scripts', 'images');

  // Watch files and run tasks if they change
  gulp.watch('client/js/**', function() {
    gulp.run('scripts');
  });

  gulp.watch('client/img/**', function() {
    gulp.run('images');
  });
});
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/01/gulp.png" style="width: 150px; float: right" />

## Opinion

There's always a lot of excitement when a new thing comes out that promises to be better than the current thing. It seems to be especially true when the current thing is already pretty solid and just works. What gets to people are the edge cases and they feel annoyed and frustrated easily forgetting how smoothly the rest of the system works.

[Nicolas Bevacqua](https://github.com/bevacqua) has written a [very interesting article](http://blog.ponyfoo.com/2014/01/09/gulp-grunt-whatever) on the subject. My favorite quote:

> Make a choice by yourself, don't just pick something _because XYZ said so_. Pick the tool which works for you. The one you understand, are comfortable with. Above all, **the one that fits your needs**. Don't go blindly chasing the latest fad because someone else tells you to. Similarly, don't get stuck with monolithic jQuery applications (just to give out an example), try something else. Innovate. Be the change you want to see in the world.]]></content:encoded>
</item><item>
  <title>gulp</title>
  <wp:post_parent>31</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/gulp.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-01-09 09:57:52</wp:post_date>
  <wp:post_date_gmt>2014-01-09 17:57:52</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>32</wp:post_id>
  <title><![CDATA[messageformat]]></title>
  <link>http://npmawesome.com/2014-01-10-messageformat/</link>
  <pubDate>Fri Jan 10 2014 10:24:37 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-10-messageformat/</guid>
  <description>ICU MessageFormat for Javascript - i18n Plural and Gender Capable Messages</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-10 10:24:37</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:24:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>messageformat</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[ICU MessageFormat for Javascript - i18n Plural and Gender Capable Messages]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[messageformat]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd4]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[SlexAxton/messageformat.js]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd5]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[WTFPL]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd6]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[messageformat]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd7]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a module by [Alex Sexton](https://github.com/SlexAxton) ([@SlexAxton](https://twitter.com/SlexAxton)) for handling both *pluralization* and *gender* in your applications. It can also lead to much better translations, as it was built by [ICU](http://icu-project.org/apiref/icu4j/com/ibm/icu/text/MessageFormat.html) to help solve those two problems for all known [CLDR](http://cldr.unicode.org/) languages - likely all the ones you care about.

```bash
[module install]
```

## Features

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/01/messageformat.png" style="width: 150px; float: right" />

MessageFormat in Java-land technically incorporates all other type formatting (and the older ChoiceFormat) directly into its messages, however, in the name of filesize, messageformat.js only strives to implement **SelectFormat** and **PluralFormat**. There are plans to pull in locale-aware **NumberFormat** parsing as a "plugin" to this library, but as of right now, it's best to pass things in preformatted (as suggested in the ICU docs).

* Handles arbitrary nesting of pluralization and select rules.
* Works on the server and the client.
* No i18n necessary - you can use it for just well-formed english sentences. `UX++;`
* Speed: Compiles messages to JavaScript code.
  * This is great for speed. Message formatting is just string concatenation.
  * Run a precompiler at build time and remove the need for most of the library. `filesize--;`
* Compatible with other languages that support MessageFormat
* Very whitespace tolerant.
* Supports unicode characters
* Most translation companies are beginning to be exposed to translations like this, even if it's not their core business.

## Example

```javascript
var mf = new MessageFormat('en');
var message = mf.compile('This is a message.'); // returns a function

message();
// "This is a message."

message = mf.compile('His name is {NAME}.');
message({ "NAME" : "Jed" });
// "His name is Jed."
```

Have you ever had to localize an application? What was your eperience like?]]></content:encoded>
</item><item>
  <title>messageformat</title>
  <wp:post_parent>32</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/messageformat.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-01-10 10:24:37</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:24:37</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>33</wp:post_id>
  <title><![CDATA[testium]]></title>
  <link>http://npmawesome.com/2014-01-13-testium/</link>
  <pubDate>Mon Jan 13 2014 12:49:41 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-13-testium/</guid>
  <description>Integration test platform for Node.js using mocha and a sync API.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-13 12:49:41</wp:post_date>
  <wp:post_date_gmt>2014-01-13 20:49:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testium</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Integration test platform for Node.js using mocha and a sync API.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[testium]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd8]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[groupon/testium]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cd9]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[BSD 3-Clause]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cda]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a testing platform focused on providing a simple, but effective,
platform for testing your code in different browsers (via Selenium) and headlessly
(via PhantomJS). It uses [module full name="webdriver-http-sync" repo="groupon/webdriver-http-sync" license="BSD 2-Clause"]
which Groupon wrote in order to communicate using the WebDriver protocol to a Selenium server.

```javascript
npm install testium
```

[author photo]

<blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p><a href="https://twitter.com/Groupon">@Groupon</a>&#39;s Browser Integration Testing platform <a href="https://twitter.com/search?q=%23Testium&amp;src=hash">#Testium</a> is now open source! <a href="https://twitter.com/search?q=%23nodejs&amp;src=hash">#nodejs</a> + Mocha + Selenium = Happy! <a href="https://t.co/lgXiRjflx0">https://t.co/lgXiRjflx0</a></p>&mdash; Jess Telford (@jesstelford) <a href="https://twitter.com/jesstelford/statuses/413382587348811776">December 18, 2013</a></blockquote>

From [the introductory article][intro]:

> We wanted to write tests in JavaScript and Mocha with a synchronous API that takes advantage of our existing Selenium infrastructure. WD.js came close, but the challenge for full adoption came with the syntax, which is callback-based or promise-based. These are typical patterns in JavaScript projects, but for an integration testing tool, we only want to execute serial actions. A synchronous API made the most sense.

and

> Further, there are existing technical limitations due to WebDriver being a common standard across all browsers. Some aspects can’t be implemented in a specific browser and therefore these features are not implemented at all.
>
> There are four specific issues with WebDriver we wanted to resolve:
>
> * response status codes unavailable
> * response headers unavailable
> * request headers not modifiable
> * page must be loaded to set cookies

## Example

A simple test using [module full name="assertive" repo="groupon/assertive" license="BSD 2-Clause"].

```javascript
{getBrowser} = require 'testium'
assert = require 'assertive' # or whatever assert library you prefer

describe 'browse', ->
  before ->
    @browser = getBrowser()
    @browser.navigateTo '/my-account'
    assert.equal 200, @browser.getStatusCode()

  it 'is serving up gzipped content', ->
    assert.equal 'gzip', @browser.getHeader('Content-Encoding')
```

## More

One of the more exciting and unique features is ability to diff screenshots and fail based on the difference. This isn't a new idea, but shipping it as part of a testing framework can increase its adopatation. Finally, check out the demo video and don't forget to read [the introductory article][intro].

<iframe width="560" height="315" src="//www.youtube.com/embed/qmPlM_SqZes" frameborder="0" allowfullscreen></iframe>

[intro]: https://engineering.groupon.com/2014/misc/i-tier-testium/

On the side note, super excited to find out that Groupon is using CoffeeScript! Are you?]]></content:encoded>
</item><item>
  <wp:post_id>34</wp:post_id>
  <title><![CDATA[shortId]]></title>
  <link>http://npmawesome.com/2014-01-14-shortid/</link>
  <pubDate>Tue Jan 14 2014 16:33:38 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-14-shortid/</guid>
  <description>ShortId creates amazingly short non-sequential url-friendly unique ids.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-14 16:33:38</wp:post_date>
  <wp:post_date_gmt>2014-01-15 00:33:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>shortid</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[ShortId creates amazingly short non-sequential url-friendly unique ids.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[shortId]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cdb]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[dylang/shortid]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cdc]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cdd]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] creates amazingly short non-sequential url-friendly unique IDs. Perfect for url shorteners, MongoDB and Redis as well as any other ID users might see.

```javascript
npm install shortId
```

## Features

* By default 7-12 url-friendly characters: `A-Z`, `a-z`, `0-9`, `_-`
* Non-sequential so they are not predictable
* Supports cluster (automatically), custom seeds, custom alphabet

## Example

```javascript
var shortId = require('shortid');

console.log(shortId.generate());
// PPBqWA9
```

## More

What really caught my eye was the [custom implementation](https://github.com/dylang/shortid/blob/master/lib/random.js) of `random`.

```javascript
var seed = 1;

function random() {
  seed = (seed * 9301 + 49297) % 233280;
  return seed/(233280.0);
};
```

Here's a JSFiddle to play around with it. It works...

<iframe width="100%" height="300" src="http://jsfiddle.net/alexgorbatchev/8yxC2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

It got me very curious as to what it actually does as it's not obvious to me at first glance. I found a [decent article](http://indiegamr.com/generate-repeatable-random-numbers-in-js/) talking about this function. Turns out this function is meant to generate predictable "random" numbers based on the seed.

Digging a little bit further, I found [this post](https://gist.github.com/alexgorbatchev/8428967) from the past days:

> ... horrible random (sic) number generators are used by people who don't know better, while very good ones take less than 20 lines of Pascal! Amoung the horrid generators are some that come with certain systems or are presented in textbooks!
>
> ...
>
> Simple (bad) Psuedo Random Number Generator (Sic)
> The low bit typically just toggles between calls.
>
>```javascript
 random() {
>        seed = ( seed * mulitiplier + increment ) % modulus;
>        return seed;
>     }
```

and then later

>```javascript
 /*
>     ** Dr. Park's algorithm published in the Oct. '88 ACM
>     ** "Random Number Generators: Good Ones Are Hard To Find"
>     ** His version available at ftp://cs.wm.edu/pub/rngs.tar
>     ** This is called a   Lehmer Generator
>     */
>
>     static long Seed = 1;       /* This is required to be 32 bits long */
>
>     long random()
>     /*
>     **    Random number between  0  and  2147483647 (2**31 - 1)  inclusive
>     **/
>     {
>       a = 48271
>       m = 2147483647
>       r = 3399    /* r = m mod a */
>       q = 44488   /* q = m div a */
>       if ((Seed = Seed % q * a - Seed / q * r) < 0)
>         Seed += m;
>       return Seed - 1;
>     }
```

Here's a JavaScript implementation:

<iframe width="100%" height="300" src="http://jsfiddle.net/alexgorbatchev/g6aRe/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Should the function in [module] be patched? Thoughts?]]></content:encoded>
</item><item>
  <wp:post_id>35</wp:post_id>
  <title><![CDATA[gaze]]></title>
  <link>http://npmawesome.com/2014-01-17-gaze/</link>
  <pubDate>Fri Jan 17 2014 17:50:40 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-17-gaze/</guid>
  <description>Gaze is a globbing fs.watch wrapper built from the best parts of other fine watch libs.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-17 17:50:40</wp:post_date>
  <wp:post_date_gmt>2014-01-18 01:50:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gaze</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Gaze is a globbing fs.watch wrapper built from the best parts of other fine watch libs.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[gaze]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cde]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[shama/gaze]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cdf]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce0]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] a globbing `fs.watch` wrapper written by
[Kyle Robinson Young](https://github.com/shama)
and built from the best parts of other fine watch libs. Compatible with Node.js
0.10/0.8, Windows, OSX and Linux. There's a
[pretty long list](https://npmjs.org/browse/depended/gaze) of other great modules
that are built on top of [module].

```javascript
npm install gaze
```

<img src="https://github-camo.global.ssl.fastly.net/4b73eecb09b0400ba274ed9aa205da664ee5538e/687474703a2f2f646f6e746b72792e636f6d2f696d616765732f7265706f732f67617a652e706e67" style="width: 100%"/>

## Usage

```javascript
var gaze = require('gaze');

// Watch all .js files/dirs in process.cwd()
gaze('**/*.js', function(err, watcher) {
  // Files have all started watching
  // watcher === this

  // Get all watched files
  console.log(this.watched());

  // On file changed
  this.on('changed', function(filepath) {
    console.log(filepath + ' was changed');
  });

  // On file added
  this.on('added', function(filepath) {
    console.log(filepath + ' was added');
  });

  // On file deleted
  this.on('deleted', function(filepath) {
    console.log(filepath + ' was deleted');
  });

  // On changed/added/deleted
  this.on('all', function(event, filepath) {
    console.log(filepath + ' was ' + event);
  });

  // Get watched files with relative paths
  console.log(this.relative());
});

// Also accepts an array of patterns
gaze(['stylesheets/*.css', 'images/**/*.png'], function() {
  // Add more patterns later to be watched
  this.add(['js/*.js']);
});
```

I've been getting my feet wet with [gulp.js](http://gulpjs.com) and specifically
[module full name="gulp-watch" repo="floatdrop/gulp-watch" license="MIT"]
plugin which helps you process only the files that were changed. This helps to
speed up asset building quite a bit.

Are you using any file watchers in your project?]]></content:encoded>
</item><item>
  <wp:post_id>36</wp:post_id>
  <title><![CDATA[js-yaml]]></title>
  <link>http://npmawesome.com/2014-01-21-js-yaml/</link>
  <pubDate>Tue Jan 21 2014 09:11:30 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-21-js-yaml/</guid>
  <description>js-yaml JavaScript YAML parser and dumper.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-21 09:11:30</wp:post_date>
  <wp:post_date_gmt>2014-01-21 17:11:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>js-yaml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[js-yaml JavaScript YAML parser and dumper.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[js-yaml]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce1]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[nodeca/js-yaml]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce3]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is an implementation of [YAML](http://yaml.org/) written by [Dervus Grim](https://github.com/nodeca) and is a human friendly data serialization language. It started as [PyYAML](http://pyyaml.org/) port, but was completely rewritten from scratch. Full support for 1.2 spec.

```javascript
npm install js-yaml
```

## Example

You can parse a YAML document into an object:

```javascript
var fs = require('fs');
var yaml = require('js-yaml');
var obj = yaml.load(fs.readFileSync(filename, 'utf8'));
```

And of course you can stringify an object into a YAML document:

```javascript
yaml.dump(object, opts);
```

YAML to JSON is what CoffeeScript to JavaScript - pure awesomeness. On the surface it's a one to one data format that is much more human friendly. Under the surface, YAML allows you to reference other nodes and values within the document to avoid repetition. For example, the header for post in the source looks like this:

```javascript
npm:
  repo: &repo nodeca/js-yaml
  name: &name js-yaml
slug: *name
title: *name
```

Where `&name` is an anchor and repeated using `*name` reference. This is a very simple example, but anchors could point to entire nodes consisting of other references and objects. Checkout [module] repo for more examples and explanation.

YAML is awesome! I wish `package.json` was `package.yaml`. Are you using YAML in your project?]]></content:encoded>
</item><item>
  <wp:post_id>37</wp:post_id>
  <title><![CDATA[autoprefixer]]></title>
  <link>http://npmawesome.com/2014-01-22-autoprefixer/</link>
  <pubDate>Wed Jan 22 2014 09:35:00 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-22-autoprefixer/</guid>
  <description>Autoprefixer parses CSS and adds vendor prefixes to rules using `Can I Use`.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-22 09:35:00</wp:post_date>
  <wp:post_date_gmt>2014-01-22 17:35:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>autoprefixer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Autoprefixer parses CSS and adds vendor prefixes to rules using `Can I Use`.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[autoprefixer]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce4]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[ai/autoprefixer]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce5]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce6]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] parses CSS and adds vendor prefixes to rules based on information from the glorious [Can I Use](http://caniuse.com).

```javascript
npm install autoprefixer
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/01/autoprefixer.svg" style="width: 200px; float: right" />

The best tool is a tool you can't see and one that does the work for you. This is the main idea behind [module]. The interface is simple: just forget about vendor prefixes and write normal CSS according to latest W3C specs. You don’t need a special language (like Sass) or special mixins. Of course, you can still use something like [SASS](http://sass-lang.com/), [Stylus](http://learnboost.github.io/stylus/) or [LESS](http://www.lesscss.org/) because [module] is a postprocessor for CSS.

## Features

* Because [module] uses actual data from [Can I Use](http://caniuse.com), it can also clean up your CSS and remove prefixes that are no longer needed.
* Flexbox or gradients have different syntaxes in different browsers (sometimes you need to recalculate angles, sometimes you need 2 old properties instead of new one), but [module] hides this from you. Just code by latest W3C specs and Autoprefixer will produce the code for old browsers.
* You can specify the browsers you want to target
* Source map support

## Usage

There's an incredible amount of ways you can use [module]:

* as a grunt task using [module full name="grunt-autoprefixer" repo="nDmitry/grunt-autoprefixer" license="MIT"]
* with Compass
* with Stylus
* with Rails
* with Mincer
* with Middleman
* with Node
* with PHP

There are plenty of examples and information on [ai/autoprefixer](https://github.com/ai/autoprefixer). Check it out!

I'm completely in love with CSS preprocessors, they make life so much easier. I still go between [LESS](http://www.lesscss.org/) and [Stylus](http://learnboost.github.io/stylus/), but more often lean towards LESS because it makes using [Bootstrap](http://getbootstrap.com/) framework so much easier and so much more modular.

Do you use a CSS preprocessor? Which one?]]></content:encoded>
</item><item>
  <title>autoprefixer</title>
  <wp:post_parent>37</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/autoprefixer.svg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-01-22 09:35:00</wp:post_date>
  <wp:post_date_gmt>2014-01-22 17:35:00</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>38</wp:post_id>
  <title><![CDATA[oboe]]></title>
  <link>http://npmawesome.com/2014-01-23-oboe-js/</link>
  <pubDate>Thu Jan 23 2014 09:46:38 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-23-oboe-js/</guid>
  <description>A fresh approach to JSON loading that speeds up web applications by providing the parsed objects before the response completes.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-23 09:46:38</wp:post_date>
  <wp:post_date_gmt>2014-01-23 17:46:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>oboe-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[A fresh approach to JSON loading that speeds up web applications by providing the parsed objects before the response completes.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[oboe]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce7]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[jimhigson/oboe.js]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce8]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[BSD 4-Clause]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ce9]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[oboe]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cea]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]

[module full] is written by [author] and helps web applications respond quicker by wrapping HTTP's request-response model with a progressively streamed interface. It glues a transport that sits somewhere between streaming and downloading to a JSON parser. It doesn't have any external dependencies.

```bash
[module install]
```

## Features

The library is extremely feature rich for its 13KB size. I will try to summarize them here and you can get full details with examples on the [oboe.js](https://github.com/jimhigson/oboe.js) github page.

* Hangs up when everything that's needed was processed
* Reacts to field and node names
* Reacts to partial arrays
* Reacts to specific nodes or to fields located anywhere
* Uses CSS4 style matching patterns

> Asynchronous parsing is better if the data is written out progressively from the server side because we're sending and parsing everything at the earliest possible opportunity. If you can, send small bits of the output asynchronously as soon as it is ready instead of waiting before everything is ready to start sending.

<div style="text-align: center"><img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/01/oboe.png" style="width: 400px; margin: 1em 0" /></div>

## Usage

Here's a very **basic** use case:

```javascript
{
   "foods": [
      {"colour":"purple"},
      {"colour":"red"},
      {"colour":"brown"}
   ],
   "badThings": [
      {"name":"poison"},
      {"name":"broken_glass"}
   ]
}

var oboe = require('oboe');

oboe('http://localhost/myapp/things.json')
  .node('foods.*', function(foodThing) {
    // This callback will be called everytime a new object is found in the
    // foods array. Oboe won't wait for the download to finish first.
    console.log(foodThing.name);
  })
  .node('badThings.*', function(badThing) {
    console.log('Danger! stay away from ' + badThings.name);
  })
  .done(function(things) {
    console.log('there are ' + things.foods.length + ' things you can eat ' +
      'and ' + things.badThings.length + ' that you shouldn\'t.');
  });
```

Have you used streaming JSON parser before?]]></content:encoded>
</item><item>
  <title>oboe</title>
  <wp:post_parent>38</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/oboe.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-01-23 09:46:38</wp:post_date>
  <wp:post_date_gmt>2014-01-23 17:46:38</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>39</wp:post_id>
  <title><![CDATA[schema-inspector]]></title>
  <link>http://npmawesome.com/2014-01-24-schema-inspector/</link>
  <pubDate>Fri Jan 24 2014 09:17:24 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-24-schema-inspector/</guid>
  <description>Schema-Inspector is a powerful tool to sanitize and validate JS objects.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-24 09:17:24</wp:post_date>
  <wp:post_date_gmt>2014-01-24 17:17:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>schema-inspector</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Schema-Inspector is a powerful tool to sanitize and validate JS objects.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[schema-inspector]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ceb]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[Atinux/schema-inspector]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cec]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6ced]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[<div style="text-align: center"><img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/01/schema-inspector.png" style="margin-bottom: 1em" /></div>

[author photo]

[module full] is a powerful tool to sanitize and validate JS objects written by [author]. It's disigned to work both client-side and server-side and to be scalable with allowing asynchronous and synchronous calls. There's support for object validation and sanitazation with a very simple schema definition.

```bash
[module install]
```

## Usage

```javascript
var inspector = require('schema-inspector');

var schema = {
  type: 'object',
  properties: {
    lorem: { type: 'string', eq: 'ipsum' },
    dolor: {
      type: 'array',
      items: { type: 'number' }
    }
  }
};

var candidate = {
  lorem: 'not_ipsum',
  dolor: [ 12, 34, 'ERROR', 45, 'INVALID' ]
};
var result = inspector.validate(schema, candidate); // Candidate is not valid
console.log(result.format());

/*
  Property @.lorem: must be equal to "ipsum", but is equal to "not_ipsum"
  Property @.dolor[2]: must be number, but is string
  Property @.dolor[4]: must be number, but is string
*/
```

## More

Object validation can come in extremely handy when you are writing APIs. On one end you can validate user input:

```javascript
var express = require('express');
var inspector = require('schema-inspector');
var app = express();

var schema = {
  type: 'object',
  properties: {
    title: { type: 'string', ne: '' },
    message: { type: 'string', ne: '' }
  }
};

app.post('/api', function(req, res, next) {
  var post = req.body;
  var validation = inspector.validate(schema, post);

  if(!validation.valid) {
    return res.send(validation.errors, 400);
  }

  res.send({status: 'ok'});
});
```

On the flip side, you can use the [module] to validate API response in your tests:

```javascript
var request = require('request');
var inspector = require('schema-inspector');

var schema = {
  type: 'object',
  properties: {
    statusCode: { type: 'number', eq: 200 },
    body: { type: 'object', properties: {
      status: { type: 'string', eq: 'ok' }
    }}
  }
};

describe('POST /api', function()
{
  var response;

  before(function(done) {
    request(
      {
        url: '/api',
        json: { title: 'Hello!', message: 'First Post' }
        method: 'POST'
      },
      function(err, r) {
        response = {
          statusCode: r.statusCode,
          body: r.body
        };
        done()
      }
    );
  });

  it('validates', function() {
    var validation = inspector.validate(schema, response);

    if(!validation.valid) {
      throw new Error(validation.format());
    }
  });
});
```

In the end, you have a strong contract between your APIs, consumer and your tests with just a few lines of code. I'm loving this! The [documentation](http://atinux.github.io/schema-inspector/) site is very good and I strongly recommend checking it out.]]></content:encoded>
</item><item>
  <title>schema-inspector</title>
  <wp:post_parent>39</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/schema-inspector.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-01-24 09:17:24</wp:post_date>
  <wp:post_date_gmt>2014-01-24 17:17:24</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>40</wp:post_id>
  <title><![CDATA[mversion]]></title>
  <link>http://npmawesome.com/2014-01-27-mversion/</link>
  <pubDate>Mon Jan 27 2014 17:47:14 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-27-mversion/</guid>
  <description>mversion is an NPM, Bower, Jam, Ender module version handler.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-27 17:47:14</wp:post_date>
  <wp:post_date_gmt>2014-01-28 01:47:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>mversion</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[mversion is an NPM, Bower, Jam, Ender module version handler.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[mversion]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cee]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[mikaelbr/mversion]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cef]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf0]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]

[module full] is an NPM, Bower, Jam, Ender module version handler. It imitates [`npm version`](https://npmjs.org/doc/version.html) to also work on other packaging files. For those times you have either have multiple packaging files (like `bower.json`, `component.json`, `manifest.json`) or just not a `package.json` file. `mversion` can easily bump your version and optionally commit and create a tag.

```bash
[module install]
```

## Features

* Update version by defining new semver valid version or a release string (major, minor, patch, build).
* Use `-m` to auto commit and tag in Git. Apply optional message and use `%s` as placeholder for the updated version. Default message is `v%s` where `%s` is replaced with new version. For example:

```javascript
  $ mversion minor -m
  $ mversion minor -m 'Bumped to v%s'
```

## CLI Usage

```javascript
$ mversion 0.0.5 -m
New Version: 0.0.5
Updated package.json
Updated component.json
Updated manifest.json
Commited to git and created tag v0.0.5
```

## API Usage

```javascript
var mversion = require('mversion');

mversion.get(function (err, data) {
  /*
    data = {
      'package.json': VERSION,
      'component.json': VERSION
    }
  */
});

mversion.update('minor', function (err, data) { })
mversion.update('major', function (err, data) { })
mversion.update('major', 'Some commit message for version %s', function (err, data) { }) // Will commit/tag
mversion.update('patch', function (err, data) { })
mversion.update('build', function (err, data) { })
mversion.update('0.0.1', 'Bumping version', function (err, data) { }) // Will commit/tag
mversion.update('v1.0.1', function (err, data) { })
mversion.update('v1.0.1-beta', function (err, data) { })
mversion.update('v1.0.1-010988', function (err, data) { })
```

## Gulp

Of course, [author] has [gulp.js plugin](https://github.com/mikaelbr/gulp-mversion) to help you with automate build and deploy process.]]></content:encoded>
</item><item>
  <wp:post_id>41</wp:post_id>
  <title><![CDATA[modella]]></title>
  <link>http://npmawesome.com/2014-01-28-modella/</link>
  <pubDate>Tue Jan 28 2014 09:56:33 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-28-modella/</guid>
  <description>Modella is a bare bones model. It exposes a few APIs on which plugins can be built to enhance functionality.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-28 09:56:33</wp:post_date>
  <wp:post_date_gmt>2014-01-28 17:56:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>modella</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Modella is a bare bones model. It exposes a few APIs on which plugins can be built to enhance functionality.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[modella]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf1]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[modella/modella]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf3]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]

[module full] is a bare bones model framework written by [author] of the [cheerio](/posts/2013-12-27-cheerio/) fame. It exposes a few APIs on which plugins can be built to enhance functionality. The core module and select plugins work on the client and server.

```bash
[module install]
```

## Plugins

Most of functionality comes bundles as plugins:

* Adapter (Sync Layer) Plugins
  - [modella-ajax](https://github.com/modella/modella-ajax) - RESTful AJAX HTTP adapter.
  - [ejdb](https://github.com/modella/ejdb) - Ejdb database adapter.
  - [leveldb](https://github.com/modella/leveldb) - LevelDB adapter.
  - [mongo](https://github.com/modella/mongo) - MongoDB adapter.
  - [modella-mysql](https://github.com/alexmingoia/modella-mysql) - MySQL adapter.
  - [modella-memory](https://github.com/alexmingoia/modella-memory) - In-memory adapter.

* Attribute Utilities
  - [validators](https://github.com/modella/validators) - Validations for attributes
  - [slug](https://github.com/modella/slug) - Slug generation on attributes
  - [modella-level-relations](https://github.com/ramitos/modella-level-relations) - LevelUP based modella relations

* Security Plugins
  - [auth](https://github.com/modella/auth) - Authorization plugin.
  - [filter](https://github.com/modella/filter) - Filter sensitive fields from a JSON blob.
  - [protection](https://github.com/modella/protection) - Mass-assignment protection.

* Misc
  - [modella-resource](https://github.com/alexmingoia/modella-resource) - Expose [module] models via RESTful resource middleware (for use with Express).
  - [friendly-errors](https://github.com/modella/friendly-errors) - add friendly error messages to attributes.
  - [save-invalid](https://github.com/modella/save-invalid) - Save invalid models and mark them as dirty in the database.

## Usage

```javascript
var modella = require('modella');
var validators = require('modella-validators');
var mongo = require('modella-mongo')('localhost/db')
var User = modella('User');

User.use(validators);
User.use(mongo);

User
  .attr('_id')
  .attr('username', { required: true })
  .attr('email', { required: true, format: 'email' });

User.index('email', { unique : true });

var user = new User({ name: 'Charley' });

user.save(function(err) {
  User.find(user._id, function(err, u) {
    console.log(u.username());
  });
});
```

If you feel disgrundled with Mongoose or just tired of using the raw driver, give [module] a try!]]></content:encoded>
</item><item>
  <wp:post_id>42</wp:post_id>
  <title><![CDATA[yarm]]></title>
  <link>http://npmawesome.com/2014-01-29-yarm/</link>
  <pubDate>Wed Jan 29 2014 09:37:23 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-29-yarm/</guid>
  <description>YARM is Yet Another REST Module for node.js and Express.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-29 09:37:23</wp:post_date>
  <wp:post_date_gmt>2014-01-29 17:37:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>yarm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[YARM is Yet Another REST Module for node.js and Express.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[yarm]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf4]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[njoyard/yarm]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf5]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf6]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]

[module full] is Yet Another REST Middleware for node.js and Express written by [author]. It has no dependencies, however it is intended to be used with [Express](http://expressjs.com/) and will have additional features if [Mongoose](http://mongoosejs.com/) is present.

```bash
[module install]
```

## Features

The list of features is very extensive. [module] creates REST style APIs for native objects, [Mongoose](http://mongoosejs.com/) and allows you to have pretty tight control over what's happening. There's a long list of customization options that let you specify output format, what's included, how MongoDB collection are fetched, permissions and so.

## Usage

```javascript
var app = require("express")();
var yarm = require("yarm");
var mongoose = require("mongoose");

app.use("/rest", yarm());

var postSchema = new mongoose.Schema({
  title: String,
  text: String,
  comments: [{
    author: String,
    text: String
  }]
});

var Post = mongoose.model("post", postSchema);

yarm.mongoose("posts", Post);

app.listen(80);

$ curl http://localhost/rest/posts?skip=10&limit=1
{
  "_count": 42,
  "_items": [
    {
      "_id": "507f191e810c19729de860ea",
      "title": "My 11th post",
      "text": "Hello, World",
      "comments": [
        {
          "author": "Bob",
          "text": "First !"
        }
      ]
    }
  ]
}

$ curl http://localhost/rest/posts/507f191e810c19729de860ea
{
  "_id": "507f191e810c19729de860ea",
  "title": "My 11th post",
  "text": "Hello, World",
  "comments": [
    {
      "author": "Bob",
      "text": "First !"
    }
  ]
}

$ curl http://localhost/rest/posts/507f191e810c19729de860ea/comments/0/text
First !
```

You can roll your own:

```javascript
resource
  .get(function(req, cb) {
    // GET handler
  })
  .put(function(req, isPatch, cb) {
    // PUT and PATCH handler
  })
  .post(function(req, cb) {
    // POST handler
  })
  .del(function(req, cb) {
    // DELETE handler
  });
```

Of course, you can have nested resources.

```javascript
yarm.resource("/posts/:pid").sub("comments/:cid/*").get(function(req, cb) {
  cb(null, { ... });
});

$ curl http://localhost/rest/posts/first-post/comments/3/foo/bar
...
```

Check out the [njoyard/yarm](https://github.com/njoyard/yarm) github page for complete documentation. How do you handle your APIs?]]></content:encoded>
</item><item>
  <wp:post_id>43</wp:post_id>
  <title><![CDATA[rewire]]></title>
  <link>http://npmawesome.com/2014-01-30-rewire/</link>
  <pubDate>Thu Jan 30 2014 09:49:19 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-30-rewire/</guid>
  <description>Rewire is a dependency injection module for node.js applications.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-30 09:49:19</wp:post_date>
  <wp:post_date_gmt>2014-01-30 17:49:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>rewire</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Rewire is a dependency injection module for node.js applications.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[rewire]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf7]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[jhnns/rewire]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf8]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cf9]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a dependency injection module for node.js applications written by [author]. It adds a special setter and getter to modules so you can modify their behaviour for better unit testing.

```bash
[module install]
```

## Features

* Inject mocks for other modules or globals like process
* Leak private variables
* Override variables within the module
* Works with CoffeeScript

## Usage

```javascript
var rewire = require("rewire");

// rewire acts exactly like require.
var myModule = rewire("./myModule.js");

// Just with one difference:
// Your module will now export a special setter and getter for private variables.
myModule.__set__("myPrivateVar", 123);
myModule.__get__("myPrivateVar"); // = 123

// This allows you to mock almost everything within the module e.g. the fs-module.
// Just pass the variable name as first parameter and your mock as second.
myModule.__set__("fs", {
  readFile: function (path, encoding, cb) {
    cb(null, "Success!");
  }
});

myModule.readSomethingFromFileSystem(function (err, data) {
  console.log(data); // = Success!
});

// You can set different variables with one call.
myModule.__set__({
  fs: fsMock,
  http: httpMock,
  someOtherVar: "hello"
});

// You may also override globals. These changes are only within the module, so
// you don't have to be concerned that other modules are influenced by your mock.
myModule.__set__({
  console: {
    log: function () { /* be quiet */ }
  }
});
```

The biggest difference between `rewire` and `require` is that calling `rewire` multiple times gives you a new module instance every time. Something to keep in mind.

This seems like a good and bad idea at the same time. The power to change and introspect private variables might lead to code that isn't exactly very suitable for tests. I find that writing code to be testable leads to much better code structure and I spend alot more time considering my API.

What do you think?]]></content:encoded>
</item><item>
  <wp:post_id>44</wp:post_id>
  <title><![CDATA[coupon-code]]></title>
  <link>http://npmawesome.com/2014-01-31-coupon-code/</link>
  <pubDate>Fri Jan 31 2014 09:35:42 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-01-31-coupon-code/</guid>
  <description>coupon-code is an implementation of Perl's Algorithm::CouponCode for node.js</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-01-31 09:35:42</wp:post_date>
  <wp:post_date_gmt>2014-01-31 17:35:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>coupon-code</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[coupon-code is an implementation of Perl's Algorithm::CouponCode for node.js]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[coupon-code]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cfa]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[appsattic/node-coupon-code]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cfb]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cfc]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is an implementation of Perl's [Algorithm::CouponCode](https://github.com/grantm/Algorithm-CouponCode) written by [author]. It is meant to solve a what appears on the surface very simple problem - coupon code validation. You would imagine printing codes on paper cups and then having user enter them - pretty straight forward. What happens however when user confuses zero for letter O, or five for S? Should you tell them their code is invalid?

```bash
[module install]
```

## Usage

Lets say you issue a code and print it on a coffee cup.

```javascript
var cc = require('coupon-code');

var code = cc.generate();
// 55G2-DHM0-50NN
```

Somebody enjoyed their coffee and decided to enter the code, which now, upon inspection, is a little bit wet and fuzzy. They enter:

```javascript
cc.validate('s5g2-dhmo-50nn');
// true
```

You can also specify size of the desired code:

```javascript
cc.generate();
// 55G2-DHM0-50NN

cc.generate({ parts : 4 });
// U5H9-HKDH-8RNX-1EX7

cc.generate({ partLen : 6 });
// WYLKQM-U35V40-9N84DA
```

Pretty cool, eh? Until finding this package, I haven't given this problem a second thought. Have you dealt with coupon codes in your app?]]></content:encoded>
</item><item>
  <wp:post_id>45</wp:post_id>
  <title><![CDATA[power-assert]]></title>
  <link>http://npmawesome.com/2014-02-03-power-assert/</link>
  <pubDate>Mon Feb 03 2014 10:59:55 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-03-power-assert/</guid>
  <description>power-asserts is a module that provides pretty damn descriptive assert messages for your tests.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-03 10:59:55</wp:post_date>
  <wp:post_date_gmt>2014-02-03 18:59:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>power-assert</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[power-asserts is a module that provides pretty damn descriptive assert messages for your tests.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[power-assert]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cfd]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[twada/power-assert]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cfe]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6cff]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a
module written by [author] that provides pretty damn descriptive assert
messages for your tests.

```bash
[module install]
```

## Features

[module] transforms your regular boring asserts to this:

```javascript
AssertionError: # /path/to/examples/mocha_node.js:10

    assert(this.ary.indexOf(who) === two);
                |   |       |    |   |
                |   |       |    |   2
                |   |       |    false
                |   -1      "ariya"
                [1,2,3]
```

## Usages

There are two ways to use [module].

1. `power-assert` + `espower-loader` : Only works under Node.
2. `power-assert` + [`grunt-espower`](https://github.com/twada/grunt-espower) or [`gulp-espower`](http://github.com/twada/gulp-espower) : Generates instrumented code so works anywhere.

To give you an idea what the trasnformed code looks like, for example, it transforms:

```javascript
assert(this.ary.indexOf(who) === two);
```

into:

```javascript
assert(assert._expr(assert._capt(assert._capt(assert._capt(this.ary, 'ident', {
    start: {
        line: 9,
        column: 20
    }
}).indexOf(assert._capt(who, 'ident', {
    start: {
        line: 9,
        column: 32
    }
})), 'funcall', {
    start: {
        line: 9,
        column: 24
    }
}) === assert._capt(two, 'ident', {
    start: {
        line: 9,
        column: 41
    }
}), 'binary', {
    start: {
        line: 9,
        column: 37
    }
}), {
    start: {
        line: 9,
        column: 15
    },
    path: '/Users/alexgorbatchev/1-npmawesome/1/power-assert-demo/test/power_assert/mocha_power_assert_test.js'
}, '        assert(this.ary.indexOf(who) === two);'));
```

[module] also works with CoffeeScript files to produce output:

```javascript
AssertionError:

    assert this.ary.indexOf(who) isnt minusOne
                |   |       |    |    |
                |   |       |    |    -1
                |   |       |    false
                |   -1      "ariya"
                [1,2,3]
```

I'm very tempted to give this a try over my goto [chai.js](http://chaijs.com/) library. I'm a little bit worried that it changes number of lines and it might be harder to do certain type of debugging, but the benefit might be worth it!

There's a full documentation on the [module] github page and a [demo project](https://github.com/twada/power-assert-demo). What do you think?]]></content:encoded>
</item><item>
  <wp:post_id>46</wp:post_id>
  <title><![CDATA[binaryjs]]></title>
  <link>http://npmawesome.com/2014-02-04-binary-js/</link>
  <pubDate>Tue Feb 04 2014 09:41:51 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-04-binary-js/</guid>
  <description>binary.js is a lightweight framework that utilizes websockets to send, stream, and pipe binary data bidirectionally between browser javascript.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-04 09:41:51</wp:post_date>
  <wp:post_date_gmt>2014-02-04 17:41:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>binary-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[binary.js is a lightweight framework that utilizes websockets to send, stream, and pipe binary data bidirectionally between browser javascript.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[binaryjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d00]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[binaryjs/binaryjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d01]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d02]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[binaryjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d03]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a lightweight framework by [author] that utilizes websockets to send, stream, and pipe binary data bidirectionally between browser javascript.

```bash
[module install]
```

<img class="hide-on-mobile" src="https://pbs.twimg.com/profile_images/1896980487/418999_10151351854540262_653030261_23084074_1065502090_n_bigger.jpg" style="float: right; margin-left: 1em"/>

## Features

* BinaryPack serialization format is fast, binary, and JSON-type compatible. Data stays binary end to end
* Automatically chunks large binary data buffers for streaming performance
* Send multiple streams of data concurrently over multiplexed websocket connection
* API implements Node.js read/write Streams. You can pipe any stream into BinaryJS streams (and vice-versa)
* `pause`, `resume`, and `end` as in the Streams API
* Currently supports Chrome 15+ and Firefox 11+, IE10. Fallbacks that will support Safari, mobile iOS and Android, and older FF/Chrome versions are in the works.

## What can you do with this?

You have just as much flexibility as a full TCP socket between client and server. Here are some ideas by [author] that are now possible:

* Realtime multiplayer video games without expensive stringifying
* Streaming FLAC into HTML5 WebAudio api
* Progressive image loading (for retina displays and high-res photorgraphy)
* Streaming file uploads
* Live HTML `<video>` streaming
* PJAX (pushState + ajax) with no HTTP requests. Not even for image assets
* Video/audio chat over websockets

## Usage

Server

```javascript
var server = BinaryServer({port: 9000});

server.on('connection', function(client){
  client.on('stream', function(stream, meta){
    var file = fs.createWriteStream(meta.file);
    stream.pipe(file);
  });
});
```

Browser:

```javascript
var client = BinaryClient('ws://localhost:9000');

client.on('open', function(stream){
  var stream = client.createStream({file: 'hello.txt'});
  stream.write('Hello');
  stream.write('World!');
  stream.end();
});
```

Check out [getting started](https://github.com/binaryjs/binaryjs/blob/master/doc/start.md) page and [binaryjs.com](http://binaryjs.com) for extensive documentation. Thanks [author] for making this happen!]]></content:encoded>
</item><item>
  <wp:post_id>47</wp:post_id>
  <title><![CDATA[cucumber]]></title>
  <link>http://npmawesome.com/2014-02-05-cucumber-js/</link>
  <pubDate>Wed Feb 05 2014 13:06:18 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-05-cucumber-js/</guid>
  <description>cucumber.js is a port of the famous Ruby Cucumber testing framework that lets software development teams describe how software should behave in plain text.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-05 13:06:18</wp:post_date>
  <wp:post_date_gmt>2014-02-05 21:06:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cucumber-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[cucumber.js is a port of the famous Ruby Cucumber testing framework that lets software development teams describe how software should behave in plain text.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[cucumber]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d04]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[cucumber/cucumber-js]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d05]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d06]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[cucumber]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d07]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/02/cucumber-logo.png" style="width: 100%; margin-bottom: 1em"/>

[author photo]
[module full] is a port of the famous Ruby [Cucumber testing framework](http://cukes.info/) by [author] that lets software development teams describe how software should behave in plain text. The text is written in a business-readable domain-specific language and serves as documentation, automated tests and development-aid - all rolled into one format.

```bash
[module install]
```

## Features

[module] implements most of the Ruby counterpart's feature for feature and has baked in support for CoffeeScript.

## Usage

Features are written with the [module]

```javascript
# features/myFeature.feature

Feature: Example feature
  As a user of cucumber.js
  I want to have documentation on cucumber
  So that I can concentrate on building awesome applications

  Scenario: Reading documentation
    Given I am on the Cucumber.js GitHub repository
    When I go to the README file
    Then I should see "Usage" as the page title
```

Then

```javascript
@Then "I should see \"$title\" as the page title", (title, callback) ->
  # the above string is converted to the following Regexp by Cucumber:
  # /^I should see "([^"]*)" as the page title$/
  pageTitle = @browser.text("title")

  if title is pageTitle
    callback()
  else
    callback.fail new Error("Expected to be on page with title " + title)
```

or in JavaScript

```javascript
this.Then('I should see "$title" as the page title', function(title, callback) {
  // the above string is converted to the following Regexp by Cucumber:
  // /^I should see "([^"]*)" as the page title$/

  var pageTitle = this.browser.text('title');
  if (title === pageTitle) {
    callback();
  } else {
    callback.fail(new Error("Expected to be on page with title " + title));
  }
});
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/02/cucumber-meme.jpg" style="float: right; margin-left: 1em"/>
Writing [Cucumber scenarios](https://github.com/cucumber/cucumber/wiki/Feature-Introduction) is pretty straight forward and is very addictive. I currently use [Mocha](http://visionmedia.github.io/mocha/) and write `describe` and `it` blocks in nearly the same fasion so that they read as a cohesive story. Perhaps I should just use [module] instead?

[The pipe dream](http://www.martinfowler.com/bliki/BusinessReadableDSL.html) is to be let business people to write software rules without involving programmers. I'm on the fence if it's a good idea, or even if it's possible, but I used to write Cucumber tests back in my Ruby days and loved it!

Check out this [awesome write up](http://flippinawesome.org/2014/01/27/bdd-in-javascript-with-cucumberjs/) on [module]. So, what do you think? Is Cucumber a good idea?]]></content:encoded>
</item><item>
  <title>cucumber-logo</title>
  <wp:post_parent>47</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/cucumber-logo.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-02-05 13:06:18</wp:post_date>
  <wp:post_date_gmt>2014-02-05 21:06:18</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>cucumber-meme</title>
  <wp:post_parent>47</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/cucumber-meme.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-02-05 13:06:18</wp:post_date>
  <wp:post_date_gmt>2014-02-05 21:06:18</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>48</wp:post_id>
  <title><![CDATA[node-dependencies]]></title>
  <link>http://npmawesome.com/2014-02-10-node-dependencies/</link>
  <pubDate>Mon Feb 10 2014 10:57:16 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-10-node-dependencies/</guid>
  <description>node-dependencies is a very basic but incredibly useful command line utility that checks and prints out out-of-date dependencies for your Node.js app.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-10 10:57:16</wp:post_date>
  <wp:post_date_gmt>2014-02-10 18:57:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>node-dependencies</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[node-dependencies is a very basic but incredibly useful command line utility that checks and prints out out-of-date dependencies for your Node.js app.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[node-dependencies]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d08]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[FogCreek/node-dependencies]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d09]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d0a]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[node-dependencies]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d0b]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a very basic but incredibly useful command line utility written by [author] of [Fog Creek](https://www.fogcreek.com/) that checks and prints out out-of-date dependencies for your Node.js app.

```bash
[module install]
```

## Usage

```javascript
$ node-dependencies --sort=urgency

Package                   Local      Major      Minor      Patch
tedious                   0.1.4        ---        ---      0.1.5
mongoose                 3.6.11        ---        ---   3.6.0rc1
optimist                  0.5.0        ---      0.6.0      0.5.2
redis                     0.8.1        ---        ---      0.8.3
underscore                1.4.3        ---        ---      1.4.4
less-middleware          0.1.11        ---        ---     0.1.12
express                   3.2.4        ---        ---      3.2.6
grunt                     0.4.1        ---        ---   0.4.0rc8
coffee-script             1.6.2        ---        ---      1.6.3
bcrypt                    0.7.5        ---        ---      0.7.6
knox                      0.8.2        ---        ---      0.8.3
coffee-backtrace          0.2.0        ---      0.3.4      0.2.1
socket.io                0.9.14        ---        ---    0.9.1-1
async                    0.1.22        ---      0.2.9        ---
mocha                     1.9.0        ---     1.11.0        ---
less                      1.3.3        ---   1.4.0-b4        ---
hbs                       2.1.0        ---      2.3.0        ---
grunt-ember-handleba      0.4.0        ---      0.6.0        ---
js-yaml                   1.0.3      2.1.0        ---        ---
ent                       0.0.5        ---        ---        ---
date-utils               1.2.13        ---        ---        ---
jquery                    1.8.3        ---        ---        ---
```

I came about [module] trying to update dependencies for a whole bunch of NPM modules. It would be even more useful if it could update `package.json` for me.]]></content:encoded>
</item><item>
  <wp:post_id>49</wp:post_id>
  <title><![CDATA[peerjs]]></title>
  <link>http://npmawesome.com/2014-02-11-peer-js/</link>
  <pubDate>Tue Feb 11 2014 09:59:37 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-11-peer-js/</guid>
  <description>peer.js provides a complete, configurable, and easy-to-use peer-to-peer API built on top of WebRTC, supporting both data channels and media streams.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-11 09:59:37</wp:post_date>
  <wp:post_date_gmt>2014-02-11 17:59:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>peer-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[peer.js provides a complete, configurable, and easy-to-use peer-to-peer API built on top of WebRTC, supporting both data channels and media streams.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[peerjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d0c]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[peers/peerjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d0d]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d0e]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[peerjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d0f]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[<img class="hide-on-mobile" src="/images/posts/peerjs.png" style="float: right; margin-left: 1em"/>
[module full] provides a complete, configurable, and easy-to-use peer-to-peer API built on top of WebRTC, supporting both data channels and media streams. [module] wraps the browser's WebRTC implementation to provide a complete, configurable, and easy-to-use peer-to-peer connection API. Equipped with nothing but an ID, a peer can create a P2P data or media stream connection to a remote peer.

```bash
[module install]
```

To broker connections, [module] connects to a PeerServer ([free hosted](http://peerjs.com/peerserver) or [host your own](https://github.com/peers/peerjs-server)). Note that **no peer-to-peer data goes through the server** - the server acts only as connection broker.

## Usage

```javascript
var Peer = require('peerjs').Peer;

// You can pick your own id or omit the id if you want to get a random one from the server.
var peer = new Peer('pick-an-id', { key: 'myapikey' });
```

Connect

```javascript
var conn = peer.connect('another-peers-id');
conn.on('open', function() {
  conn.send('hi!');
});
```

Receive

```javascript
peer.on('connection', function(conn) {
  conn.on('data', function(data) {
    // Will print 'hi!'
    console.log(data);
  });
});
```

Checkout the [awesome API docs](http://peerjs.com/docs/#api) and take it out for a spin. You can create a video chat with just a few lines of code. Have you done any peer-to-peer stuff?]]></content:encoded>
</item><item>
  <wp:post_id>50</wp:post_id>
  <title><![CDATA[jsonstream]]></title>
  <link>http://npmawesome.com/2014-02-12-jsonstream/</link>
  <pubDate>Wed Feb 12 2014 10:07:44 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-12-jsonstream/</guid>
  <description>JSONStream is a module for streaming JSON.parse and JSON.stringify.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-12 10:07:44</wp:post_date>
  <wp:post_date_gmt>2014-02-12 18:07:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>jsonstream</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[JSONStream is a module for streaming JSON.parse and JSON.stringify.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[jsonstream]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d10]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[dominictarr/JSONStream]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d11]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[Apache]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d12]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[jsonstream]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d13]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[module full] is a module by [author] for streaming `JSON.parse` and `JSON.stringify`.

```bash
[module install]
```

## Usage

```javascript
var request = require('request'),
    JSONStream = require('JSONStream'),
    es = require('event-stream')
    ;

var parser = JSONStream.parse(['rows', true]),
    req = request({url: 'http://isaacs.couchone.com/registry/_all_docs'}),
    logger = es.mapSync(function (data) {
      console.error(data);
      return data;
    })

request({url: 'http://isaacs.couchone.com/registry/_all_docs'})
  .pipe(JSONStream.parse('rows.*'))
  .pipe(es.mapSync(function (data) {
    console.error(data);
    return data;
  }));
```

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/02/json.svg" style="float: right; width: 100px; margin-left: 1em' %>"/>
I like the idea behind streaming JSON alot because you don't have to wait for the whole document to come down the pipe, especially if it's very large. It can also integrate with [gulp.js](http://gulpjs.com) very nicely. The really cool thing for me is that you can react to specific nodes in the data structure vs having to seek them out and loop over them manually.

Are you dealing with large JSON structures on your project?]]></content:encoded>
</item><item>
  <title>json</title>
  <wp:post_parent>50</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/json.svg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-02-12 10:07:44</wp:post_date>
  <wp:post_date_gmt>2014-02-12 18:07:44</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>51</wp:post_id>
  <title><![CDATA[domain-context]]></title>
  <link>http://npmawesome.com/2014-02-13-domain-context/</link>
  <pubDate>Thu Feb 13 2014 13:20:38 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-13-domain-context/</guid>
  <description>domain-context is a module for dealing with globally accessible domain-bound contexts, connect/express middleware included.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-13 13:20:38</wp:post_date>
  <wp:post_date_gmt>2014-02-13 21:20:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>domain-context</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[domain-context is a module for dealing with globally accessible domain-bound contexts, connect/express middleware included.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[domain-context]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d14]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[andreypopp/domain-context]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d15]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d16]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/02/domain-context.jpg" style="width: 100%"/>

[module full] is a module by [author] for dealing with globally accessible domain-bound contexts, connect/express middleware included.

```bash
[module install]
```

## Usage

```javascript
var connectDomain = require('connect-domain'),
    domainContext = require('domain-context'),
    express = require('express');

var lifecycle = {
  context: function() {
    return {db: new pg.Client(...)}
  },
  cleanup: function(context) {
    context.db.query('commit');
    context.db.end();
  },
  onError: function(err, context) {
    context.db.query('rollback');
    context.db.end();
  }
};

app = express();
app.use(connectDomain());
app.use(domainContext.middleware(lifecycle));

// Your applicaiton's middleware goes here
//
// Note that because of connect/express design you are required to place two
// middlewares around your application — domainContext.middleware() and
// domainContext.middlewareOnError().

app.use(domainContext.middlewareOnError(lifecycle));

// Now you can use domainContext.get() to query data from the currently active domain:

var domainContext = require('connect-reqcontext');

function getUserById(id, cb) {
  domainContext.get('db').query("select ...", cb);
}
```

I feel that this is pretty self-explanatory here. Being able to get request context outside of the `express` handlers and not having to pass so much context around to API is pretty great.]]></content:encoded>
</item><item>
  <title>domain-context</title>
  <wp:post_parent>51</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/domain-context.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-02-13 13:20:38</wp:post_date>
  <wp:post_date_gmt>2014-02-13 21:20:38</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>52</wp:post_id>
  <title><![CDATA[nodepdf]]></title>
  <link>http://npmawesome.com/2014-02-17-nodepdf/</link>
  <pubDate>Mon Feb 17 2014 09:56:26 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-17-nodepdf/</guid>
  <description>NodePDF is a module for creating PDF files from web pages.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-17 09:56:26</wp:post_date>
  <wp:post_date_gmt>2014-02-17 17:56:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>nodepdf</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[NodePDF is a module for creating PDF files from web pages.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[nodepdf]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d17]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[TJkrusinski/NodePDF]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d18]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d19]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[nodepdf]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d1a]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a module by [author] for creating PDF files from web pages. It depends on [PhantomJS](http://phantomjs.org/) and works by simply taking a screenshot of a page and stuffing it into a PDF. One the plus side, this makes it really easy to do mostly graphics based PDF files from node. On the down side, the content isn't scalable at all, so printing quality will suffer.

```bash
[module install]
```

## Usage

<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/02/nodepdf.jpg" style="width: 300px; float: right; margin: 1em;"/>

```javascript
var nodepdf = require('nodepdf');

// last argument is optional, sets the width and height
// for the viewport to render the pdf from
var pdf = new nodepdf(
  'http://npmawesome.com',
  'npmawesome.pdf',
  {
    args: '--debug=true',
    viewportSize: {
      width: 500,
      height: 300
    }
  }
);

pdf.on('error', function(msg){
    console.log(msg);
});

pdf.on('done', function(pathToFile){
    console.log(pathToFile);
});
```

I can imagine this being used for something simple, like printing tickets, post cards, photos and so on.]]></content:encoded>
</item><item>
  <title>nodepdf</title>
  <wp:post_parent>52</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/nodepdf.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-02-17 09:56:26</wp:post_date>
  <wp:post_date_gmt>2014-02-17 17:56:26</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>53</wp:post_id>
  <title><![CDATA[npm-diff]]></title>
  <link>http://npmawesome.com/2014-02-18-npm-diff/</link>
  <pubDate>Tue Feb 18 2014 11:13:20 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-18-npm-diff/</guid>
  <description>npm-diff is a utility module to diff two versions of NPM module.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-18 11:13:20</wp:post_date>
  <wp:post_date_gmt>2014-02-18 19:13:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>npm-diff</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[npm-diff is a utility module to diff two versions of NPM module.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[npm-diff]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d1b]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[segmentio/npm-diff]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d1c]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d1d]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a utility module by [author] to diff two versions of NPM module. I've been fascinated recently by all the tools being released to help you manage `package.json` and module publishing. It's really cool!

```bash
[module install]
```

## Usage

```javascript
$ npm-diff intersect 0.0.0 0.1.0 | colordiff
```

<img class="hide-on-mobile" src="https://github-camo.global.ssl.fastly.net/304bdd7188c9fea08e87e731790aad980877ce7b/68747470733a2f2f692e636c6f756475702e636f6d2f5267694263634b7664742e706e67" style="width: 100%"/>

BOOM! `brew install colordiff` if you haven't got it.]]></content:encoded>
</item><item>
  <wp:post_id>54</wp:post_id>
  <title><![CDATA[9 gulp.js plugins for a great build system]]></title>
  <link>http://npmawesome.com/2014-02-19-9-gulp-js-plugins-for-a-great-build-system/</link>
  <pubDate>Wed Feb 19 2014 09:26:59 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-19-9-gulp-js-plugins-for-a-great-build-system/</guid>
  <description>9 gulp.js plugins for a great build system</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-19 09:26:59</wp:post_date>
  <wp:post_date_gmt>2014-02-19 17:26:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>9-gulp-js-plugins-for-a-great-build-system</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[9 gulp.js plugins for a great build system]]></wp:meta_value>
  </wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

This article assumes you have experience with node.js, npm and you are pretty familiar with the concept of task runners and command-line interface. It will walk through general steps required to get up and running with [gulp.js].

Not unlike all the other build systems, it all starts by installing the task runner itself, e.g. `npm install gulp` and creating the main file in the root of your project called `gulpfile.js`. For those people like myself, who immediately want to know if [gulp.js] supports CoffeeScript - the answer is yes - just `require('./gulpfile.coffee')` from `gulpfile.js`.

Now that we have everything sorted out, lets get cracking and make a task runner to support our HTML5 node.js project.

<!--more-->

## [gulp-util]

Source: [module full name="gulp-util" repo="gulpjs/gulp-util" license="MIT"]

This is the official tool belt for [gulp.js]. The authors decided to split up helpers into a separate module which you basically end up requiring every time. This module brings in functionality for logging, coloring console output, and so on. Check out the [gulp-util] github page for the full list.

Since this is a utility module, there isn't a specific place to get started with it, so we will use it throughout instead.

## [gulp-clean]

Source: [module full name="gulp-clean" repo="peter-vilja/gulp-clean" license="MIT"]

The first thing any self-respecting build system should do is clean the space and remove everything that's in the way.

```javascript
var gulp = require('gulp');
var clean = require('gulp-clean');

gulp.task('clean', function () {
  return gulp.src('build', {read: false})
    .pipe(clean());
});
```

You can now run `gulp clean` and the `build` folder in the root of your project will be obliterated.

## [gulp-concat]

Source: [module full name="gulp-concat" repo="wearefractal/gulp-concat" license="MIT"]

It's probably safe to assume that your HTML5 project has a few external dependencies like [jQuery](http://jquery.com), maybe [Modernizr](http://modernizr.com/) and such. Instead of having a separate `<script>` tag for each one of them, it would be nice to concat them together into one file. That's where [gulp-concat] comes in:

```javascript
var concat = require('gulp-concat');

gulp.task('vendor', function() {
  return gulp.src('vendor/*.js')
    .pipe(concat('vendor.js'))
    .pipe(gulp.dest('build/vendor.js'))
});
```

Now, running `gulp vendor` will take all `*.js` files from the local `vendor` folder and concat them into `build/vendor.js`.

## [gulp-uglify]

Source: [module full name="gulp-uglify" repo="terinjokes/gulp-uglify" license="MIT"]

The next thing to do is to minify our `vendor.js`. Lets add this to our `vendor` task.

```javascript
var uglify = require('gulp-uglify');

gulp.task('vendor', function() {
  return gulp.src('vendor/*.js')
    .pipe(concat('vendor.js'))
    .pipe(uglify())
    .pipe(gulp.dest('build/vendor.js'))
});
```

Notice, that instead of creating a separate task for minifying, we simply added another `pipe` call. This is essentially what [gulp.js] is all about - applying the right tools!

This is also where things might start going wrong, because [gulp-uglify] will throw an error if you have invalid JavaScript syntax. To deal with that lets add a basic error:

```javascript
var gutil = require('gulp-util');

gulp.task('vendor', function() {
  return gulp.src('vendor/*.js')
    .pipe(concat('vendor.js'))
    .pipe(uglify())
    .pipe(gulp.dest('build/vendor.js'))
    .on('error', gutil.log)
});
```

## [gulp-rename]

Source: [module full name="gulp-rename" repo="hparra/gulp-rename" license="MIT"]

Do you want to keep both, minified and source files around? That's not a problem! Lets extend our `vendor` task to write out `vendor.js` and `vendor.min.js` at the same time.

```javascript
var rename = require('gulp-rename');

gulp.task('vendor', function() {
  return gulp.src('vendor/*.js')
    .pipe(concat('vendor.js'))
    .pipe(gulp.dest('build'))
    .pipe(uglify())
    .pipe(rename('vendor.min.js`))
    .pipe(gulp.dest('build'))
    .on('error', gutil.log)
});
```

Notice that `gulp.dest` is used twice here. This is the cool thing about [gulp.js] - everything is just streams. Adding `gulp.dest` merely dumps whatever we currently have in the stream to disk, we can then mutate it further and save the new state again. Cool, eh?

## [gulp-filesize]

Source: [module full name="gulp-filesize" repo="Metrime/gulp-filesize" license="MIT"]

Don't know about you, but after minifying JavaScript I always want to know the file size. Guess what - I'm not the only one and there's a plugin for that.

```javascript
var filesize = require('gulp-filesize');

gulp.task('vendor', function() {
  return gulp.src('vendor/*.js')
    .pipe(concat('vendor.js'))
    .pipe(gulp.dest('build'))
    .pipe(filesize())
    .pipe(uglify())
    .pipe(rename('vendor.min.js`))
    .pipe(gulp.dest('build'))
    .pipe(filesize())
    .on('error', gutil.log)
});
```

Again, see how `filesize` is used twice? It will first print out the size of our source file and then the minified size.

## [gulp-less]

Source: [module full name="gulp-less" repo="plus3network/gulp-less" license="MIT"]

Lets assume you used the amazing [LESS] preprocessor for your generating your CSS files and now want to generate them. [gulp-less] to the rescue!

```javascript
var less = require('gulp-less');
var path = require('path');

gulp.task('css', function () {
  return gulp.src('less/**/*.less')
    .pipe(less({
      paths: [ path.join(__dirname, 'less', 'includes') ]
    }))
    .pipe(gulp.dest('build/css'))
    .on('error', gutil.log);
});
```

Running `gulp css` will compile all [LESS] files from the `less` folder into `build/css`.

## [gulp-changed]

Source: [module full name="gulp-changed" repo="sindresorhus/gulp-changed" license="MIT"]

I would be forever unhappy if every time I ran `gulp css` all of my files would be regenerated regardless if the source [LESS] files have changed or not. Lets use [gulp-changed] to excluded not modified files.

```javascript
var changed = require('gulp-changed');

gulp.task('css', function () {
  return gulp.src('less/**/*.less')
    .pipe(changed('build/css'))
    .pipe(less({
      paths: [ path.join(__dirname, 'less', 'includes') ]
    }))
    .pipe(gulp.dest('build/css'))
    .on('error', gutil.log);
});
```

## [gulp-watch]

Source: [module full name="gulp-watch" repo="floatdrop/gulp-watch" license="MIT"]

It would be really cool if you didn't have to run `gulp css` every time you make a change, right? Lets set up a task that will monitor our files for changes and and compile them right away.

[gulp-watch] is a little bit different from the other plugins and we use it instead of `gulp.src` as the starting point.

```javascript
var watch = require('gulp-watch');

gulp.task('css:watch', function () {
  watch({
    glob: 'less/**/*.less',
    emit: 'one',
    emitOnGlob: false
  }, function(files) {
    return files
      .pipe(less({
        paths: [ path.join(__dirname, 'less', 'includes') ]
      }))
      .pipe(gulp.dest('build/css'))
      .on('error', gutil.log);
  });
});
```

`gulp css:watch` will being watching all of our LESS files and compile only the changed one.

## All together

Now lets put it all together into `gulpfile.js`

```javascript
var path = require('path');
var gulp = require('gulp');
var gutil = require('gulp-util');
var clean = require('gulp-clean');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var rename = require('gulp-rename');
var filesize = require('gulp-filesize');
var less = require('gulp-less');
var changed = require('gulp-changed');
var watch = require('gulp-watch');

gulp.task('clean', function () {
  gulp.src('build', {read: false})
    .pipe(clean());
});

gulp.task('vendor', function() {
  return gulp.src('vendor/*.js')
    .pipe(concat('vendor.js'))
    .pipe(gulp.dest('build'))
    .pipe(filesize())
    .pipe(uglify())
    .pipe(rename('vendor.min.js`))
    .pipe(gulp.dest('build'))
    .pipe(filesize())
    .on('error', gutil.log)
});

gulp.task('css', function () {
  return gulp.src('less/**/*.less')
    .pipe(changed('build/css'))
    .pipe(less({
      paths: [ path.join(__dirname, 'less', 'includes') ]
    }))
    .pipe(gulp.dest('build/css'))
    .on('error', gutil.log);
});

gulp.task('css:watch', function () {
  watch({
    glob: 'less/**/*.less',
    emit: 'one',
    emitOnGlob: false
  }, function(files) {
    return files
      .pipe(less({
        paths: [ path.join(__dirname, 'less', 'includes') ]
      }))
      .pipe(gulp.dest('build/css'))
      .on('error', gutil.log);
  });
});
```

## Summary

The thing that I personally really like about [gulp.js] is that it feels to me like a toolbox full of single purpose tools that I can use to assemble almost anything. It's amazing how in a span of a couple of months community has wrote [over 300 plugins](http://gulpjs.com/plugins/).

[LESS]: http://lesscss.org/
[gulp.js]: http://gulpjs.com
[gulp-util]: https://github.com/gulpjs/gulp-util
[gulp-clean]: https://github.com/peter-vilja/gulp-clean
[gulp-concat]: https://github.com/wearefractal/gulp-concat
[gulp-uglify]: https://github.com/terinjokes/gulp-uglify
[gulp-rename]: https://github.com/hparra/gulp-rename
[gulp-filesize]: https://github.com/Metrime/gulp-filesize
[gulp-less]: https://github.com/plus3network/gulp-less
[gulp-changed]: https://github.com/sindresorhus/gulp-changed
[gulp-watch]: https://github.com/floatdrop/gulp-watch]]></content:encoded>
</item><item>
  <wp:post_id>55</wp:post_id>
  <title><![CDATA[spritesmith]]></title>
  <link>http://npmawesome.com/2014-02-20-spritesmith/</link>
  <pubDate>Thu Feb 20 2014 09:58:22 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-20-spritesmith/</guid>
  <description>spritesmith is a module that takes image files and generates spritesheets and coordinate maps.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-20 09:58:22</wp:post_date>
  <wp:post_date_gmt>2014-02-20 17:58:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>spritesmith</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[spritesmith is a module that takes image files and generates spritesheets and coordinate maps.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[spritesmith]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d1e]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[Ensighten/spritesmith]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d1f]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d20]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a module by [author] that takes image files and generates [spritesheets] and coordinate maps. By itself [module] would be somewhat difficult to utilize in your workflow, that's why nice people have created [gulp.spritesmith] and [grunt-spritesmith] tasks to make build sprites for you with just a few lines of code.

<!--more-->

```bash
[module install]
```

## Usage

<img class="hide-on-mobile" src="http://upload.wikimedia.org/wikipedia/commons/0/03/Sprite-example.gif" style="float: right; width: 150px; margin-left: 1em; background: white; padding: 1em"/>

```javascript
var sprites = [
  'sprite1.png',
  'sprite2.jpg',
  'sprite3.png'
];

spritesmith({'src': sprites}, function (err, result) {
  // Binary string representation of image
  result.image;

  // Object mapping filename to {x, y, width, height} of image
  result.coordinates;

  // Object with metadata about spritesheet {width, height}
  result.properties;
});
```

Converting this structure to image files and CSS now seems like a pretty straightforward task.

[spritesheets]: http://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29#Sprites_by_CSS
[gulp.spritesmith]: https://github.com/twolfson/gulp.spritesmith
[grunt-spritesmith]: https://github.com/Ensighten/grunt-spritesmith]]></content:encoded>
</item><item>
  <wp:post_id>56</wp:post_id>
  <title><![CDATA[supertest]]></title>
  <link>http://npmawesome.com/2014-02-21-supertest/</link>
  <pubDate>Fri Feb 21 2014 10:09:41 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-21-supertest/</guid>
  <description>supertest is a module for easy HTTP assertions.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-21 10:09:41</wp:post_date>
  <wp:post_date_gmt>2014-02-21 18:09:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>supertest</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[supertest is a module for easy HTTP assertions.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[supertest]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d21]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[visionmedia/supertest]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d22]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d23]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a module by [author] that takes testing HTTP easier via [superagent]. The motivation with this module is to provide a high-level abstraction for testing HTTP, while still allowing you to drop down to the lower-level API provided by superagent.

<!--more-->

```bash
[module install]
```

You may pass an `http.Server`, or a `Function` to `request()` - if the server is not already listening for connections then it is bound to an ephemeral port for you so there is no need to keep track of ports.

## Usage

Here's a basic GET request to an end point.

```javascript
var request = require('supertest')
  , express = require('express');

var app = express();

app.get('/user', function(req, res) {
  res.send(200, { name: 'tobi' });
});

request(app)
  .get('/user')
  .expect('Content-Type', /json/)
  .expect('Content-Length', '20')
  .expect(200)
  .end(function(err, res) {
    if (err) throw err;
  });
```

You can also get all fancy and upload files:

```javascript
request(app)
  .post('/')
  .attach('avatar', 'test/fixtures/homeboy.jpg')
```

Passing the app or url each time is not necessary, if you're testing the same host you may simply re-assign the request variable with the initialization app or url:

```javascript
request = request('http://localhost:5555');

request.get('/').expect(200, function(err) {
  console.log(err);
});

request.get('/').expect('heya', function(err) {
  console.log(err);
});
```

Anything you can do with [superagent], you can do with [module]. For some strange reason I love testing HTTP end points, this is my goto library for this. Thanks TJ!

[superagent]: http://github.com/visionmedia/superagent]]></content:encoded>
</item><item>
  <wp:post_id>57</wp:post_id>
  <title><![CDATA[pretty-error]]></title>
  <link>http://npmawesome.com/2014-02-24-pretty-error/</link>
  <pubDate>Mon Feb 24 2014 09:55:21 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-24-pretty-error/</guid>
  <description>pretty-errors is a module to render node.js error stack with less clutter.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-24 09:55:21</wp:post_date>
  <wp:post_date_gmt>2014-02-24 17:55:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>pretty-error</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[pretty-errors is a module to render node.js error stack with less clutter.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[pretty-error]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d24]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[AriaMinaei/pretty-error]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d25]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d26]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a module by [author] to render node.js error stack in a much more digestable way. This seems like it might a good module to add to your infrastracture if you, like me, constantly having to weed through the ugly stack messages to find relavant lines.

<!--more-->

```bash
[module install]
```

<img class="hide-on-mobile" src="https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/pretty-error-screenshot.png" style="width: 100%; margin: 1em 0"/>

## Usage

```javascript
require('pretty-error').start(function() {
  startTheApp();
});
```

## How it Works

[module] turns error objects into something similar to an HTML document, and then uses the upcoming [RenderKid] to render the document using simple HTML/CSS-like commands for the console. This allows [module] to be themed using simple CSS-like declarations.

## The cool bits

### Shortening paths

You might want to substitute long paths with shorter, more readable aliases:

```javascript
pe.alias('E:/open-source/theatrejs/scripts/js', '(Theare.js)');

// to remove the alias:
pe.removeAlias('E:/open-source/theatrejs/scripts/js');

// or:
pe.removeAllAliases();
```

### Skipping packages

You might want to skip trace lines that belong to specific packages (chai, when, socket.io):

```javascript
pe.skipPackage('chai', 'when', 'socket.io');

// to unskip:
pe.unskipPackage('socket.io');
pe.unskipAllPackages();
```

### Skipping node files

```javascript
// this will skip node.js, path.js, event.js, etc.
pe.skipNodeFiles();

// also:
pe.unskipNodeFiles();
```

### Skipping paths

```javascript
pe.skipPath('/home/dir/someFile.js');

// also:
pe.unskipPath('/home/dir/someFile.js');
pe.unskipAllPaths();
```

[RenderKid]: https://github.com/AriaMinaei/renderkid]]></content:encoded>
</item><item>
  <wp:post_id>58</wp:post_id>
  <title><![CDATA[webdriverjs]]></title>
  <link>http://npmawesome.com/2014-02-25-webdriverjs/</link>
  <pubDate>Tue Feb 25 2014 09:07:16 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-25-webdriverjs/</guid>
  <description>webdriver.js is a webdriver module for node.js that makes it possible to write super easy selenium tests in your favorite BDD or TDD test framework.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-25 09:07:16</wp:post_date>
  <wp:post_date_gmt>2014-02-25 17:07:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>webdriverjs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[webdriver.js is a webdriver module for node.js that makes it possible to write super easy selenium tests in your favorite BDD or TDD test framework.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[webdriverjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d27]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[camme/webdriverjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d28]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d29]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[webdriverjs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d2a]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a module by [author] that makes it possible to write super easy selenium tests in your favorite BDD or TDD test framework. [module] is not the "official webdriverjs driver" says [Christian Bromann](https://github.com/christian-bromann) in [this thread](https://github.com/camme/webdriverjs/issues/138#issuecomment-32051980):

> We're trying to provide a selenium runner which is easy to use, highly extendable and compatible with all common JavaScript test frameworks. It uses an own chain API to execute all async commands in right order. The specialty of this library is that we wrap all JSONWire protocol commands in useful actions commands. So you don't have to care about to get an element first and then call the click command; you just execute the click with a selector as parameter.

<!--more-->

```bash
[module install]
```

## Usage

```javascript
var webdriverjs = require('webdriverjs');

var options = {
  desiredCapabilities: {
    browserName: 'chrome'
  }
};

webdriverjs
  .remote(options)
  .init()
  .url('http://www.google.com')
  .title(function(err, res) {
    console.log('Title was: ' + res.value);
  })
  .end();
```

## Selector API

The `JsonWireProtocol` provides several strategies to query an element. [module] simplifies these to make it more familiar with the common existing selector libraries like Sizzle. The following selector types are supported:

* CSS query selector
* link text
* partial link text
* tag name
* name attribute
* xPath

## More

Here is a simplified example of differences between the drivers:

[selenium-webdriverjs]:

```javascript
driver.get('http://www.google.com');
driver.findElement(webdriver.By.id('q')).sendKeys('webdriver');
driver.findElement(webdriver.By.id('btnG')).click();
```

[WD.js]:

```javascript
browser
  .get("http://www.google.com")
  .elementById('q')
  .sendKeys('webdriver')
  .elementById('btnG')
  .click()
```

[module]:

```javascript
client
    .url('http://google.com')
    .setValue('#q','webdriver')
    .click('#btnG')
```

[module] has also almost all protocol commands implemented, so you can do the same with the standard JSONWire protocol commands.

```javascript
client
    .url('http://google.com')
    .element('#q', function(err,res) {
        client.elementIdValue(res.value.ELEMENT, 'webdriver');
    })
    .element('#btnG', function(err,res) {
        client.elementIdClick(res.value.ELEMENT);
    });
```

[selenium-webdriverjs]: https://code.google.com/p/selenium/wiki/WebDriverJs
[WD.js]: https://github.com/admc/wd]]></content:encoded>
</item><item>
  <wp:post_id>59</wp:post_id>
  <title><![CDATA[qr-image]]></title>
  <link>http://npmawesome.com/2014-02-27-qr-image/</link>
  <pubDate>Thu Feb 27 2014 10:25:57 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-02-27-qr-image/</guid>
  <description>qr-code is yet another QR Code generator.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-02-27 10:25:57</wp:post_date>
  <wp:post_date_gmt>2014-02-27 18:25:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>qr-image</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[qr-code is yet another QR Code generator.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[qr-image]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d2b]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[alexeyten/qr-image]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d2c]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d2d]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

<svg width="150" height="150" viewBox="0 0 27 27" style="float: right; margin-left: 1em;"><path d="M1 1h7v7h-7zM10 1h2v1h-1v1h-1zM13 1h4v1h1v2h-2v1h-1v-2h1v-1h-2v1h-1zM19 1h7v7h-7zM2 2v5h5v-5zM20 2v5h5v-5zM3 3h3v3h-3zM11 3h1v1h-1zM21 3h3v3h-3zM10 4h1v2h-1zM13 4h1v1h1v2h-1v-1h-1v1h-1v-2h1zM16 5h2v3h-1v-1h-1zM9 6h1v2h-1zM11 7h1v1h-1zM13 7h1v1h-1zM15 7h1v1h-1zM12 8h1v2h-1v1h-2v-1h-1v-1h3zM16 8h1v1h-1zM1 9h1v1h-1zM4 9h1v1h-1zM6 9h2v1h-1v1h-2v-1h1zM14 9h2v3h-1v-1h-2v-1h1zM17 9h2v1h1v1h-1v1h1v2h1v1h-1v1h1v1h1v-1h1v1h1v2h-2v1h2v1h-2v2h1v-1h1v2h-1v1h-1v-1h-1v-1h-1v-1h-1v1h-1v1h2v1h-2v1h-2v-2h-1v-1h1v-1h1v-2h-1v-1h-1v-2h-1v1h-2v-1h1v-2h-1v-2h2v-1h1v2h-1v2h1v-2h1v3h1v-1h1v1h1v-2h-1v-1h-1v-1h-1v-1h2v-1h-1zM20 9h1v1h-1zM2 10h2v1h-2zM25 10h1v2h-2v-1h1zM4 11h1v1h1v1h-1v1h1v1h3v1h2v-1h1v2h-1v3h-1v-1h-1v-1h1v-1h-1v1h-8v-1h1v-1h2v1h1v-1h-1v-1h-1v-1h1zM7 11h1v1h-1zM20 11h2v1h-2zM1 12h1v1h1v1h-2zM8 12h1v1h-1zM11 12h1v1h-1zM7 13h1v1h-1zM9 13h1v1h1v1h-2zM22 13h1v1h1v2h-1v-1h-1zM24 13h2v3h-1v-2h-1zM1 15h1v1h-1zM21 15h1v1h-1zM6 16v1h2v-1zM24 16h1v1h-1zM18 18v3h3v-3zM25 18h1v2h-2v-1h1zM1 19h7v7h-7zM14 19h1v1h-1zM19 19h1v1h-1zM2 20v5h5v-5zM9 20h1v1h-1zM12 20h2v1h2v1h-1v1h-2v-2h-1zM3 21h3v3h-3zM10 21h2v1h-1v4h-2v-1h1v-2h-1v-1h1zM24 21h1v1h-1zM25 23h1v1h-1zM12 24h3v2h-3zM20 25h1v1h-1zM24 25h2v1h-2z"/></svg>

[QR code] is this super cool thing you probably have been seeing all over the place lately. It started appearing in North America a few years ago but the actual standard is close to two decades old. It allows you to embed any small amount of data that could be decoded with a basic camera equipped phone. Most common use case here is embedding URLs in printed adverising so that those who are interested could simply point their phone at the add and go to the site instead of having to type in URLs.

[qr-image][browsenpm] (Github: [alexeyten/qr-image][github], License: MIT) is a module by [author] to render [QR code] with node.js and no external dependencies.

<!--more-->

```bash
[module install]
```

## Overview

* No dependecies. This is a really cool bit, if you look at [`package.json`](https://github.com/alexeyten/qr-image/blob/master/package.json) there are literally no dependencies there.
* Generate image in `png`, `svg`, `eps` and `pdf` formats.
* Support UTF-8.

## Usage

```javascript
var qr = require('qr-image');
var fs = require('fs');

var code = qr.image('http://blog.nodejitsu.com', { type: 'svg' });
var output = fs.createWriteStream('nodejitsu.svg')

code.pipe(output);
```

Because we are dealing with streams here, hooking this up to HTTP server is super easy.

```javascript
var qr = require('qr-image');
var express = require('express');

var app = express();

app.get('/', function(req, res) {
  var code = qr.image(new Date().toString(), { type: 'svg' });
  res.type('svg');
  code.pipe(res);
});

app.listen(3000);
```

Now, going to `http://localhost:3000` will spit out a QR code with current time. Wicked!

## Metadata

[QR code] allows you embed pretty much any text, but with some additional formatting you can tell scanning applications about the data and what you want them to do with it. Here are a few most common formats:

<div class="overflow"><table width="100%" border="0" cellspacing="0px" cellpadding="10px">
  <thead>
```javascript
<tr>
  <th>Data Type</th>
  <th>Data Format</th>
</tr>
  </thead>
  <tbody>
<tr>
  <th>Website URL</th>
  <td>http://www.websitename.com (include the “http://” so it recognizes the data as a website URL)</td>
</tr>
<tr>
  <th>Pre-populated email address</th>
  <td>mailto:name@email.com (include “mailto” so it recognizes the data as an email address)</td>
</tr>
<tr>
  <th>Pre-Populated Telephone Number</th>
  <td>+16365553344 (URI should include the country code to support users outside the country of origin)</td>
</tr>
<tr>
  <th>Contact Information</th>
  <td>LastName,FirstName;ADR:(insert address), (second address line), City, ST (Insert 5-digit zip code);TEL:+16365553344;EMAIL:name@email.com;;<strong>DO NOT</strong> use parenthesis or line breaks in code.<p></p>
    <p>*For QR Codes, the MECARD standard format shown above is more standard than vCard standard format</p>
  </td>
</tr>
<tr>
  <th>Pre-populated SMS Message</th>
  <td>smsto:number:message</td>
</tr>
<tr>
  <th>Pre-populated MMS Message</th>
  <td>mms:number:subject</td>
</tr>
<tr>
  <th>Map or Location Coordinates</th>
  <td>latitude, longitude, altitude in meters (a minus sign denotes a South latitude and a West longitude)code for Google offices: 40.71872,-73.98905, 100</td>
</tr>
<tr>
  <th>Android Market URI for Android Devices</th>
  <td>For a QR code you must replace all punctuation with code. For example,market://search?q=pub:”Search Query” becomes:<p></p>
  <p>market://search?q=pub%3A%22Search%20Query%22</p></td>
</tr>
<tr>
  <th>YouTube Video</th>
  <td>youtube://ID (may work on iPhone, untested, unreleased, not standardized)</td>
</tr>
<tr>
  <th>iCal Appointment</th>
  <td>BEGIN:VEVENT<br>
      SUMMARY:Test Meeting<br>
      DTSTART:20110713T190000Z<br>
      DTEND:20110713T200000Z<br>
      END:VEVENT<br>
      (untested, unreleased, not standardized)
  </td>
</tr>
  </tbody>
</table></div>
```

[QR code]: http://en.wikipedia.org/wiki/QR_code

[browsenpm]: http://browsenpm.org/package/qr-image
[github]: https://github.com/alexeyten/qr-image]]></content:encoded>
</item><item>
  <wp:post_id>60</wp:post_id>
  <title><![CDATA[lockit]]></title>
  <link>http://npmawesome.com/2014-03-06-lockit/</link>
  <pubDate>Thu Mar 06 2014 09:35:58 GMT-0800</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-03-06-lockit/</guid>
  <description>Lockit is an authentication solution for Express.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-03-06 09:35:58</wp:post_date>
  <wp:post_date_gmt>2014-03-06 17:35:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>lockit</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Lockit is an authentication solution for Express.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[lockit]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d2e]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[zeMirco/lockit]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d2f]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d30]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

So you got a really cool idea for an app or a service. You get all fired up, talk to your friends about, write down some bullet points and run that exciting `git init` command in an empty folder. One of the first things you are most likely to in the very near future is begin working on some kind of user login and registration process.

<!--more-->

[author photo]
Of course, [passport.js] is great when you can leverage external authentication, but otherwise you are stuck rolling your own system… After a while you find yourself doing it over and over again. How boring! Wouldn't it be nice if somebody finally just wrote a module that you could plugin into your express app that would take care of all this user registration stuff?

Well, look no further than [module full], which is a collection of modules written by [author] that helps you with initial user registraion and password management flow.

```bash
[module install]
```

## Features

1. Supports multiple database adapters (MongoDB, CouchDB, SQL).
1. Sends confirmation emails.
1. Manages email address verification with verification link expiration.
1. Brings own Bootstrap based views which are easy to customize.
1. Account locking after too many failed login attempts.
1. Events for `login`, `logout`, `signup` and `delete`.
1. Implementation of [lots of](https://www.owasp.org/index.php/Guide_to_Authentication) [best](http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication) [pratices](https://www.owasp.org/index.php/Authentication_Cheat_Sheet).
1. REST API
1. [Authentication for SPAs and CSRF support](http://mircozeiss.com/lockit-050-auth-for-single-page-apps-and-csrf/).

## Usage

```javascript
var Lockit = require('lockit');
var app = express();

// express middleware
// ...
// sessions are required
app.use(express.cookieParser('your secret here'));
app.use(express.cookieSession());

var config = {
  db: 'mongodb://127.0.0.1/test',
  dbCollection: 'users'
};

// use middleware before router so your own routes have access to
// req.session.email and req.session.username
var lockit = new Lockit(app, config);

// you now have all the routes like /login, /signup, etc.
// and you can listen on events. For example 'signup'
lockit.on('signup', function(user, res) {
  console.log('a new user signed up');

  // set signup.handleResponse to 'false' for this to work
  res.send('Welcome!');
});

app.use(app.router);
// continue with express middleware
// ...
```

## Emails

By default of course emails aren't being sent. That means that you won't receive any signup and password reset tokens. To send emails you need an email server and you have pass the right settings:

With [mailgun](http://www.mailgun.com/pricing) you can send up to 10,000 emails per month for free. `emailSettings` - see [nodemailer](https://github.com/andris9/Nodemailer) for more information.

```javascript
config = {
  emailType: 'SMTP',
  emailSettings: {
    service: 'Mailgun',
    auth: {
      user: 'postmaster@username.mailgun.org',
      pass: 'secret-password'
    }
  }
}
```

## Custom views

Lockit comes with built-in views which are based on Bootstrap. If you want to use your own custom views you can. It is dead simple. Put them into your `views` folder, for example `views/lockit/myLogin.jade`.

```javascript
config = {
  login: {
    route: '/login',
    logoutRoute: '/logout',
    views: {
      login: 'lockit/myLogin.jade',
      loggedOut: 'lockit/myLogoutSuccess.jade'
    }
  }
}
```

## Routes included

From [lockit-signup](https://github.com/zeMirco/lockit-signup)

 - GET /signup
 - POST /signup
 - GET /signup/:token
 - GET /signup/resend-verification
 - POST /signup/resend-verification

From [lockit-login](https://github.com/zeMirco/lockit-login)

 - GET /login
 - POST /login
 - GET /logout

From [lockit-forgot-password](https://github.com/zeMirco/lockit-forgot-password)

 - GET /forgot-password
 - POST /forgot-password
 - GET /forgot-password/:token
 - POST /forgot-password/:token

From [lockit-delete-account](https://github.com/zeMirco/lockit-delete-account)

 - GET /delete-account
 - POST /delete-account

## Closing thoughts

I love how customizable [module] is and yet comes with very reasonable defaults. It's has pretty much everything you need to get started with basic user registration and password management flow. Checkout [module] github page for full set of options as well as its associated modules.

[passport.js]: http://passportjs.org/]]></content:encoded>
</item><item>
  <wp:post_id>61</wp:post_id>
  <title><![CDATA[convict]]></title>
  <link>http://npmawesome.com/2014-03-12-convict/</link>
  <pubDate>Wed Mar 12 2014 11:25:57 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-03-12-convict/</guid>
  <description>convict is a module to manage application configuration.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-03-12 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-03-12 18:25:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>convict</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[convict is a module to manage application configuration.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[convict]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d31]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[mozilla/node-convict]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d32]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[Apache]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d33]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

Managing application configuration is one of the cornerstones to a reducing stress that comes from deploying Node.js applications to production environment. It's pretty easy if all you have to worry about is the port that your web server is listening on and database connection. But what do you do when you have a dozen or so external services, local folders, multiple connections and so on to have to keep track? And to top it off, all of this varies across development workstations, staging and production.

<!--more-->

[author photo]
To accomplish this for the last couple of years I've been using [module full], written by [author] at Mozilla, with great success. Before diving into [module]
lets first take a moment to review a typical setup for configuring Node.js applications:

1. in your application you `require` some settings file
1. the settings need to vary based on running environment (eg development, staging, production, etc)
1. you don't want to commit your production credentials into git
1. make use of environment variables to configure environments

This is the base line, but there are a few things that make our lives easier, such as:

1. configuration validation prevents app execution if invalid parameters are set or missing all together
1. exceptions are thrown if trying to read non existing configuration variables (to help combat typos)

Lets get started:

```bash
[module install]
```

## Features

* **Loading and merging**: configurations are loaded from disk or inline and merged. JSON files are loaded with `cjson` so comments are welcome.
* **Environmental variables**: values can be derived from environmental variables
* **Command-line arguments**: values can also be derived from command-line arguments
* **Validation**: configurations are validated against your schema, generating an error report with all errors that are found

## Usage

First thing we need to do is define our configuration schema. I'm going to provide a bit of an extensive configuration to give you a more realistic example.

```javascript
var convict = require('convict');

var config = convict({
  env: {
    doc: 'The applicaton environment.',
    format: ['production', 'development', 'test'],
    default: 'development',
    env: 'NODE_ENV',
    arg: 'env'
  },
  mongo: {
    main: {
      doc: 'Main database',
      format: 'url',
      default: 'mongodb://...',
      env: 'MONGO_MAIN'
    },
    sessions: {
      doc: 'Sessions database',
      format: 'url',
      default: 'mongodb://...',
      env: 'MONGO_SESSIONS'
    }
  },
  express: {
    ip: {
      doc: 'The IP address to bind.',
      format: 'ipaddress',
      default: '127.0.0.1',
      env: 'IP_ADDRESS',
    },
    http: {
      port: {
        doc: 'HTTP port to bind.',
        format: 'port',
        default: 3080,
        env: 'HTTP_PORT'
      }
    },
    https: {
      port: {
        doc: 'HTTPs port to bind.',
        format: 'port',
        default: 3443,
        env: 'HTTPS_PORT'
      }
    }
  }
});

// load environment dependent configuration
config.loadFile('./config/' + config.get('env') + '.json');

// validate
config.validate();

module.exports = config;
```

Then in your application:

```javascript
var express = require('express');
var config = require('./config.js');
var app = express();

if(config.get('env') === 'production') {
  app.use(express.logger());
}

app.listen(
  config.get('express.http.port'),
  config.get('express.http.ip')
);
```

With these two files your can start developing. When it comes time to deploying to production, on your server you can set appropriate environment variables like  `NODE_ENV`, `HTTP_PORT` and so on.

```javascript
NODE_ENV=production HTTP_PORT=80 node ./server.js
```

Also, as per our configuration, you can pass `--env=production` when starting the server.

```javascript
HTTP_PORT=80 node ./server.js --env=production
```

## Alternatives

In the great world of NPM there isn't one package to rule them all and there are various ways of accomplishing what you need. Here are a few alternatives you might want to checkout:

* [nconf](https://github.com/flatiron/nconf) - written and maintained by [Nodejitsu](http://nodejitsu.com) own [Charlie Robbins](https://github.com/indexzero). Very similiar to [convict], but doesn't have the validation feature (if that's important to you) but has better support for overriding and managing order in which settings are pulled in.

* [rc](https://github.com/dominictarr/rc) - written and maintained by [Dominic Tarr](https://github.com/dominictarr). Has support for INI file types and .rc files.

* [figc](https://github.com/substack/node-figc) - written and maintained by [James Halliday](https://github.com/substack). The most minimalist module in the list supports JSON files and argv overrides.

## Closing Thoughts

I found this to be the least frictionless way to manage configuration in Node.js to date. Check out [module] github page for detailed API method description.

What are you using to manage your application settings?]]></content:encoded>
</item><item>
  <wp:post_id>62</wp:post_id>
  <title><![CDATA[yargs]]></title>
  <link>http://npmawesome.com/2014-03-21-yargs/</link>
  <pubDate>Fri Mar 21 2014 11:25:57 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-03-21-yargs/</guid>
  <description>Easy command line argument parsing with yargs.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-03-21 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-03-21 18:25:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>yargs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Easy command line argument parsing with yargs.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[yargs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d34]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[chevex/yargs]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d35]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d36]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

[author photo]
This post kicks off a small mini-series of posts about modules which making writing CLI (command line interface) tools in Node.js easier. Typically, when starting a new CLI tool, the first problem that you would encounter is how to read arguments that users pass via command line. Standard library gives us `process.argv` but if you want something a little bit more structured than an array, you have to look elsewhere.

<!--more-->

This is where [module full] comes in handy. This module was originally written by [James Halliday](https://github.com/substack) and called [optimist]. It is now called [module] and the work is continued by [author]. Lets get it installed:

```bash
[module install]
```

## Features

[module] covers most of the features you would need to parse out options from command line.

* Named options: `--foo=1 --bar=2`, `--foo 1 --bar 2` or even `-foo 1 -bar 2`
* Groupped options tarball style: `-x`, `-xz`, `-xzvf`
* Count options: `-v`, `-vv`, `-vvv`
* Non-hyphenated options.
* Usage / requirements.
* Defaults.
* Typing (boolean, string, etc).

Lets look at each one:

### Named options

named-options.js

```javascript
#!/usr/bin/env node
var argv = require('yargs').argv;

if (argv.a > argv.b) {
  console.log('a seems bigger than b');
} else {
  console.log('a is not bigger than b');
}
```

---

```javascript
$ ./named-options.js --a=55 --b=9.52
a seems bigger than b

$ ./named-options.js --a 1 --b 8.1
a is not bigger than b
```

### Groupped Options `tarball` Style

tar.js

```javascript
#!/usr/bin/env node
var argv = require('yargs').argv;

if (argv.x) console.log('Will extract to disk from the archive');
if (argv.z) console.log('Will compress the resulting archive with gzip');
if (argv.f) console.log('Will read the archive from the archive file');
```

---

```javascript
$ ./tar.js -z
Will compress the resulting archive with gzip

$ ./tar.js -zf
Will compress the resulting archive with gzip
Will read the archive from the archive file

$ ./tar.js -zfx
Will extract to disk from the archive
Will compress the resulting archive with gzip
Will read the archive from the archive file
```

### Count Options

count.js

```javascript
#!/usr/bin/env node
var argv = require('yargs')
    .count('verbose')
    .alias('v', 'verbose')
    .argv;

VERBOSE_LEVEL = argv.verbose;

function WARN()  { VERBOSE_LEVEL >= 0 && console.log.apply(console, arguments); }
function INFO()  { VERBOSE_LEVEL >= 1 && console.log.apply(console, arguments); }
function DEBUG() { VERBOSE_LEVEL >= 2 && console.log.apply(console, arguments); }

WARN("Showing only important stuff");
INFO("Showing semi-mportant stuff too");
DEBUG("Extra chatty mode");
```

---

```javascript
$ ./count.js
Showing only important stuff

$ ./count.js -v
Showing only important stuff
Showing semi-important stuff too

$ ./count.js -vv
Showing only important stuff
Showing semi-important stuff too
Extra chatty mode

$ ./count.js -v --verbose
Showing only important stuff
Showing semi-important stuff too
Extra chatty mode
```

### Non-hyphenated Options

nonopt.js:

```javascript
#!/usr/bin/env node
var argv = require('yargs').argv;

console.log('(%d,%d)', argv.x, argv.y);
console.log(argv._);
```

---

```javascript
$ ./nonopt.js -x 6.82 -y 3.35 rum
(6.82,3.35)
[ 'rum' ]

$ ./nonopt.js "me hearties" -x 0.54 yo -y 1.12 ho
(0.54,1.12)
[ 'me hearties', 'yo', 'ho' ]
```

### Usage / Requirements

divide.js:

```javascript
#!/usr/bin/env node
var argv = require('yargs')
  .usage('Usage: $0 -x [num] -y [num]')
  .demand(['x','y'])
  .argv;

console.log(argv.x / argv.y);
```

---

```javascript
$ ./divide.js -x 55 -y 11
5

$ ./divide.js -x 4.91 -z 2.51
Usage: node ./divide.js -x [num] -y [num]

Options:
  -x  [required]
  -y  [required]

Missing required arguments: y
```

demand_count.js:

```javascript
#!/usr/bin/env node
var argv = require('yargs')
  .demand(2)
  .argv;

console.dir(argv)
```

---

```javascript
$ ./demand_count.js a
Not enough arguments, expected 2, but only found 1

$ ./demand_count.js a b
{ _: [ 'a', 'b' ], '$0': './demand_count.js' }

$ ./demand_count.js a b c
{ _: [ 'a', 'b', 'c' ], '$0': './demand_count.js' }
```

### Defaults

default_singles.js:

```javascript
#!/usr/bin/env node
var argv = require('yargs')
  .default('x', 10)
  .default('y', 10)
  .argv;

console.log(argv.x + argv.y);
```

---

```javascript
$ ./default_singles.js -x 5
15
```

default_hash.js:

```javascript
#!/usr/bin/env node
var argv = require('yargs')
  .default({ x : 10, y : 10 })
  .argv;

console.log(argv.x + argv.y);
```

---

```javascript
$ ./default_hash.js -y 7
17
```

### Typing (boolean, string, etc)

boolean_single.js

```javascript
#!/usr/bin/env node
var argv = require('yargs')
  .boolean('v')
  .argv;

console.dir(argv.v);
console.dir(argv._);
```

---

```javascript
$ ./boolean_single.js -v "me hearties" yo ho
true
[ 'me hearties', 'yo', 'ho' ]
```

boolean_double.js

```javascript
#!/usr/bin/env node
var argv = require('yargs')
  .boolean(['x','y','z'])
  .argv;

console.dir([ argv.x, argv.y, argv.z ]);
console.dir(argv._);
```

---

```javascript
$ ./boolean_double.js -x -z one two three
[ true, false, true ]
[ 'one', 'two', 'three' ]
```

## Putting it all together

Finally, all together this makes a fully functional options parser.

```javascript
#!/usr/bin/env node
var argv = require('yargs')
  .usage('Count the lines in a file.\nUsage: $0')
  .example('$0 -f', 'count the lines in the given file')
  .demand('f')
  .alias('f', 'file')
  .describe('f', 'Load a file')
  .argv;
```

## Other modules to checkout

There are many other modules that can help you figure out CLI arguments, some do more, others do less.

* [module full name="minimist" repo="substack/minimist" license="MIT"] by James Halliday aka substack is a light weight module without or usage functionality. James has moved on from [optimist] to [minimist][github] probably around the time when community started adopting mantra of smaller modules that do one thing well. It's a personal preference and I'm glad there are options.
* [module full name="cli" repo="chriso/cli" license="MIT"] by Chris O'Hara is a swiss army knife module for writing CLI applications.

## Closing thoughts

I've been using [optimist] for over a year now and is saddened to see James giving it up, but at the same time it's exciting that the idea and implementation lives on in [module]. A problem that seems so simple on the surface, such as collecting arguments, can turn out to be a major headache without proper tools. I'm very glad [module] is here to help us deal with it.

[optimist]: https://github.com/substack/node-optimist]]></content:encoded>
</item><item>
  <wp:post_id>63</wp:post_id>
  <title><![CDATA[cli-table]]></title>
  <link>http://npmawesome.com/2014-03-28-cli-table/</link>
  <pubDate>Fri Mar 28 2014 11:25:57 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-03-28-cli-table/</guid>
  <description>Easy tables in the terminal output with cli-table module.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-03-28 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-03-28 18:25:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cli-table</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Easy tables in the terminal output with cli-table module.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[cli-table]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d37]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[LearnBoost/cli-table]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d38]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d39]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

In this post we continue the small mini-series of posts about modules for writing CLI (command line interface) tools in Node.js. In the [first post](/posts/2014-03-21-yargs/) we talked about parsing arguments supplied via the command line.

[author photo]
One of the more interesting subject when it comes to writing CLI tools is how do you present data back to your users. Assuming you need to spit out bunch of tabular data, the standard way of doing that would be in a CSV format (comma separated values). This generates output that other programs can easily parse, but most of the time it's pretty incomprehensible for humans. It's a good idea to be nice to your users and give them an option for a pretty format, eg with `--pretty` flag.

<!--more-->

Getting pretty tabular data to STDOUT isn't a trivial matter if you want to tackle it all by yourself. After all, there isn't a `table` tag. Luckily there are modules in NPM to help you with that. One of those modules is [module full] written by [author] of the [LearnBoost](https://github.com/LearnBoost) fame.

```bash
[module install]
```

## Features

The feature set of [module] is nearly comparable with HTML tables, which is pretty damn impressive:

- Customizable characters that constitute the table.
- Color/background styling in the header through [colors.js](http://github.com/marak/colors.js)
- Column width customization
- Text truncation based on predefined widths
- Text alignment (left, right, center)
- Padding (left, right)
- Easy-to-use API

## Usage

Lets get us some CSV data and spit it out in a table:

```javascript
var
  csv = require('csv'),
  Table = require('cli-table')
  ;

var data =
  'Year,Make,Model,Description,Price\n' +
  '1997,Ford,E350,"ac, abs, moon",3000.00\n' +
  '1999,Chevy,"Venture ""Extended Edition""","",4900.00\n' +
  '1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00\n' +
  '1996,Jeep,Grand Cherokee,"MUST SELL!\nair,moon roof,loaded",4799.00'
  ;

csv().from.string(data).to.array(function(data) {
  var
    headers = data[0],
    values = data.slice(1),
    table = new Table({ head: headers })
    ;

  table.push.apply(table, values);
  console.log(table.toString());
});
```

<div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="http://npmawesome.com/wp-content/uploads/2014/03/usage01.png"/></div>

Pretty cool, right? We can get a little fancy with custom borders and alignments:

```javascript
var
  csv = require('csv'),
  Table = require('cli-table')
  ;

var data =
  'Year,Make,Model,Description,Price\n' +
  '1997,Ford,E350,"ac, abs, moon",3000.00\n' +
  '1999,Chevy,"Venture ""Extended Edition""","",4900.00\n' +
  '1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00\n' +
  '1996,Jeep,Grand Cherokee,"MUST SELL!\nair,moon roof,loaded",4799.00\n' +
  '2014,Rolls-Royce,Phantom,"Easy Sell",474990.00'
  ;

var chars = {
  'top': '═', 'top-mid': '╤', 'top-left': '╔', 'top-right': '╗',
  'bottom': '═', 'bottom-mid': '╧', 'bottom-left': '╚',
  'bottom-right': '╝', 'left': '║', 'left-mid': '╟', 'mid': '─',
  'mid-mid': '┼', 'right': '║', 'right-mid': '╢', 'middle': '│'
  };

csv().from.string(data).to.array(function(data) {
  var
    headers = data[0],
    values = data.slice(1),
    aligns = [null, null, null, null, 'right'],
    table = new Table({ head: headers, chars: chars, colAligns: aligns })
    ;

  table.push.apply(table, values);
  console.log(table.toString());
});
```

<div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="http://npmawesome.com/wp-content/uploads/2014/03/usage02.png"/></div>

## Other modules to checkout

[module] of course isn't the only module that can print out pretty tables in the console. Here are a few alternatives:

* [cliff](https://github.com/flatiron/cliff), Nodejitsu's own module does quite a bit more than just tabular data printing.
* [text-table](https://github.com/substack/text-table) by James Halliday aka substack can pretty print tabular data with alignment.
* [easy-table](https://github.com/eldargab/easy-table) by Eldar Gabdullin has some interesting formatting options and can print data with alignment.

## Closing thoughts

User experience doesn't have to suffer just because the target platform is STDOUT. Put a little bit more effort into it and your users will love you that much more. Checkout [module] github page for more examples and view the source for the full list of options.]]></content:encoded>
</item><item>
  <title>usage01</title>
  <wp:post_parent>63</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/cli-tables/usage01.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-03-28 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-03-28 18:25:57</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>usage02</title>
  <wp:post_parent>63</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/cli-tables/usage02.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-03-28 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-03-28 18:25:57</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>64</wp:post_id>
  <title><![CDATA[Links for Apr 4, 2014]]></title>
  <link>http://npmawesome.com/2014-04-03-links/</link>
  <pubDate>Thu Apr 03 2014 20:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-03-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-03 20:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-04 03:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## NPM Inc

* [Nebulous Profit Meditations](http://blog.npmjs.org/post/80997676347/nebulous-profit-meditations)
* [Meet the face behind NPM](http://blog.modulus.io/isaac-interview)

## Apps

* [Koala](http://koala-app.com/) is a GUI application for Less, Sass, Compass and CoffeeScript compilation, to help web developers to use them more efficiently. Koala can run in windows, linux and mac.
* [Zed](http://zedapp.org/) is a fully offline-capable, open source, keyboard-focused, Chrome-based text and code editor you can use to edit local files as well as remote files on any server.

<!--more-->

## Articles & Slides

* [Top Overlooked Security Threats to Node.js Web Applications](https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications)
* [Testing Across Node.js Versions Using Docker](http://www.sitepoint.com/testing-across-node-js-versions-using-docker/)
* [A List of Foundational JavaScript Tools](https://www.codefellows.org/blogs/complete-list-of-javascript-tools)

## GitHub

* [mucuchies](https://github.com/ShiftForward/mucuchies) - A neat looking pluggable client-side dashboard.
* [parallax](https://github.com/wagerfield/parallax) - Parallax Engine that reacts to the orientation of a smart device.
* [KOAN](https://github.com/soygul/koan) stack (Koa, Angular, Node, Mongo, WebSockets) for real-time full-stack JavaScript web development.

## Misc

* [forecast.io weather API](https://developer.forecast.io/docs/v2) is open and has a pretty high free rate limit.
* [Crypto 101](https://www.crypto101.io/) is an introductory course on cryptography, freely available for programmers of all ages and skill levels.
* [GitBook](http://www.gitbook.io/) is a webapp to build beautiful programming books and exercises using GitHub/Git and Markdown.]]></content:encoded>
</item><item>
  <wp:post_id>65</wp:post_id>
  <title><![CDATA[Links for Apr 5, 2014]]></title>
  <link>http://npmawesome.com/2014-04-04-links/</link>
  <pubDate>Fri Apr 04 2014 20:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-04-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-04 20:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-05 03:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## Apps

* [Ghost](https://ghost.org) is an Open Source application which allows you to write and publish your own blog, giving you the tools to make it easy and even fun to do. It's simple, elegant, and designed so that you can spend less time making your blog work and more time blogging.

## Articles & Slides

* [Practical Examples of the New Node.js Streams API](http://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/)
* [How-to Compose Node.js Promises with Q](http://strongloop.com/strongblog/how-to-compose-node-js-promises-with-q/)

<!--more-->

## GitHub

* [JavaScript OCR demo](http://kdzwinel.github.io/JS-OCR-demo/)

## Startups

* [Shyp](http://www.shyp.com/) is the easiest way to ship anything.
* [Spoon Rocket](https://www.spoonrocket.com/) is the most convinient meal ever.

## Misc

* [Code School Courses](https://www.codeschool.com/courses#all)
* [MetaWear: Production Ready Wearables in 30 Minutes or Less!](https://www.kickstarter.com/projects/guardyen/metawear-production-ready-wearables-in-30-minutes)

## Twitter

<blockquote class="twitter-tweet"><p>New <a href="https://twitter.com/search?q=%23npmawesome&amp;src=hash">#npmawesome</a> from <a href="https://twitter.com/alexgorbatchev">@alexgorbatchev</a>: &quot;Progress reporting in CLI applications&quot; || <a href="http://t.co/FymiGMBy3F">http://t.co/FymiGMBy3F</a></p>&mdash; Nodejitsu (@nodejitsu) <a href="https://twitter.com/nodejitsu/statuses/452163004638179328">April 4, 2014</a></blockquote>

<blockquote class="twitter-tweet" data-cards="hidden"><p>If you want a super pimped VM with linux kernel upgraded and easy <a href="https://twitter.com/search?q=%23docker&amp;src=hash">#docker</a> install, you are welcome:&#10;<a href="https://t.co/53GaGshUXs">https://t.co/53GaGshUXs</a></p>&mdash; Thorsten Lorenz (@thlorenz) <a href="https://twitter.com/thlorenz/statuses/452149651723264001">April 4, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Never thought I&#39;d say this, but CoffeeScript is quite nice</p>&mdash; David Tang (@skaterdav85) <a href="https://twitter.com/skaterdav85/statuses/452121943496347648">April 4, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <wp:post_id>66</wp:post_id>
  <title><![CDATA[progress]]></title>
  <link>http://npmawesome.com/2014-04-04-progress/</link>
  <pubDate>Fri Apr 04 2014 11:25:57 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-04-progress/</guid>
  <description>Progress indication for CLI applications with progress module.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-04 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-04-04 18:25:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>progress</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Progress indication for CLI applications with progress module.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[progress]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d3a]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[visionmedia/node-progress]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d3b]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d3c]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

Lets talk about long running CLI (command line interface) applications. When you have a finite process that is expected to take some time, the best thing to do is to let your users know about it. A typical application that for example downloads a file might look like this

```javascript
var
  request = require('request'),
  fs = require('fs')
  ;

process.stdout.write('Downloading... ');

request('http://nodejs.org/dist/node-0.0.1.tar.gz')
  .pipe(fs.createWriteStream(__dirname + '/node.tar.gz'))
  .on('close', function (err) {
    process.stdout.write('done!\n');
  });
```

The user experience is hardly a great one. It's clear that something is happening, or at least expected to be happening.

<!--more-->

<div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="http://npmawesome.com/wp-content/uploads/2014/04/progress01.gif"/></div>

It's not really clear if it's still happening. Is it time for `ctrl+c` yet? How about an indicator that something is actually going on?

```javascript
process.stdout.write('Downloading...');
intervalId = setInterval(function() { process.stdout.write('.'); }, 1000);

request('http://nodejs.org/dist/node-0.0.1.tar.gz')
  .pipe(fs.createWriteStream(__dirname + '/node.tar.gz'))
  .on('close', function (err) {
    process.stdout.write(' done!\n');
    clearInterval(intervalId);
  });
```

<div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="http://npmawesome.com/wp-content/uploads/2014/04/progress02.gif"/></div>

[author photo]
A little better. But still, there's no way of telling how long the process will actually take. Lets just do a real progress bar, shall we? This is where [module full] module that was originally started by [author] comes into play! Due to the awesomeness of open source, [module] is now pretty much a community effort.

```bash
[module install]
```

## Features

[module] supports a wide range of options via the format string and options. In the end will get a good looking ASCII progress bar and that will let everyone know about the true progress in your CLI application.

These are the tokens you can use to format your progress bar:

- `:bar` the progress bar itself
- `:current` current tick number
- `:total` total ticks
- `:elapsed` time elapsed in seconds
- `:percent` completion percentage
- `:eta` estimated completion time in seconds

## Usage

Lets modify our original example and put [module] to a good use:

```javascript
var
  request = require('request'),
  ProgressBar = require('progress'),
  fs = require('fs')
  ;

var
  req = request('http://nodejs.org/dist/node-0.0.1.tar.gz'),
  bar
  ;

req
  .on('data', function (chunk) {
    bar = bar || new ProgressBar('Downloading... [:bar] :percent :etas', {
      complete: '=',
      incomplete: ' ',
      width: 25,
      total: parseInt(req.response.headers['content-length'])
    });

    bar.tick(chunk.length);
  })
  .pipe(fs.createWriteStream(__dirname + '/node.tar.gz'))
  .on('close', function (err) {
    bar.tick(bar.total - bar.curr);
  })
  ;
```

<div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="http://npmawesome.com/wp-content/uploads/2014/04/progress03.gif"/></div>

We even get ETA estimate for free. That's what I'm talking about!

## Other modules to checkout

Here are a few other modules to check out:

* [progbar](https://github.com/jclulow/node-progbar) by [Joshua M. Clulow](https://github.com/jclulow) is a straight up alternative.
* [progressbar](https://github.com/bevry/progressbar) by [Benjamin Arthur Lupton](https://github.com/balupton) extends [module] with chaining, domains, and steps.
* [pm2-multimeter](https://github.com/Unitech/node-multimeter) originally by [James Halliday](https://github.com/substack) and now up kept by [Alexandre Strzelewicz](https://github.com/Unitech) can display multiple progress bars at the same time.

## Closing thoughts

It's really cool to see a CLI application giving meaningful progress feedback. Please don't forget about user experience when building tools.]]></content:encoded>
</item><item>
  <title>progress01</title>
  <wp:post_parent>66</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/progress/progress01.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-04 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-04-04 18:25:57</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>progress02</title>
  <wp:post_parent>66</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/progress/progress02.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-04 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-04-04 18:25:57</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>progress03</title>
  <wp:post_parent>66</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/progress/progress03.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-04 11:25:57</wp:post_date>
  <wp:post_date_gmt>2014-04-04 18:25:57</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>67</wp:post_id>
  <title><![CDATA[slate-irc]]></title>
  <link>http://npmawesome.com/2014-04-04-slate-irc/</link>
  <pubDate>Fri Apr 04 2014 06:43:39 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-04-slate-irc/</guid>
  <description>General purpose IRC client with simple plugin system.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-04 06:43:39</wp:post_date>
  <wp:post_date_gmt>2014-04-04 13:43:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>slate-irc</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[General purpose IRC client with simple plugin system.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[slate-irc]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d3d]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[slate/slate-irc]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d3e]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d3f]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a module by [author] that part of the recently released open source IRC client called [Slate] and is a general purpose IRC client with simple plugin system.

<!--more-->

```bash
[module install]
```

## Usage

```javascript
var irc = require('slate-irc');
var net = require('net');

var stream = net.connect({
  port: 6667,
  host: 'irc.freenode.org'
});

var client = irc(stream);

client.on('notice', function(notice) {
  console.log(notice.message);
});

client.nick('npmawesome-test');
client.user('npmawesome-test', 'Alex Gorbatchev');
client.join('#flood');

client.names('#flood', function(err, names) {
  if (err) throw err;

  names.sort();
  console.log(names.join('\n'));

  client.quit();
});
```

## Plugins

Plugins are simply functions that accept the IRC client as an argument. With this you can define methods, listen on events and interact with the client. For example here's a logger plugin that outputs to stdout:

```javascript
function logger() {
  return function(irc) {
    irc.stream.pipe(process.stdout);
  }
}

client.use(logger());
```

Here's a slightly more complex example of a PONG plugin responding to PING messages:

```javascript
function pong() {
  return function(irc) {
    irc.on('data', function(msg) {
      if ('PING' === msg.command)
        irc.write('PONG :' + msg.trailing);
    });
  }
}
```

## Closing Thoughts

[module] can serve as a core of a regular IRC client or you can write an IRC bot for your team chat. Checkout the [github page](https://github.com/slate/slate-irc) for full documentation.

[Slate]: https://github.com/slate/slate]]></content:encoded>
</item><item>
  <wp:post_id>68</wp:post_id>
  <title><![CDATA[Links for Apr 7, 2014]]></title>
  <link>http://npmawesome.com/2014-04-07-links/</link>
  <pubDate>Mon Apr 07 2014 20:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-07-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-07 20:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-08 03:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## Articles & Slides

* [Email transparency at Khan Academy](http://bjk5.com/post/71887196490/email-transparency-at-khan-academy)

  > Whenever we mention that almost all Khan Academy email is visible to everybody on the team, people always wanna know more... Here’s the how and why of “radical email transparency” at Khan.

* [S.F. cracks down on Airbnb rentals](http://www.sfgate.com/bayarea/article/S-F-cracks-down-on-Airbnb-rentals-5381237.php)

  > As Katz discovered, San Francisco's ban on short-term rentals is turning out to have teeth. People who rent out space on Airbnb, VRBO and other markets for temporary housing are facing fines by the City Planning Department and eviction on the grounds of illegally operating hotels.

* [Link a tablet to your meeting room calendar](http://www.glintech.com/blog/link-tablet-your-meeting-room-calendar)

  > They reasoned that by linking our online calendars to a tablet mounted neatly next to the door, it’d be much easier to see, at a glance, whether the room was being used - without poking your head in and possibly interrupting someone.

* [The Single Most Sure-Fire Hiring Decision You Will Ever Make](http://behindthescenesrecruiter.com/post/82005145232/the-single-most-sure-fire-hiring-desion-you-will-ever)

  > “One good way to snag the great people who are never in the job market is to get them before they even realize there is a job market: when they’re in college.” All the way back in 2006, Joel Spolsky knew that a competitive and rewarding internship program was the best way to acquire top engineering talent. Yet even in 2014, in the midst of a talent crunch, surprisingly few technical companies have internship programs.

* [A Tip for Angular Unit Tests with Promises](http://brianmcd.com/2014/03/27/a-tip-for-angular-unit-tests-with-promises.html)

  > tl;dr: Don't put assertions inside promise callbacks.

<!--more-->

## GitHub

* [Open Red Alert](https://github.com/OpenRA/OpenRA) - I played this game to death when it came out originally. Crazy that somebody's rewriting it in C# (mono).
* [ZoneMinder](https://github.com/ZoneMinder/ZoneMinder) is a free, open source Closed-circuit television software application developed for Linux which supports IP, USB and Analog cameras.
* [JavaScript GitBook](https://github.com/GitbookIO/javascript) - teaching programming basics with JavaScript.
* [iHover](http://gudh.github.io/ihover/dist/index.html) is an impressive hover effects collection, powered by pure CSS3, no dependency, work well with Bootstrap 3!

## Services

* [Keybase](https://keybase.io) will be a public directory of publicly auditable public keys. All paired, for convenience, with unique usernames.
* [ASCIInema](https://asciinema.org/) - record and share your terminal sessions, the right way.

## Misc

* [How to Make Cronuts](http://allrecipes.com/recipe/how-to-make-cronuts-part-i/) - I'm kind of obsessed with these.
* [Raspberry Pi compute module: new product!](http://www.raspberrypi.org/raspberry-pi-compute-module-new-product/)
* [Colorful Countdown Clock for tight timeline management](http://www.instructables.com/id/Colorful-Countdown-Clock-for-tight-timeline-manage/)

## Twitter

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/search?q=%23Trello&amp;src=hash">#Trello</a> is written in <a href="https://twitter.com/search?q=%23CoffeeScript&amp;src=hash">#CoffeeScript</a>!! Holy Fuck! That&#39;s amazing!!</p>&mdash; Juan Jose Ramirez U. (@whoisjuan) <a href="https://twitter.com/whoisjuan/statuses/453308127036047360">April 7, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>CoffeeScript has “unless”? SOLD</p>&mdash; David R. Poindexter (@mtheoryx) <a href="https://twitter.com/mtheoryx/statuses/453260810731548672">April 7, 2014</a></blockquote>
]]></content:encoded>
</item><item>
  <wp:post_id>69</wp:post_id>
  <title><![CDATA[Links for Apr 8, 2014]]></title>
  <link>http://npmawesome.com/2014-04-09-links/</link>
  <pubDate>Wed Apr 09 2014 20:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-09-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-09 20:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-10 03:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## Articles & Slides

* [Getting Started with Docker](http://serversforhackers.com/articles/2014/03/20/getting-started-with-docker/)
* [Optimising NginX, Node.JS and networking for heavy workloads](https://engineering.gosquared.com/optimising-nginx-node-js-and-networking-for-heavy-workloads)

<!--more-->

## GitHub

* [ource-map-visualization](http://sokra.github.io/source-map-visualization/) for various flavors. Pretty cool to see how the mapping works.
* [angular-strap](http://mgcrea.github.io/angular-strap/) - AngularJS 1.2+ native directives for Twitter Bootstrap 3.
* [flag-icon-css](http://lipis.github.io/flag-icon-css/) - CSS for vector based country flags.
* [oculus-drone](https://github.com/daraosn/oculus-drone) - Oculus Rift + AR Drone 2.0 controller with live video feed and head-motion controller written for Node.js in CoffeeScript.
* [node-fluent-ffmpeg](https://github.com/schaermu/node-fluent-ffmpeg) abstracts the complex command-line usage of ffmpeg into a fluent, easy to use Node.js module.
* [Jasper](http://jasperproject.github.io/) is an open source platform for developing always-on, voice-controlled applications.

## Startups

* [Slack](https://slack.com/) brings all your communication together in one place. It’s real-time messaging, archiving and search for modern teams.
* [ZeroCater](https://zerocater.com/) is the easiest way to feed your team.

## Vidoes

* [JSConf 2013 conference videos](http://2013.jsconf.eu/speakers/videos.html)
* [NDC conference videos](http://vimeo.com/ndcoslo/videos/sort:plays/format:thumbnail)
* [Fluent 2014 conference videos](https://www.youtube.com/playlist?list=PL055Epbe6d5bab7rZ3i83OtMmD-d9uq2K)
]]></content:encoded>
</item><item>
  <wp:post_id>70</wp:post_id>
  <title><![CDATA[shmock]]></title>
  <link>http://npmawesome.com/2014-04-10-shmock/</link>
  <pubDate>Thu Apr 10 2014 09:45:06 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-10-shmock/</guid>
  <description>General purpose IRC client with simple plugin system.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-10 09:45:06</wp:post_date>
  <wp:post_date_gmt>2014-04-10 16:45:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>shmock</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[General purpose IRC client with simple plugin system.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[shmock]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d40]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[xetorthio/shmock]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d41]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d42]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[module full] is a module by [author] provides a super nice API, like the one of [superagent](https://github.com/visionmedia/superagent) but it creates a real http server (using [express](https://github.com/visionmedia/express)). The nice thing about this is that you don't really care about the implementation, which http client is being used, or even if nodes native http api changes.

<!--more-->

```bash
[module install]
```

## Usage

```javascript
var
  shmock = require('shmock'),
  request = require('request'),
  assert = require('assert')
  ;

var mock = shmock(9000);

mock
  .get('/foo')
  .query('a=1&b=2')
  .reply(200, 'Hello npmawesome.com')
  ;

request("http://localhost:9000/foo?b=2&a=1", function(err, response) {
  assert.equal(response.statusCode, 200);
  assert.equal(response.body, 'Hello npmawesome.com');
  mock.close();

  console.log('It worked!');
});
```

Checkout [runnable example](http://runnable.com/U0bPQd2Mi8VtE_Vi/shmock-example-for-node-js-and-npmawesome).

## Closing Thoughts

Being able to mock APIs is a very powerful tool for [BDD](http://en.wikipedia.org/wiki/Behavior-driven_development). You can prototype, design and test your consumer before implementing a line of code. Check out [xetorthio/shmock](https://github.com/xetorthio/shmock) github page for full documentation and test for examples of usage.]]></content:encoded>
</item><item>
  <wp:post_id>71</wp:post_id>
  <title><![CDATA[Links for Apr 10, 2014]]></title>
  <link>http://npmawesome.com/2014-04-11-links/</link>
  <pubDate>Fri Apr 11 2014 20:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-11-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-11 20:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-12 03:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## Articles & Slides

* [Write Code Every Day](http://ejohn.org/blog/write-code-every-day/)

  > Minimum viable code. I was forced to write code for no less than 30 minutes a day. (It’s really hard to write meaningful code in less time, especially after remembering where you left off the day before.) Some week days I work a little bit more (usually no more than an hour) and on weekends I’m sometimes able to work a full day.

* [Docker-powered Runnable Gists](http://hmarr.com/2013/oct/16/codecube-runnable-gists/)

  > There are a number of ways of achieving each of these objectives (virtual machines, chroot, cgroups, etc), but Docker emerged as a pretty great solution that covers each of the points mentioned. Built on LXC and cgroups, it enables creation and teardown of relatively secure sandboxed environments in a fraction of a second. Each time a code snippet is run, a docker container can be created, started, used to run the untrusted code, then killed and destroyed. It’s incredible that all this can happen in a matter of milliseconds.

* [JS Everywhere - My First Conference Talk](http://blog.dcxn.com/2013/10/27/js-everywhere-my-first-conference-talk/)

  > I started working on this 15-minute talk about a month ago and that felt like the right amount of time. The talk went through several incarnations as I got feedback from a number of different people. Fairly early on I knew that I wanted to argue that code is fashion but in early talks, someone pointed out to me that I was really saying that fashion is nothing but fads. That was great feedback and because I still had quite a bit of time I was able to think about it and come to a better understanding of what fashion means to me.

* [Debugging Clustered Apps with Node-Inspector](http://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/)

  > Debugging a clustered Node application is not without some idiosyncrasies, particularly if you are running Node v0.10. But, it does work well enough if you understand what’s going on behind the scenes. Now, before you embark on this debugging adventure, you should probably ask yourself, “Can I run my app un-clustered and debug it in that mode or is the issue I am trying to track down, only seen when running my app in a clustered configuration?”

* [Why are people from the future not time traveling to our period?](http://www.quora.com/Time-Travel/Why-are-people-from-the-future-not-time-traveling-to-our-period)

  > ![](http://qph.is.quoracdn.net/main-qimg-aff38ac936d19039781773b5bdbac2d4?convert_to_webp=true)
  >
  > So the likely reason that time travelers from the future aren't visiting our period is (other than time travel perhaps being physically impossible) that we're just not that interesting, and we're not really that large.  It's only temporal-centric egotism that makes us believe otherwise.

* [JSJ Robots with Raquel Vélez Podcast](http://javascriptjabber.com/103-jsj-robots-with-raquel-velez/)

<!--more-->

## GitHub

* [Kiwi IRC](https://kiwiirc.com) makes Web IRC easy. A hand-crafted IRC client that you canenjoy. Designed to be used easily and freely.
* [Famo.us](https://github.com/famous/famous) provides a powerful JavaScript framework and developer tools designed to build rich, fast web applications. Famo.us takes an opinionated approach to developing with web technology, maintaining tight control of rendering to achieve maximum UI performance. Check out the [demos](http://demo.famo.us/).

## Twitter

<blockquote class="twitter-tweet"><p>You should write code every day: <a href="http://t.co/M0MmaZn15O">http://t.co/M0MmaZn15O</a></p>&mdash; John Resig (@jeresig) <a href="https://twitter.com/jeresig/statuses/454325606432645120">April 10, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>JavaScript robots and other topics: <a href="https://twitter.com/rockbot">@rockbot</a> interviewed by <a href="https://twitter.com/JSJabber">@JSJabber</a> <a href="http://t.co/lt3ZTCyfZe">http://t.co/lt3ZTCyfZe</a></p>&mdash; Technical Machine (@technicalhumans) <a href="https://twitter.com/technicalhumans/statuses/454320117682569216">April 10, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Design strategies for JavaScript API: <a href="http://t.co/gkcZGtnFj3">http://t.co/gkcZGtnFj3</a> - great tips by <a href="https://twitter.com/AriyaHidayat">@AriyaHidayat</a>!</p>&mdash; Ilya Grigorik (@igrigorik) <a href="https://twitter.com/igrigorik/statuses/454357649178390528">April 10, 2014</a></blockquote>

[browsenpm]: http://browsenpm.org/package/famous
[github]: https://github.com/famous/famous]]></content:encoded>
</item><item>
  <wp:post_id>72</wp:post_id>
  <title><![CDATA[Links for Apr 15, 2014]]></title>
  <link>http://npmawesome.com/2014-04-15-links/</link>
  <pubDate>Tue Apr 15 2014 20:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-15-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-15 20:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-16 03:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## Articles & Slides

* [ExpressJS 4.0: New Features and Upgrading from 3.0](http://scotch.io/bar-talk/expressjs-4-0-new-features-and-upgrading-from-3-0)
* [Express 3.x to 4.0 migration guide](https://github.com/visionmedia/express/wiki/Migrating-from-3.x-to-4.x)
* [The maximum call stack size](http://www.2ality.com/2014/04/call-stack-size.html)
* [Jeff Bezos Says Amazon Is Seriously Serious About Drone Deliveries](http://www.wired.com/2014/04/amazon-delivery-drones/)

  > On a per customer basis, Prime members are ordering more items, across more categories, than ever before

  No kidding :) I basically buy everything on Amazon now.

<!--more-->

## GitHub

* [Box <3 Open Source](http://opensource.box.com/). Our open source projects represent the best of Box. They are all hosted on GitHub. We hope you'll find them helpful and we invite you to contribute.
* [Avow CI](https://github.com/Fluidbyte/avow-ci) is a simple yet powerful open-source CI system for individual developers, small teams and dev shops, specifically designed for JavaScript projects.

## Startups

* [Red Pen](https://redpen.io) is the fastest feedback tool for visual teams.

## Twitter

<blockquote class="twitter-tweet"><p>BREAKING: NSA said to have used Heartbleed bug to gather intelligence for two years, reports Bloomberg. <a href="https://t.co/wbHhucX7Pq">https://t.co/wbHhucX7Pq</a></p>&mdash; EFF (@EFF) <a href="https://twitter.com/EFF/statuses/454699447797026816">April 11, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Talk to me, Twitter. <a href="http://t.co/7skFm6Ffhn">pic.twitter.com/7skFm6Ffhn</a></p>&mdash; Robert Downey Jr (@RobertDowneyJr) <a href="https://twitter.com/RobertDowneyJr/statuses/454733271650144256">April 11, 2014</a></blockquote>

[browsenpm]: http://browsenpm.org/package/express
[github]: https://github.com/visionmedia/express]]></content:encoded>
</item><item>
  <wp:post_id>73</wp:post_id>
  <title><![CDATA[Comparing Node.js Promises, Try/Catch, Angular Zone.js and yes, Zone]]></title>
  <link>http://npmawesome.com/2014-04-16-promises-trycatch-zones/</link>
  <pubDate>Wed Apr 16 2014 10:01:54 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-16-promises-trycatch-zones/</guid>
  <description>Handling errors in asynchronous flow is pretty straightforward and easy. Handling errors in asynchronous flow in a clean and easy to follow manner - not so much.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-16 10:01:54</wp:post_date>
  <wp:post_date_gmt>2014-04-16 17:01:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>promises-trycatch-zones</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Handling errors in asynchronous flow is pretty straightforward and easy. Handling errors in asynchronous flow in a clean and easy to follow manner - not so much.]]></wp:meta_value>
  </wp:postmeta>  <content:encoded><![CDATA[[partner strongloop]

# Handling errors in async flow

In the [previous article][1] we've talked about managing async flow and escaping the [callback hell][2].

## The problem

Handling errors in asynchronous flow is pretty straightforward and easy. Handling errors in asynchronous flow in a clean and easy to follow manner - not so much.

Lets look at the following code:

```javascript
function updateDependencies(packageName, done) {
  findPackage(packageName, function(err, content) {
    if (err) {
      done(err);
    }
    else {
      try {
        package = JSON.parse(content);
      }
      catch (e) {
        return done(e);
      }

      findDependencies(package, function(err, dependencies)) {
        if (err) {
          done(err);
        }
        else {
          processDependencies(dependencies, function(err) {
            if (err) {
              done(err);
            }
            else {
              done(null, dependencies);
            }
          });
        }
      });
    }
  });
}
```

We are covering all possible failure cases here using combination of `try/catch` and callback error handling, but boy do we repeat ourselves over and over again. Lets try and rewrite this!

<!--more-->

## Error handling using try/catch

```javascript
function updateDependencies(packageName, done) {
  try {
    findPackage(packageName, function(err, content) {
      if (err) throw err;

      findDependencies(JSON.parse(content), function(err, dependencies)) {
        if (err) throw err;

        processDependencies(dependencies, function(err) {
          if (err) throw err;

          done(null, dependencies);
        });
      });
    });
  } catch (e) {
    done(e);
  }
}
```

Nice! That's much better. However, if we run this now, no errors will be caught. What's going on here?

`try/catch` idiom works very well when you have fully synchronous code, but asynchronous operations render it useless.

The outer `try/catch` block will never catch anything because `findPackage` is asynchronous. The function will begin its course while the outer stack runs through and gets to the last line without any errors.

If an error occurs at some point in the future inside asynchronous `findPackage` - **nothing will be caught**.

<img src="http://npmawesome.com/wp-content/uploads/2014/04/catch-fail.gif"/>

Not useful.

## Error handling using promises

In the [previous article][1] we've talked about managing asynchronous flow and escaping the [callback hell][2] with promises. Lets put this promises to work here and rewrite this function.

For the sake of moving forward quicker lets assume we are using [Bluebird][3] promises library and that all our APIs now return promises instead of taking callbacks:

```javascript
function updateDependencies(packageName) {
  return findPackage(packageName)
    .then(JSON.parse)
    .then(findDependencies)
    .then(processDependencies)
    .then(res.send)
    ;
}
```

Oh wow, that is so much nicer! Right? Right!

But Alex, "we've lost our error handling", you might say. That's right, we don't need to do anything special here to propagate error because we return a promise and there's built in support for error flow. Lets see how error handling might look like with promises:

```javascript
button.addEventListener("click", function() {
  updateDependencies("packageName")
    .then(function(dependencies) {
      output.innerHTML = dependencies.join("\n");
    })
    .catch(function(err) {
      output.innerHTML = "There was an error";
    });
});
```

Very slick, I'm a fan!

## Error using Zones

Handling rejected promises works really well when we are in full control of the flow. But what happens if some third-party code throws an error during an asynchronous operation? Lets look at another example:

```javascript
function thirdPartyFunction() {
  function fakeXHR() {
    throw new Error("Invalid dependencies");
  }

  setTimeout(fakeXHR, 100);
}

function main() {
  button.on("click", function onClick() {
    thirdPartyFunction();
  });
}

main();
```

In this case, we wouldn't have a chance to catch and process the error. Generally, the only recourse here is using half baked `window.onerror` that doesn't give you any stack information at all. At least you can log something, right? Not that there's much to log:

```javascript
Uncaught Error: Invalid dependencies
    fakeXHR
```

Up until recently that was pretty much all we had. However, this january [Brian Ford][4] of the [angular.js][5] fame has released [Zone.js][6] which aims to help tackle this.

Basically, [Zone.js][6] **overrides all asynchronous functions in the browser** with custom implementations which allows it to keep track of the context. Dangerous? Yes! But as we say in Soviet Russia, "he who doesn't risk never gets to drink champagne" (or in English "nothing ventured, nothing gained").

Anyways, lets look at how this works. Assuming you have included `zones.js` and `long-stack-trace-zone.js` as per the docs, we just change `main()` call to:

```javascript
zone.fork(Zone.longStackTraceZone).run(main);
```

Refresh, click the button, and now our stack looks like this:

```javascript
Error: Invalid dependencies
    at fakeXHR (script.js:7:11)
    at Zone.run (zones.js:41:19)
    at zoneBoundFn (zones.js:27:19)
--- Tue Mar 25 2014 21:20:32 GMT-0700 (PDT) - 106ms ago
Error
    at Function.getStacktraceWithUncaughtError (long-stack-trace-zone.js:24:32)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:70:43)
    at Zone.bind (zones.js:25:21)
    at zone.(anonymous function) (zones.js:61:27)
    at marker (zones.js:66:25)
    at thirdPartyFunction (script.js:10:3)
    at HTMLButtonElement.onClick (script.js:15:5)
    at HTMLButtonElement.x.event.dispatch (jquery.js:5:10006)
    at HTMLButtonElement.y.handle (jquery.js:5:6789)
    at Zone.run (zones.js:41:19)
--- Tue Mar 25 2014 21:20:32 GMT-0700 (PDT) - 1064ms ago
Error
    at getStacktraceWithUncaughtError (long-stack-trace-zone.js:24:32)
    at Function.Zone.getStacktrace (long-stack-trace-zone.js:37:15)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:70:43)
    at Zone.bind (zones.js:25:21)
    at HTMLButtonElement.obj.addEventListener (zones.js:132:37)
    at Object.x.event.add (jquery.js:5:7262)
    at HTMLButtonElement.<anonymous> (jquery.js:5:14336)
    at Function.x.extend.each (jquery.js:4:4575)
    at x.fn.x.each (jquery.js:4:1626)
    at x.fn.extend.on (jquery.js:5:14312)
```

What the what?? Cool! We can now see that the relevant code path started in our `onClick` method and went into `thirdPartyFunction`.

The cool part is, since [Zone.js][6] overrides browser methods, it doesn't matter what libraries you use. It just works.

## Another async flow control project called Zones?

Yep, StrongLoop’s [Bert Belder][10] has been working on a similar idea called “[Zone][11]“ for a few months now. (Not to be confused with the Angular [Zone.js][6] project we've just been discussing, which shares the same name and some technical characteristics. Yeah, it’s a little confusing, but we are actively working with [Brian Ford][12] on how to potentially bring together these two projects for the mutual benefit of the JavaScript and Node communities. Stay tuned!)

## Why a Node-specific Zones project?

Currently, there are a couple of problems that make it really hard to deal with asynchronous control flow in Node that Zones looks to address. Specifically:

* Stack traces are useless when an asynchronous function fails.
* Asynchronous functions are hard to compose into more high-level APIs. Imagine implementing a simple asynchronous API like bar(arg1, arg2, cb) where cb is the error-first callback that the user of the API specifies. To implement this correctly you must take care:
  * to always call the callback
  * don’t call the callback more than once
  * don’t synchronously throw and also call the callback
  * don’t call the callback synchronously
* It is difficult to handle errors that are raised asynchronously. Typically node will crash. If the uses chooses to ignore the error, resources may leak. Zones should make it easy to handle errors and to avoid resource leaks.
* Sometimes there is a need to associate user data to an asynchronous flow. There is currently no way to do this.

Want to learn more about Zones? Stay tuned for more information in the coming weeks. Follow us on [Twitter][8] or subscribe to our [newsletter][9] to make sure you don’t miss the announcements.

## What's next?

* Watch [Brian's presentation][7] from ngconf 2014, it's pretty cool!
* Add [Zone.js][6] to your application.
* Profit!

<img src="http://npmawesome.com/wp-content/uploads/2014/04/party.gif"/>

[1]: http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/
[2]: http://callbackhell.com/
[3]: https://github.com/petkaantonov/bluebird
[4]: https://github.com/btford
[5]: http://angularjs.org
[6]: https://github.com/btford/zone.js/
[7]: http://www.youtube.com/watch?v=3IqtmUscE_U
[8]: https://twitter.com/StrongLoop
[9]: http://strongloop.com/newsletter-registration/
[10]: https://github.com/piscisaureus
[11]: https://www.npmjs.org/package/zone
[12]: https://github.com/btford]]></content:encoded>
</item><item>
  <title>catch-fail</title>
  <wp:post_parent>73</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/promises-trycatch-zones/catch-fail.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-16 10:01:54</wp:post_date>
  <wp:post_date_gmt>2014-04-16 17:01:54</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>party</title>
  <wp:post_parent>73</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/promises-trycatch-zones/party.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-16 10:01:54</wp:post_date>
  <wp:post_date_gmt>2014-04-16 17:01:54</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>74</wp:post_id>
  <title><![CDATA[Links for Apr 17, 2014]]></title>
  <link>http://npmawesome.com/2014-04-17-links/</link>
  <pubDate>Thu Apr 17 2014 20:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-17-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-17 20:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-18 03:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## Articles & Slides

* [How Burrowing Owls Lead To Vomiting Anarchists (Or SF’s Housing Crisis Explained)](http://techcrunch.com/2014/04/14/sf-housing/)

  > Homeowners have a strong economic incentive to restrict supply because it supports price appreciation of their own homes.
  > …
  > Then the rent-controlled tenants care far more about eviction protections than increasing supply. That’s because their most vulnerable constituents are paying rents that are so far below market-rate, that only an ungodly amount of construction could possibly help them. Plus, that construction wouldn’t happen fast enough — especially for elderly tenants.
  >
  > So we’re looking at as much as 80 percent of the city that isn’t naturally oriented to add to the housing stock.

* [Ubuntu 14.04 LTS: the cloud platform of choice](http://insights.ubuntu.com/news/ubuntu-14-04-lts-the-cloud-platform-of-choice/)

  > Canonical today announces Ubuntu 14.04 LTS will be released on 17th April 2014, bringing a new level of reliability, performance and interoperability to cloud and scale out environments with support and maintenance for five years.

* [Cracking Cloudflare's heartbleed challenge](https://blog.indutny.com/9.heartbleed)

  > … it won't produce any result immediately, it took me 3 hours and a certain amount of luck to obtain the key in a Cloudflare's challenge.

* [Introduction to A*](http://theory.stanford.edu/~amitp/GameProgramming/AStarComparison.html)

  > Movement for a single object seems easy. Pathfinding is complex.

* [12 Web Application Frameworks for Node.js](http://codecondo.com/10-web-application-frameworks-for-node-js/)
* [Tails](https://tails.boum.org/) is a live operating system, that you can start on almost any computer from a DVD, USB stick, or SD card. It aims at preserving your privacy and anonymity.

<!--more-->

## Twitter

<blockquote class="twitter-tweet"><p>Hello. My name is Ethan Welborn, and I am a <a href="https://twitter.com/gulpjs">@gulpjs</a>-aholic. Please contact me if you can provide assistance... or badass tasks. <a href="https://twitter.com/search?q=%23wtfwow&amp;src=hash">#wtfwow</a></p>&mdash; Ethan Welborn (@WelbornEthan) <a href="https://twitter.com/WelbornEthan/statuses/456171513905831937">April 15, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Our <a href="https://twitter.com/gulpjs">@gulpjs</a> webapp generator just got another round of updates: <a href="https://t.co/soUQV3bnNl">https://t.co/soUQV3bnNl</a>. <a href="http://t.co/S1nduFgVGJ">pic.twitter.com/S1nduFgVGJ</a> via <a href="https://twitter.com/yeoman">@yeoman</a></p>&mdash; Siancore (@siancore) <a href="https://twitter.com/siancore/statuses/456463584835665920">April 16, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Comparing async control flow tools: <a href="https://twitter.com/search?q=%23nodejs&amp;src=hash">#nodejs</a> Promises, Try/Catch and <a href="https://twitter.com/angularjs">@angularjs</a> Zone.js by <a href="https://twitter.com/alexgorbatchev">@alexgorbatchev</a> - <a href="http://t.co/5BrNEisgH7">http://t.co/5BrNEisgH7</a></p>&mdash; StrongLoop (@StrongLoop) <a href="https://twitter.com/StrongLoop/statuses/456453560532606976">April 16, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <wp:post_id>75</wp:post_id>
  <title><![CDATA[Links for Apr 18, 2014]]></title>
  <link>http://npmawesome.com/2014-04-18-links/</link>
  <pubDate>Fri Apr 18 2014 10:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-18-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-18 10:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-18 17:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" width="150" align="right"/>

## Articles & Slides

* [Lens Blur in the new Google Camera app](http://googleresearch.blogspot.co.uk/2014/04/lens-blur-in-new-google-camera-app.html)

  > Having computed the depth map, we can re-render the photo, blurring pixels by differing amounts depending on the pixel’s depth, aperture and location relative to the focal plane. The focal plane determines which pixels to blur, with the amount of blur increasing proportionally with the distance of each pixel to that focal plane. This is all achieved by simulating a physical lens using the thin lens approximation.

* [Controlling an Arduino with NodeJS and Johnny-Five](http://www.sitepoint.com/controlling-arduino-nodejs-johnny-five/)

  > This video aims to help those new to Arduinos and NodeJS understand the basics of getting started. I’ll provide an overview of what you’ll need to do in order to get a Node application speaking to an Arduino using the Johnny-Five JavaScript framework. By the end we will have used the power of JavaScript to turn an LED light on and off!

<!--more-->

## Github

* [AngularHotkeys.js](http://chieffancypants.github.io/angular-hotkeys/) - configuration-centric keyboard shortcuts for your angular apps.
* [disqusHere](https://github.com/lukasz-zak/disqus-here) - Angular directive for embeding Disqus comments on your site.
* [Flow.js](https://github.com/flowjs/ng-flow) is a JavaScript library providing multiple simultaneous, stable and resumable uploads via the HTML5 File API. Library does not require third party dependencies.
* [Untrusted —or— the Continuing Adventures of Dr. Eval](https://github.com/AlexNisnevich/untrusted) is an exciting Meta-Javascript Adventure Game wherein you guide the dashing, steadfast Dr. Eval through a mysterious MACHINE CONTINUUM, wherein, using only his trusty computer and the TURING-COMPLETE power of Javascript, he must literally ALTER HIS REALITY in order to find his freedom! You must literally edit and re-execute the very Javascript running the game in your browser to save Dr. Eval from this dark and confusing reality!

## Unix

* `openssl rand -base64 32` to generate a “random” string.

## Misc

* [Arrows HTML Code and Unicode Hexadecimal](http://character-code.com/arrows-html-codes.php) ↑↑↓↓←→←→

## Twitter

<blockquote class="twitter-tweet"><p>Can’t wait until gulp 4 for non-dependent task support? Try run-sequence! <a href="https://t.co/PPyJnjA4Jz">https://t.co/PPyJnjA4Jz</a></p>&mdash; gulp (@gulpjs) <a href="https://twitter.com/gulpjs/statuses/457120895102754816">April 18, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>75</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-18 10:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-18 17:00:00</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>76</wp:post_id>
  <title><![CDATA[terminal-menu]]></title>
  <link>http://npmawesome.com/2014-04-18-terminal-menu/</link>
  <pubDate>Fri Apr 18 2014 09:52:03 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-18-terminal-menu/</guid>
  <description>Multiple choice user prompt for CLI tools using terminal-menu.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-18 09:52:03</wp:post_date>
  <wp:post_date_gmt>2014-04-18 16:52:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>terminal-menu</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Multiple choice user prompt for CLI tools using terminal-menu.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[terminal-menu]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d43]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[substack/terminal-menu]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d44]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d45]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

Lets continue building out awesome CLI (command line interface) tool. Previously we have discussed how to [take in command line arguments][1], [output tabular data][2] and [display progress of long running tasks][3].

[author photo]
Prompting a user with options and asking to pick one is a fairly common scenario. Most of the time you get to read the options and press associated key. That works, but we are human and like pretty interfaces. Same thing can be achieved with a common menu interface. This is where [module full] by [author] comes in.

<!--more-->

```bash
[module install]
```

## Features

There are a few options available to customize the menu such as:

* Background color
* Foreground color
* Position
* Width
* Padding

## Usage

```javascript
var terminalMenu = require('terminal-menu');

var menu = terminalMenu({
  width: 60,
  x: 4,
  y: 2
});

menu.reset();
menu.write('Recently on our blog\n');
menu.write('-------------------------\n');

menu.add('How to setup a multi-user Ghost blog');
menu.add('Patched PaaS Vulnerability');
menu.add('npmawesome: Progress reporting in CLI applications');
menu.add('Improved SSL experience for private npm');
menu.add('npmawesome: Table formatting in the terminal with...');

menu.on('select', function (label, index) {
  menu.close();
  console.log('You selected:');
  console.log(index, label);
});

menu.createStream().pipe(process.stdout);
```

<div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="http://npmawesome.com/wp-content/uploads/2014/04/terminal-menu01.gif"/></div>

Check out interactive example on [runnable](http://runnable.com/U0YDx3Bx9a1ntoDb/terminal-menu-example-for-npm-awesome-nodejitsu-node-js-and-cli).

## Other modules to checkout

Generally there is a list of alternative modules here, but as strange as it sounds, I couldn't find any. If you know of one, please drop us a line.

## Closing thoughts

Over the last couple of CLI related posts we've progressively been improving user experience of our terminal application. I feel that you can never spend too much time doing this, but you can definetely spend too little. I love little things that feel good. [module] was created for [stream-adventure], an educational terminal based stream adventure game for Node.js and [stream-adventure] in turn inspired [browser based version](http://nodestreams.com/) written by John Resig of the jQuery fame. Both are pretty cool and fun!

<blockquote class="twitter-tweet" lang="en"><p>everybody going to nodeconf should make sure to npm install -g stream-adventure</p>&mdash; James Halliday (@substack) <a href="https://twitter.com/substack/statuses/350097531730006017">June 27, 2013</a></blockquote>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/maxogden">@maxogden</a> <a href="https://twitter.com/substack">@substack</a> Would love your feedback on <a href="http://t.co/PX0oG8CtB7">http://t.co/PX0oG8CtB7</a> was inspired by stream adventure! More info: <a href="http://t.co/c1eQGB53Lm">http://t.co/c1eQGB53Lm</a></p>&mdash; John Resig (@jeresig) <a href="https://twitter.com/jeresig/statuses/401419183230951424">November 15, 2013</a></blockquote>

[1]: /npmawesome-parsing-command-line-options-with-yargs/
[2]: /npmawesome-table-formatting-in-the-terminal-with-cli-tables/
[3]: /npmawesome-progress-reporting-in-cli-applications/
[stream-adventure]: https://github.com/substack/stream-adventure]]></content:encoded>
</item><item>
  <title>terminal-menu01</title>
  <wp:post_parent>76</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/terminal-menu/terminal-menu01.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-18 09:52:03</wp:post_date>
  <wp:post_date_gmt>2014-04-18 16:52:03</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>77</wp:post_id>
  <title><![CDATA[Links for Apr 19, 2014]]></title>
  <link>http://npmawesome.com/2014-04-19-links/</link>
  <pubDate>Sat Apr 19 2014 10:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-19-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-19 10:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-19 17:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles & Slides

* [Build a RESTful API Using Node and Express 4](http://scotch.io/tutorials/javascript/build-a-restful-api-using-node-and-express-4)

  > With the release of Express 4.0 just a few days ago, lots of our Node apps will have some changes in how they handle routing. With the changes in the Express Router, we have more flexibility in how we can define the routes for our applications.

* [Controlling an Arduino with NodeJS and Johnny-Five](http://www.sitepoint.com/controlling-arduino-nodejs-johnny-five/)

  > Firmata and Johnny-Five make it a lot easier for JavaScript developers to get more involved and develop applications that can interact with, respond to and control Arduino powered technology.

* [Brunch - A build system without the Grunt-work](http://alxhill.com/blog/articles/brunch-coffeescript-angular/)

  > Brunch compiles, concats and (optionally) minifies your scripts and styles. It can also package JavaScript files into AMDor CommonJS modules. Brunch automatically applies plugins in the correct order to the right files - so with the right plugins, a .coffee file would be converted into a .js file and then minified, with no explicit setup necessary.

<!--more-->

* [EmberConf 2014 HTMLBars: The Next-Generation of Templating in Ember.js by Erik Bryn and Kris Selden](https://www.youtube.com/watch?v=HY4d-0Kzp68)

  > <img src="https://i1.ytimg.com/vi/HY4d-0Kzp68/maxresdefault.jpg" style="width: 400px" />

* [Pyro Board: 2D Rubens' Tube!](https://www.youtube.com/watch?v=2awbKQ2DLRE#t=211)

  > <img src="https://i1.ytimg.com/vi/2awbKQ2DLRE/maxresdefault.jpg" style="width: 400px" />

* [Completely Surreal Photos Of America’s Abandoned Malls](http://www.buzzfeed.com/mjs538/completely-surreal-pictures-of-americas-abandoned-malls) and a [video](https://www.youtube.com/watch?v=ZAo2ue6s5Bc)

  > <img src="http://s3-ec.buzzfed.com/static/2014-04/enhanced/webdr06/2/10/enhanced-29364-1396450428-10.jpg" style="width: 400px" />

* [Pizza Cake](http://www.buzzfeed.com/ryanhatesthis/all-hail-the-mighty-pizza-cake)

  > <img src="http://s3-ec.buzzfed.com/static/2014-04/enhanced/webdr03/18/12/enhanced-buzz-wide-14629-1397837404-8.jpg" style="width: 400px" />

## Github

* [SoundCleod](https://github.com/salomvary/soundcleod) is a Mac OS X application which brings SoundCloud to the desktop without using a browser.

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>A NodeJS Perspective on What’s New in MongoDB 2.6, Part I: Text Search <a href="http://t.co/RCjrLHd2u0">http://t.co/RCjrLHd2u0</a></p>&mdash; MongoDB (@MongoDB) <a href="https://twitter.com/MongoDB/statuses/457562812223852545">April 19, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>omg shut up and take my money! <a href="https://t.co/UCVqDsakuJ">https://t.co/UCVqDsakuJ</a></p>&mdash; Alex Gorbatchev (@alexgorbatchev) <a href="https://twitter.com/alexgorbatchev/statuses/457219682164940800">April 18, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>77</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-19 10:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-19 17:00:00</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>78</wp:post_id>
  <title><![CDATA[Links for Apr 23, 2014]]></title>
  <link>http://npmawesome.com/2014-04-23-links/</link>
  <pubDate>Wed Apr 23 2014 10:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-23-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-23 10:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-23 17:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## André König

[author photo]
I'm happy to welcome [André König](https://github.com/akoenig) to npmawesome! Very excited to publish his first post about [platform.js](http://npmawesome.com/posts/2014-04-23-platform-js)! Coming from Bremen, Germany, André is very active on [NPM](https://www.npmjs.org/browse/author/akoenig) and better known for [angular-deckgrid](https://github.com/akoenig/angular-deckgrid), [imacss](https://github.com/akoenig/imacss) as well as a whole bunch of gulp.js modules. Woot!

## Articles & Slides

* [Tim Caswell on history of Node.js callbacks](https://groups.google.com/forum/#!msg/nodejs/J59L1AR1lSs/hQfRPDf1Wn0J)

  > Shortly after node was made, the concept of the event emitter was added.  We didn't have the current callback-last style, but had a convention that non-blocking functions would return a special emitter known as a "Promise".

* [Faster AngularJS Rendering (AngularJS and ReactJS)](http://www.williambrownstreet.net/blog/2014/04/faster-angularjs-rendering-angularjs-and-reactjs/)

  > Have you used AngularJs and ran into some performance problems? Using ReactJs rendering becomes much faster. A small examples explains how to use ReactJs for rendering in AngularJs and a comparison is made between native rendering and rendering using ReactJs.

<!--more-->

* [Bored People Quit](http://randsinrepose.com/archives/bored-people-quit/)

  > You call on the motivation and retention police because you believe they can perform the legendary “diving save”.

* [Build Interactive Voicemail for Sports Fans with Twilio, MongoDB, Angular, and node.js](https://www.twilio.com/blog/2014/04/build-interactive-voicemail-for-sports-fans-with-twilio-mongodb-angular-and-node-js-part-one.html)

  > In this tutorial, we’re going to show how you can build an interactive voicemail (and text message) box to support a marketing campaign around a brand or celebrity.

## Github

* [Jint](https://github.com/sebastienros/jint) is a Javascript interpreter for .NET. Jint doesn't compile Javascript to .NET bytecode and in this sense might be best suited for projects requiring to run relatively small scripts faster, or which need to run on different platforms.

## Twitter

<blockquote class="twitter-tweet"><p>~70,000% Growth in Node.js Jobs since January 2011. <a href="http://t.co/HS2mTrl2ie">pic.twitter.com/HS2mTrl2ie</a></p>&mdash; Joe McCann (@joemccann) <a href="https://twitter.com/joemccann/statuses/456489213803122688">April 16, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Why isn&#39;t there a bar that plays Star Trek: Deep Space 9 and has dozens of sleepy cats to pet. I&#39;d hang out at that bar.</p>&mdash; Max Temkin (@MaxTemkin) <a href="https://twitter.com/MaxTemkin/statuses/458328715491950592">April 21, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <wp:post_id>79</wp:post_id>
  <title><![CDATA[platform.js]]></title>
  <link>http://npmawesome.com/2014-04-23-platform-js/</link>
  <pubDate>Wed Apr 23 2014 17:30:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[akoenig]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-23-platform-js/</guid>
  <description>A platform detection library that works on nearly all JavaScript platforms.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-23 17:30:00</wp:post_date>
  <wp:post_date_gmt>2014-04-24 00:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>platform-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-akoenig"><![CDATA[akoenig]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[A platform detection library that works on nearly all JavaScript platforms.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[platform]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d46]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[bestiejs/platform.js]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d47]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d48]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[platform.js]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d49]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
[author photo]
There are plenty of different runtime environments in JavaScript-land. Whereas this is a good thing there are also situations where the fragmentation is hindrance. Situations in which your application has to gather information about the platform it is running on. This is where [module] by [John-David Dalton](https://github.com/jdalton) and [Mathias Bynens](https://github.com/mathiasbynens) comes to the game.

<!--more-->

Let's dive into this module with an example. Assume that you have to know if your application runs on [Node.js](http://nodejs.org) or [Rhino](https://developer.mozilla.org/de/docs/Rhino). This could be _easily_ done by checking the type of the `global` variable. In Node.js it is an object whereas Rhino provides a function. Boom! There you go. You can formulate a condition now! But what if you also need to know if your application is running in a browser? Well, game over. Too complicated. The good news is you don't have to do such things anymore.

[platform.js][browsenpm] (Github: [bestiejs/platform.js][github], License: MIT) is a platform detection library which aim is to work on all platforms. It squeeze as much information out of the underlying JavaScript environment as it could and wraps them in a really nice informal abstraction. You are able to grab data like:

- The name of the platform (e.g. Google Chrome, Node.js, etc.)
- The version of the platform
- The rendering engine (of the browser; e.g. Gecko, Trident, etc.)
- The manufacturer of the product (e.g. Apple)
- The name of the product (e.g. iPhone, Kindle, etc.)
- The name of the operating system (e.g. iOS 7.0, Mac OS X 10.7.2, etc.)
- The architecture the operating system is build for (e.g. ia32, etc.)

## Installation

The installation is easy because your package manager flavor is covered. John-David and Mathias provide module descriptors for [Bower](http://bower.io/), [component](https://github.com/component/component) and NPM:

```bash
[module install]
```

## Usage

The API for using [module] is consistent. What differs is the module loading procedure. Consider the [README](https://github.com/bestiejs/platform.js/blob/master/README.md) for a brief explanation about how to use the library with an AMD loader for instance. The following usage example refers to Node.js:

```javascript
'use strict';

var platform = require('platform');

console.log(platform.name);  // e.g. Node.js
console.log(platform.version); // e.g. 0.10.26
console.log(platform.os.architecture); // e.g. 32
console.log(platform.os.family); // e.g. Linux
console.log(platform.description); // e.g. Node.js 0.10.26 on Linux

```

The library provides also a function with which you are able to parse an [user agent string](http://www.useragentstring.com/):

```javascript
'use strict';

var platform = require('platform');

var ua = 'Mozilla/5.0 (X11; Linux i686; rv:30.0) Gecko/20100101 Firefox/30.0';

var browser = platform.parse(ua);

console.log('Result from parsing the user agent string: %s \n', ua);

console.log(browser.name); // Firefox
console.log(browser.description); // Firefox 30.0 on Linux i686
console.log(browser.version); // 30.0
console.log(browser.layout); // Gecko
console.log(browser.os.family); // Linux i686

```

If you curious to see how it performs in a browser environment, check out this [codepen](http://cdpn.io/tjcEd).

## Use cases

I'm pretty sure that you have several use cases in mind where you could use [module], but one warning: Don't see it as a replacement of feature detection libraries. True to the motto: _If it is a Gecko-based rendering engine (because browsers with this engine have all the shiny new features) then I could use `navigator.getUserMedia()`._ Never ever make such assumptions. Look at it more in a way to

- display a tailor-made UI.
- collect statistical data about the devices of your users.
- lazy import own platform-specific modules (e.g. Node.js modules).

## Closing Thoughts

[module] is a powerful gift when it comes to determining exactly in which environment your application is running. That means, we do not have to write "if-else-if-else-if" statements anymore, folks. We have a rock-solid foundation now!

[browsenpm]: http://browsenpm.org/package/platformjs
[github]: https://github.com/bestiejs/platform]]></content:encoded>
</item><item>
  <wp:post_id>80</wp:post_id>
  <title><![CDATA[angular-injector]]></title>
  <link>http://npmawesome.com/2014-04-28-angular-injector/</link>
  <pubDate>Mon Apr 28 2014 09:24:35 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-28-angular-injector/</guid>
  <description>Solving minification problem with angular.js dependency injection.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-28 09:24:35</wp:post_date>
  <wp:post_date_gmt>2014-04-28 16:24:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>angular-injector</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Solving minification problem with angular.js dependency injection.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[angular-injector]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d4a]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[alexgorbatchev/angular-injector]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d4b]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d4c]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[<img class="hide-on-mobile" src="http://npmawesome.com/wp-content/uploads/2014/04/alexgorbatchev.jpg" width="150" align="right" hspace="10"/>
[module full] module by [author] (me) is meant to address minification problem with [angular.js](https://www.angularjs.org/) dependency injection that [ngmin](https://www.npmjs.org/package/ngmin) does not - work with any dependency injection syntax.

<!--more-->

```bash
[module install]
```

## Features

[module] works exactly the same way as [ngmin] meaning that it modifies the source during build time. Unlike [ngmin] however, it's less dependent on the syntax. In fact, any function wrapped in a `ng(func)` call will be escaped with `['dep1', 'dep2', func]` injector style.

## Usage

Write your angular functions like so:

```javascript
someModule.factory('greeter', ng(function($window) {
  // ...
}));
```

Then run them through angular-injector and it will become:

```javascript
someModule.factory('greeter', ['$window', function($window) {
  // ...
}]);
```

You don't need to declare ng function anywhere and it could be customized to anything. If you wanted to get fancy, use something like `ƒ` or `∑` to never have any naming conflicts. Or even an emoji if you feeling wild.

This syntax works particularly well in CoffeeScript and is literally 2-3 extra characters:

```javascript
someModule.factory 'greeter', ng ($window) ->
  # ...
```

## Build Plugins

Of course, I wouldn't just write this module without supporting [gulp.js](http://gulpjs.com/) and [grunt.js](http://gruntjs.com/).

* [module full name="gulp-angular-injector" repo="alexgorbatchev/gulp-angular-injector" license="MIT"]
* [module full name="grunt-angular-injector" repo="alexgorbatchev/grunt-angular-injector" license="MIT"]

## Closing thoughts

The biggest downside of this method is basically remembering to add the `ng()` wrapper. I found that after about half a day that becomes a habit and not an issue. Check out the plugins and let me know what you think!

[ngmin]: https://www.npmjs.org/package/ngmin]]></content:encoded>
</item><item>
  <title>alexgorbatchev</title>
  <wp:post_parent>80</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/../authors/alexgorbatchev.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-28 09:24:35</wp:post_date>
  <wp:post_date_gmt>2014-04-28 16:24:35</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>81</wp:post_id>
  <title><![CDATA[Comparing Express, Restify, hapi and LoopBack for building RESTful APIs]]></title>
  <link>http://npmawesome.com/2014-04-29-compare-express-restify-hapi-loopback/</link>
  <pubDate>Tue Apr 29 2014 10:01:54 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-29-compare-express-restify-hapi-loopback/</guid>
  <description>Comparing Express, Restify, hapi and LoopBack for building RESTful APIs</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-29 10:01:54</wp:post_date>
  <wp:post_date_gmt>2014-04-29 17:01:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>compare-express-restify-hapi-loopback</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Comparing Express, Restify, hapi and LoopBack for building RESTful APIs]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[hapi]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d4d]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[spumko/hapi]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d4e]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[BSD 4-Clause]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d4f]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner strongloop]

If you are writing a Node.js application, chances are you going to have some kind of API end points to be consumed by your frond end or expose data for others to take in. This is where [RESTful APIs](http://en.wikipedia.org/wiki/Representational_state_transfer) come in. And now you have a dilemma - what tools to use and what approach to take? So many choices...

<img src="http://npmawesome.com/wp-content/uploads/2014/04/confused.gif" class="hide-on-mobile"/>

Thanks to the incredibly active Node.js community, the amount of results for a ["rest" search on NPM](https://www.npmjs.org/search?q=rest) is pretty overwhelming. Everyone has their own implementation and approach, but few seem to agree on a common way to go about implementing RESTful APIs in Node.js.

<!--more-->

## RESTful APIs with Express

The most common approach is to just roll your own end points with [Express]. This practice allows you to get started quickly, but it becomes burdensome in the long run. Lets look at pros and cons:

### Example

Here's what a typical end point might look like in [Express] using the latest 4.x `Router` feature:

```
var express = require('express');
var Item = require('models').Item;
var app = express();
var itemRoute = express.Router();

itemRoute.param('itemId', function(req, res, next, id) {
  Item.findById(req.params.itemId, function(err, item) {
```javascript
req.item = item;
next();
  });
});
```

itemRoute.route('/:itemId')
  .get(function(req, res, next) {
```javascript
res.json(req.item);
  })
  .put(function(req, res, next) {
req.item.set(req.body);
req.item.save(function(err, item) {
  res.json(item);
});
  })
  .post(function(req, res, next) {
var item = new Item(req.body);
item.save(function(err, item) {
  res.json(item);
});
  })
  .delete(function(req, res, next) {
req.item.remove(function(err) {
  res.json({});
});
  })
  ;
```

app.use('/api/items', itemRoute);
app.listen(8080);
```

### Pros

1. Little learning curve, [Express] is nearly a standard for Node.js web application
1. Fully customizable

### Cons

1. All end points need to be created manually, you end up doing a lot of the same code (or worse, start rolling your own libraries after a while)
1. Every end point needs to be tested (or at the very least I recommend that you hit the end points with HTTP consumer to make sure they are actually there and don't throw 500s)
1. Refactoring becomes painful because everything needs to be updated everywhere
1. Doesn't come with anything "standard", have to figure out your own approach

[Express] is a great starting point, but eventually you will feel the pain of "roll your own" approach.

## RESTful APIs with Restify

[Restify] is a relatively old player in the Node.js API field, very stable and being actively developed. It is built specifically to enable you to build correct REST web services and intentionally borrows heavily from [Express].

### Example

Because [Restify] borrows from [Express], the syntax is nearly identical:

```
var restify = require('restify');
var Item = require('models').Item;
var app = restify.createServer()

app.use(function(req, res, next) {
  if (req.params.itemId) {
```javascript
Item.findById(req.params.itemId, function(err, item) {
  req.item = item;
  next();
});
  }
  else {
next();
  }
});
```

app.get('/api/items/:itemId', function(req, res, next) {
  res.send(200, req.item);
});

app.put('/api/items/:itemId', function(req, res, next) {
  req.item.set(req.body);
  req.item.save(function(err, item) {
```javascript
res.send(204, item);
  });
});
```

app.post('/api/items/:itemId', function(req, res, next) {
  var item = new Item(req.body);
  item.save(function(err, item) {
```javascript
res.send(201, item);
  });
});
```

app.delete('/api/items/:itemId', function(req, res, next) {
  req.item.remove(function(err) {
```javascript
res.send(204, {});
  });
});
```

app.listen(8080);
```

### Pros

* Automatic DTrace support for all your handlers (if you're running on a platform that supports DTrace)
* Doesn't have unnecessary functionality like templating and rendering
* Built in throttling
* Built in [SPDY](http://en.wikipedia.org/wiki/SPDY) support

### Cons

The cons are all the same with [Restify] as they are with [Express], lots of manual labor.

## RESTful APIs with hapi

[hapi] is a lesser known Node.js framework that is getting momentum thanks to fulltime support of the Walmart Labs team. It takes a somewhat different approach from [Express] and [Restify] by providing significantly more functionality out of the box for building web servers.

### Example

Here's the same example re-written using [hapi]:

```
var Hapi = require('hapi');
var Item = require('models').Item;
var server = Hapi.createServer('0.0.0.0', 8080);

server.ext('onPreHandler', function(req, next) {
  if (req.params.itemId) {
```javascript
Item.findById(req.params.itemId, function(err, item) {
  req.item = item;
  next();
});
  }
  else {
next();
  }
});
```

server.route([
  {
```javascript
path: '/api/items/{itemId}',
method: 'GET',
config: {
  handler: function(req, reply) {
    reply(req.item);
  }
}
  },
  {
path: '/api/items',
method: 'PUT',
config: {
  handler: function(req, reply) {
    req.item.set(req.body);
    req.item.save(function(err, item) {
      reply(item).code(204);
    });
  }
}
  },
  {
path: '/api/items',
method: 'POST',
config: {
  handler: function(req, reply) {
    var item = new Item(req.body);
    item.save(function(err, item) {
      reply(item).code(201);
    });
  }
}
  },
  {
path: '/api/items/{itemId}',
method: 'DELETE',
config: {
  handler: function(req, reply) {
    req.item.remove(function(err) {
      reply({}).code(204);
    });
  }
}
  }
]);
```

server.start();
```

### Pros

1. Very granular control over request handling
1. Detailed API [module full] with support for documentation generation

### Cons

As with [Express] and [Restify], [hapi] gives you great construction blocks, but you are left to your own devices figuring out how to use them.

## What else is there?

[Express], [Restify] and [hapi] are all great starting points, but in the long run it might not be the right choice if you plan on investing heavily into APIs.

## LoopBack

[LoopBack] by [StrongLoop] is a fully featured Node.js backend framework to connect your consumer applications with data. It adopts [convention over configuration](http://en.wikipedia.org/wiki/Convention_over_configuration) mantra popularized by Ruby on Rails.

### Example

```
var loopback = require('loopback');
var Item = require('./models').Item;
var app = module.exports = loopback();

app.model(Item);
app.use('/api', loopback.rest());
app.listen(8080);
```

There's a lot of "magic" happening in the background. But with just 6 lines of code you now have the following end points:

```
DELETE /items/{id}
GET /items
GET /items/count
GET /items/findOne
GET /items/{id}
GET /items/{id}/exists
POST /items
PUT /items
PUT /items/{id}
```

<img src="http://npmawesome.com/wp-content/uploads/2014/04/mind-blowing-nph.gif"/>

To start exploring your own APIs right away, there's a bundled `explorer` module that you can attach to your application:

```
var explorer = require('loopback-explorer');
app.use('/explorer', explorer(app, {basePath: '/api'}));
```

And now opening `http://localhost:8080/explorer` you get this:

<img src="http://npmawesome.com/wp-content/uploads/2014/04/screenshot.png"/>

Seriously cool stuff!

### Pros

1. Very quick RESTful API development
1. Convention over configuration
1. Built in models ready to use
1. RPC support
1. Fully configurable when needed
1. Extensive documentation
1. Fulltime team working on the project
1. Available commercial support

### Cons

1. Learning curve can be pretty steep because there are so many moving parts

## RPC

The [LoopBack] example above is so tiny, I feel bad about it. How about we extend it with a quick RPC endpoint to balance things out?

```
var loopback = require('loopback');
var explorer = require('loopback-explorer');
var remoting = require('strong-remoting');
var Item = require('./models').Item;
var app = module.exports = loopback();
var rpc = remoting.create();

function echo(ping, callback) {
  callback(null, ping);
}

echo.shared = true;
echo.accepts = {arg: 'ping'};
echo.returns = {arg: 'echo'};

rpc.exports.system = {
  echo: echo
};

app.model(Item);
app.use('/api', loopback.rest());
app.use('/explorer', explorer(app, {basePath: '/api'}));
app.use('/rpc', rpc.handler('rest'));
app.listen(8080);
```

And now you can do this:

```
$ curl "http://localhost:8080/rpc/system/echo?ping=hello"
{
  "echo": "hello"
}
```

<img src="http://npmawesome.com/wp-content/uploads/2014/04/thumbs-up-nph.gif"/>

## What's next?

* Install LoopBack with a [simple npm command](http://strongloop.com/get-started/).
* Read [LoopBack documentation](http://docs.strongloop.com/display/DOC/LoopBack).
* Need performance monitoring, profiling and cluster capabilites for your Node apps? Check out [StrongOps](http://strongloop.com/node-js-performance/strongops/).

[Express]: http://expressjs.com
[Restify]: http://mcavage.me/node-restify
[hapi]: http://spumko.github.io/
[LoopBack]: http://strongloop.com/mobile-application-development/loopback/
[StrongLoop]: http://strongloop.com]]></content:encoded>
</item><item>
  <title>confused</title>
  <wp:post_parent>81</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/confused.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-29 10:01:54</wp:post_date>
  <wp:post_date_gmt>2014-04-29 17:01:54</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>mind-blowing-nph</title>
  <wp:post_parent>81</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/mind-blowing-nph.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-29 10:01:54</wp:post_date>
  <wp:post_date_gmt>2014-04-29 17:01:54</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>screenshot</title>
  <wp:post_parent>81</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/screenshot.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-29 10:01:54</wp:post_date>
  <wp:post_date_gmt>2014-04-29 17:01:54</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>thumbs-up-nph</title>
  <wp:post_parent>81</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/thumbs-up-nph.gif</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-29 10:01:54</wp:post_date>
  <wp:post_date_gmt>2014-04-29 17:01:54</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>82</wp:post_id>
  <title><![CDATA[Links for Apr 30, 2014]]></title>
  <link>http://npmawesome.com/2014-04-30-links/</link>
  <pubDate>Wed Apr 30 2014 10:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-30-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-30 10:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-30 17:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles & Slides

* [Handling required parameters in ECMAScript 6](http://www.2ality.com/2014/04/required-parameters-es6.html)
* [A Good User Interface](http://goodui.org/) has high conversion rates and is easy to use. In other words, it's nice to both the business side as well as the people using it.
* [Edge.js](http://tjanczuk.github.io/edge/) - run Node.js and .NET code in-process.
* [How Good an Estimator Are You? Part II](http://blog.codinghorror.com/how-good-an-estimator-are-you-part-ii/)

  > The specific goal of the exercise was to estimate at the 90 percent confidence level. There are 10 questions in the quiz, so if you were truly estimating at a 90 percent confidence level, you would have gotten about 9 answers correct.

* [An introduction to designing CSS transitions using AngularJS](https://speakerdeck.com/jessicaspacekat/an-introduction-to-designing-css-transitions-using-angularjs)

  > …examples of how a UI designer without much JS or AngularJS experience can use some of the features built in to AngularJS (with angular-animate) to help them design interactive components and add CSS transitions.

<!--more-->

* [Continuous Deployment for node.js apps from Bitbucket to Heroku](http://blog.codeship.io/2014/04/29/continuous-deployment-heroku-bitbucket-nodejs.html)

  > How to set up Continuous Integration and Continuous Deployment for a Node.js Application from Bitbucket to Heroku

* [Designing a Vinyl Toy with Joe Ledbetter](http://makezine.com/2014/02/19/designing-a-vinyl-toy-with-joe-ledbetter/)

  > It all starts with an initial idea or concept for a toy. In this case I wanted to base this project on my popular character called Mr. Bunny. Mr. Bunny has been depicted in my paintings since I first began showing in galleries over 10 years ago.

* [Printoo](http://makezine.com/2014/04/22/paper-thin-arduino-enables-diy-dirigible/) is a platform of paper-thin circuit boards and modules. It gives makers an open-source, lightweight, flexible, and modular Arduino-compatible platform to create just about anything you want! What makes Printoo amazingly unique is that it comes with a range of printed electronics modules previously unavailable to the public. These are electronics building "blocks" of the future, only not so rigid.

## Github

* [Depthy](http://depthy.stamina.pl/) extracts depth map and original from photos made with Google Camera's Lens Blur. I think this is the future of product photography (until there’s proper 3D).
* [flowdock-stream](https://www.npmjs.org/package/flowdock-stream) is a node module for streaming [flowdock](https://www.flowdock.com/) flows.

## Chrome

* [Project Naptha](http://projectnaptha.com/) automatically applies state-of-the-art computer vision algorithms on every image you see while browsing the web. The result is a seamless and intuitive experience, where you can highlight as well as copy and paste and even edit and translate the text formerly trapped within an image.

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Breathalyzers for cars? Breathalyzers for Twitter! I’d probably buy one, just to be 100% safe.</p>&mdash; Axel Rauschmayer (@rauschma) <a href="https://twitter.com/rauschma/statuses/459111786382639104">April 23, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>82</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-04-30 10:00:00</wp:post_date>
  <wp:post_date_gmt>2014-04-30 17:00:00</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>83</wp:post_id>
  <title><![CDATA[sentiment]]></title>
  <link>http://npmawesome.com/2014-04-30-sentiment/</link>
  <pubDate>Wed Apr 30 2014 09:24:35 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-04-30-sentiment/</guid>
  <description>AFINN-based sentiment analysis for Node.js.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-04-30 09:24:35</wp:post_date>
  <wp:post_date_gmt>2014-04-30 16:24:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sentiment</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[AFINN-based sentiment analysis for Node.js.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[sentiment]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d50]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[thisandagain/sentiment]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d51]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d52]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

Sentiment analysis is one of those things you don't get to do very often, as cool as it sounds. It's one of those things I always wanted to do but haven't had a reason to yet. The field of natural language is as deep and complex as you want it to be. [Stanford Sentiment Analysis](http://nlp.stanford.edu/sentiment/) is a pretty massive project and nets pretty decent results.

[author photo]
[module full] module by [author] takes a very simple approach to the problem of just counting token words and their preassigned weight. For the most part you can expect pretty average results and it gets completely lost with expressions like "I don't know half of you half as well as I should like, and I like less than half of you half as well as you deserve" (frankly I don't understand what it says either). But the cool thing is - it actually works and you don't need a giant database. [module] can get you started down the path until you feel the need for something more involved.

<!--more-->

```bash
[module install]
```

## Features

[module] uses the [AFINN-111](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist to perform sentiment analysis on arbitrary blocks of input text and provides serveral things:

* Performance
* The ability to append and overwrite word / value pairs from the AFINN wordlist
* A build process that makes updating sentiment to future versions of the AFINN word list trivial

## Usage

Here's a simple example analysing bunch of latest [DHH tweets](https://www.twitter.com/dhh).

```javascript
var
  request = require('request'),
  cheerio = require('cheerio'),
  sentiment = require('sentiment')
  ;

function sentimentToSmiley(sentiment) {
  var score = sentiment.score;

  if(score === 0) { return ':-|' }
  if(score < 0) {
    if(score > -2) { return ':-(' }
    return ':`('
  }

  if(score < 2) { return ':-)' }
  return ':-D'
}

request('https://www.twitter.com/dhh', function(err, response) {
  var $ = cheerio.load(response.body);

  $('.ProfileTweet-text').toArray().forEach(function(item) {
    var text = $(item).text();
    var results = sentiment(text);
    console.log(sentimentToSmiley(results), '-', text.replace(/\n/g, ' '));
  });
});
```

Checkout out [functional example on runnable](http://runnable.com/U3FuXTY9W-JoY5vl). Running this will produce result similiar to:

```javascript
:-| - @mrbigdreamerYWF We tried to get NBC but they wouldn't cover it :)
:-| - @AmianExclusive I think the C7R is the most expensive customer GTE car you can buy. And still not a proven thing.
:-| - @AmianExclusive Corvette factory team will be at Le Mans but not Viper :(. Apparently they didn't sell enough cars to afford it.
:-| - Goooood morning #RailsConf! My talk is at 9:15am central. It will be streamed live on justin.tv/confreaks, if you're not in Chicago.
:-| - @ashesfall Hot diggity.
:-) - (Yes, internet is fast elsewhere too, but most services of note have their app servers in the US, so that's the ping that counts).
:-| - @arunagw Just about everything on the internet of note, which happens to have app servers in the US :D
:-| - For those who can't attend RailsConf, we'll be livestreaming the keynotes here: justin.tv/confreaks Schedule here: railsconf.com/schedule
:-D - It gets me every time I'm back in the US - even if just out for a few weeks: 20ms pings is internet happiness. So fast.
:-| - @turbineseaplane Nope. May depend on hand size? Could see it be harder to hold with small hands.
:-| - @mhauer I find that the hybrid model is actually the most common in anything but the newest or smallest companies. Very workable.
:-( - @N8Gard @railsconf They're going to record it, I think. So no worries.
:-( - @dennismajor1 @thereaIbanksy I'd prefer to look at it the other way: drop the religious nonsense and enjoy a party without sin!
:-| - @turbineseaplane It is sometimes a little awkward but the sacrifice is worth it.
:-| - @andrestuul Right on the last one, not on the first two. Connecting has never been easier. 10 yrs ago I was working from Denmark.
:-| - @davegreiner @dhh we had thousands of accounts on Cork’d when it was still on a Mac mini in my friend’s rack (Rails 1.x)
:`( - @GregMolnar Horrible contortions to the false idol of testing. More on this in my keynote at RailsConf tomorrow.
:-D - @dhh Sounds familiar. CM was hosted on a cheap box with all our client's sites. Went dedicated when it started slowing them down 1 yr later.
:`( - @thomasfuchs @letsfreckle Fuck yeah! But you did have to forgo such necessities as a big fancy office on day 1!
:-) - @homakov @davidpetschull I was in Denmark while I built Basecamp. But yes timezone and language can be barriers.
```

## Closing thoughts

[module] is a very simple token counter which has vocabulary of about 2.5k english words. It doesn't always produce reliable results, but it gets you a step forward if you need to do sentiment analysis without bringing in the heavy weight APIs or expensive commercial libraries.

I can totally imagine processing customer inquiries coming in via email, twitter and other channels with [module]. Higher priority could be assigned to inquires with lower, more negative scores.

If you want to play around with example, [clone the repo](https://github.com/npmawesome/example-sentiment).]]></content:encoded>
</item><item>
  <wp:post_id>84</wp:post_id>
  <title><![CDATA[google-distance]]></title>
  <link>http://npmawesome.com/2014-05-01-google-distance/</link>
  <pubDate>Thu May 01 2014 11:30:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[akoenig]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-01-google-distance/</guid>
  <description>Find distance data between two locations in an easy way.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-01 11:30:00</wp:post_date>
  <wp:post_date_gmt>2014-05-01 18:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>google-distance</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-akoenig"><![CDATA[akoenig]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Find distance data between two locations in an easy way.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[google-distance]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d53]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[edwlook/node-google-distance]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d54]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d55]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/05/google-distance.png" class="hide-on-mobile" style="width: 100%" />

Everybody appreciates the distance information between two locations in web mapping services like [Google Maps](http://maps.google.com), right? Do you have a similar use case within your application but want to avoid the implementation overhead of abstracting from an external API?
[module full] by [author] helps you to do just that.

<!--more-->

The module wraps the distance calculation functionality of the [Google Distance Matrix API](https://developers.google.com/maps/documentation/distancematrix/) into an _easy-to-use_ interface.

```bash
[module install]
```

## Usage

Let's say we want to calculate the distance between New York City and San Diego. [module] is frugal and very intuitive to use in this regard. It asks only for two required properties: `origin` and `destination`.

The following basic usage example ...

```javascript
'use strict';

var distance = require('google-distance');

var options = {
    origin: 'New York City, USA',
    destination: 'San Diego, USA'
};

function onDistance (err, result) {
    if (err) {
        return console.error(err);
    }

    console.log(result);
}

distance.get(options, onDistance);
```

will `result` in:

```javascript
{
    index: null,
    distance: '4,447 km',
    distanceValue: 4447040,
    duration: '1 day 17 hours',
    durationValue: 146399, // in seconds
    origin: 'New York, NY, USA',
    destination: 'San Diego, CA, USA',
    mode: 'driving',
    units: 'metric',
    language: 'en',
    avoid: null,
    sensor: false
}
```

Calculating the distance between cities is cool, isn't it? But you know what's even cooler? Determining the distance between two tupels of latitude and longitude values.

```javascript
'use strict';

var distance = require('google-distance');

var options = {
    origin: '40.759011,-73.984472',
    destination: '37.810848,-122.267448'
};

function onDistance (err, result) {
    if (err) {
        return console.error(err);
    }

    console.log(result);
}

distance.get(options, onDistance);
```

Fantastico! Beside the distance of the two points, you also see a reverse geocoded `origin` and `destination`. Woot!

```javascript
{
    index: null,
    distance: '4,447 km',
    distanceValue: 4447040,
    duration: '1 day 17 hours',
    durationValue: 146399, // in seconds
    origin: 'New York, NY, USA',
    destination: 'San Diego, CA, USA',
    mode: 'driving',
    units: 'metric',
    language: 'en',
    avoid: null,
    sensor: false
}
```

## Fine tuning

If you're crazy enough to cycle all the way down from Oakland to San Diego for instance and want to check how far it really is, you can measure this as well as switching to imperial units or add other [additional parameters](https://github.com/edwlook/node-google-distance#additional-parameters).

```javascript
'use strict';

var distance = require('google-distance');

var options = {
    origin: 'Oakland, USA',
    destination: 'San Diego, USA',
    mode: 'bicycling',
    units: 'imperial'
};

distance.get(options, onDistance (err, result) {
    // ...
});
```

Checkout this [runnable example](http://runnable.com/U2IHUgxWgZMpX2Ct/google-distance-example-npmawesome) to verify that cycling might be a good one-week trip. Whereas walking would be definitely a crazy idea. Do the math :)

## API key

One last note: It is not necessary to configure an API key in order to use the [module] module. But: To avoid exceeding Google's [quota](https://developers.google.com/maps/documentation/distancematrix/#Limits) it is highly recommended.

Follow these [steps](https://developers.google.com/maps/documentation/distancematrix/#api_key) in order to obtain an API key. After that it is easy to inform the module about your key:

```javascript
var distance = require('google-distance');

distance.apiKey = 'YOUR_API_KEY';
```

You can find the usage examples in an own [repository](https://github.com/npmawesome/example-google
-distance). Play with it and let me know what you think :)]]></content:encoded>
</item><item>
  <title>google-distance</title>
  <wp:post_parent>84</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/google-distance.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-05-01 11:30:00</wp:post_date>
  <wp:post_date_gmt>2014-05-01 18:30:00</wp:post_date_gmt>
  <category domain="author" nicename="cap-akoenig"><![CDATA[akoenig]]></category>
</item><item>
  <wp:post_id>85</wp:post_id>
  <title><![CDATA[agenda]]></title>
  <link>http://npmawesome.com/2014-05-06-agenda/</link>
  <pubDate>Tue May 06 2014 11:30:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-06-agenda/</guid>
  <description>Find distance data between two locations in an easy way.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-06 11:30:00</wp:post_date>
  <wp:post_date_gmt>2014-05-06 18:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>agenda</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Find distance data between two locations in an easy way.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[agenda]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d56]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[rschmukler/agenda]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d57]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d58]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

[author photo]
As you web application grows, there comes a time when you will want to have scheduled jobs. The easiest thing is of course go the [cron](http://en.wikipedia.org/wiki/Cron) route. However, maintaining and updating it isn't so easy, especially if you have more than one server to deal with and you still maybe too young for enterprise level job scheduler. What's left? Maybe just do some `setTimeout` calls in process... That doesn't sound very exciting nor very manageable.

This is where [module full] by [author] comes in. [module], to plainly put it, is a light-weight job scheduling library for Node.js. Lets give it a go!

<!--more-->

```javascript
npm install agenda
```

## Features

* Minimal overhead. [module] aims to keep its code base small.
* MongoDB 2.4+ backed persistance layer.
* Scheduling with configurable priority, concurrency, and repeating.
* Scheduling via cron or human readable syntax.
* Event backed job queue that you can hook into.

## Usage

Lets make a basic example that runs a job 10 seconds after the startup:

```javascript
var Agenda = require('agenda');
var agenda = new Agenda({db: {address: 'localhost:27017/agenda-example'}});

agenda.define('greet the world', function(job, done) {
  console.log(job.attrs.data.time, 'hello world!');
  done();
});

agenda.schedule('in 10 seconds', 'greet the world', {time: new Date()});
agenda.start();

console.log('Wait 10 seconds...');
```

Check out [functional example on runnable](http://runnable.com/U2RE8d2YyYk_iaGU/agenda-module-example-for-npmawesome-nodejitsu-and-node-js). I like plain English option, but you can also schedule regular running task with cron style expressions like so:

```javascript
agenda.every('*/3 * * * *', 'greet the world');
```

[module] is also capable of processing jobs from multiple processes. You just have to specify `lockLifetime` option during the worker definition.

```javascript
agenda.define('someJob', {lockLifetime: 10000}, function(job, cb) {
  //Do something in 10 seconds or less...
});
```

## Mongo vs Redis

Curious why MongoDB was chosen for something most would use Redis for? [author] has a few thoughts on this:

> The decision to use Mongo instead of Redis is intentional. Redis is often used for non-essential data (such as sessions) and without configuration doesn't guarantee the same level of persistence as Mongo (should the server need to be restarted/crash).
>
> [module] decides to focus on persistence without requiring special configuration of Redis (thereby degrading the performance of the Redis server on non-critical data, such as sessions).

## Closing thoughts

[module] focuses on setting up and managing regular running tasks such as session purging, email sending, data processing and so on. There are a few alternatives out there:

* [module full name="kue" repo="learnboost/kue" license="MIT"] is a priority job queue backed by redis originally written by [TJ Holowaychuk](https://github.com/visionmedia) and is currently maintained by [Behrad](https://github.com/behrad)
* [module full name="node-schedule" repo="mattpat/node-schedule" license="MIT"] is a single process, cron-like and not-cron-like job scheduler by [Matt Patenaude](https://github.com/mattpat). It doesn't have any external dependencies.]]></content:encoded>
</item><item>
  <wp:post_id>86</wp:post_id>
  <title><![CDATA[Links for May 6, 2014]]></title>
  <link>http://npmawesome.com/2014-05-06-links/</link>
  <pubDate>Tue May 06 2014 09:51:37 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-06-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-06 09:51:37</wp:post_date>
  <wp:post_date_gmt>2014-05-06 16:51:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles & Slides

* [Video - Build a Killer Node.js Client for Your REST+JSON API](https://www.youtube.com/watch?v=1FVAS7MdPXo)
* [Podcast - JSJ Protractor with Julie Ralph](http://javascriptjabber.com/106-jsj-protractor-with-julie-ralph/)
* [Atom](https://atom.io/) editor goes fully [open source](https://github.com/blog/1831-atom-free-and-open-source-for-everyone)
* [DIY AngularJS SEO with PhantomJS (the easy way!)](http://lawsonry.com/2014/05/diy-angularjs-seo-with-phantomjs-the-easy-way/)

  > I have to be honest: I’m only writing this tutorial because I could not find a decent tutorial on setting up an environment for AngularJS SEO awesomeness. It couldn’t be that hard, right?

<!--more-->

* [Make A Barbarian's Sword](http://www.instructables.com/id/Make-A-Barbarians-Sword/?ALLSTEPS)

  > <img src="http://cdn.instructables.com/F39/E9XD/HUQAT77M/F39E9XDHUQAT77M.LARGE.jpg" style=“width: 300px”/>

* [Practical Workflows for ES6 Modules, Fluent 2014](https://www.youtube.com/watch?v=0VUjM-jJf2U)

  > ![](https://i1.ytimg.com/vi/0VUjM-jJf2U/maxresdefault.jpg)

## Github

* [angular-classy](http://davej.github.io/angular-classy/) is a module for cleaner class-based controllers for AngularJS.
* [gulp-concat-sourcemap](https://github.com/cwmacdon/gulp-concat-sourcemap) is a gulp.js plugin that concatenate files and generate a source map file.
* [express4-bootstrap-starter](https://github.com/aredo/express4-bootstrap-starter) is a simple demo app in Node.js using ExpressJS 4, Mongoose, Passport.js and Jade.

## Apps

* [Cakebrew](http://www.cakebrew.com/) - the Mac app for Homebrew.
* [JSON generator](http://www.json-generator.com/) is a pretty slick online tool to generate JSON data fixtures.

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Node.js 0.11.13 with <a href="https://twitter.com/search?q=%23ES6&amp;src=hash">#ES6</a> WeakMap, WeakSet, Promise &amp; Object.observe is out! Soon to be in Node 0.12. <a href="http://t.co/Y9RxK4wOnK">http://t.co/Y9RxK4wOnK</a></p>&mdash; Michał Gołębiowski (@m_gol) <a href="https://twitter.com/m_gol/statuses/462294019830456320">May 2, 2014</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>I love Angularjs so much...</p>&mdash; Cindy Juarez (@sceendy) <a href="https://twitter.com/sceendy/statuses/462281885289172992">May 2, 2014</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Every time I run an npm install :) <a href="https://twitter.com/npmjs">@npmjs</a>. (gif version: <a href="http://t.co/skRgXkyIzQ">http://t.co/skRgXkyIzQ</a>) <a href="http://t.co/59M56CGJdC">pic.twitter.com/59M56CGJdC</a></p>&mdash; Jon Q (@itsJonQ) <a href="https://twitter.com/itsJonQ/statuses/462280358516756480">May 2, 2014</a></blockquote>

## Misc

<iframe width="560" height="315" src="//www.youtube.com/embed/AYGSpOfIr9Y?rel=0" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>86</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-05-06 09:51:37</wp:post_date>
  <wp:post_date_gmt>2014-05-06 16:51:37</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>87</wp:post_id>
  <title><![CDATA[Links for May 13, 2014]]></title>
  <link>http://npmawesome.com/2014-05-13-links/</link>
  <pubDate>Tue May 13 2014 09:38:07 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-13-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-13 09:38:07</wp:post_date>
  <wp:post_date_gmt>2014-05-13 16:38:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles & Slides

* [The Domain Market is a Mess](http://spencerfry.com/the-domain-market-is-a-mess)
* [Docker 0.11 is the Release Candidate for 1.0](http://blog.docker.io/2014/05/docker-0-11-release-candidate-for-1-0/)
* [Free Your Android](http://www.roussos.cc/2014/05/08/free-your-android/)
* [How fast is PDF.js?](https://hacks.mozilla.org/2014/05/how-fast-is-pdf-js/)
* [Generators vs Fibers](http://howtonode.org/generators-vs-fibers)
* [Live feed from ISS](http://www.ustream.tv/channel/iss-hdev-payload)

<!--more-->

## Github

* [UIKit](http://getuikit.com/) is a lightweight and modular front-end framework for developing fast and powerful web interfaces.

## Apps

* [PaintCode 2](http://www.paintcodeapp.com/)

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Introducing Synth - A new <a href="https://twitter.com/nodejs">@NodeJS</a> web framework designed just for <a href="https://twitter.com/angularjs">@AngularJS</a>&#10;<a href="http://t.co/7yLOHUittG">http://t.co/7yLOHUittG</a> &#10;via <a href="https://twitter.com/JonathanAbrams">@JonathanAbrams</a> <a href="https://twitter.com/YouTube">@YouTube</a></p>&mdash; PatrickJS (@gdi2290) <a href="https://twitter.com/gdi2290/statuses/464266195739234304">May 8, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>87</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-05-13 09:38:07</wp:post_date>
  <wp:post_date_gmt>2014-05-13 16:38:07</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>88</wp:post_id>
  <title><![CDATA[Links for May 14, 2014]]></title>
  <link>http://npmawesome.com/2014-05-14-links/</link>
  <pubDate>Wed May 14 2014 09:45:09 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-14-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-14 09:45:09</wp:post_date>
  <wp:post_date_gmt>2014-05-14 16:45:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[## Articles

* [Getting gulpy](https://medium.com/p/a2010c13d3d5) - advanced tips for using gulp.js
* [Removing user interface complexity, or why React is awesome](http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome)
* [Someone Finally Designed a Better Disposable Coffee Cup Lid](http://gizmodo.com/someone-finally-designed-a-better-disposable-coffee-cup-1575905762) ![](http://i.kinja-img.com/gawker-media/image/upload/s--E78R8Pma--/gksygb1vboboawlubax0.jpg)
* [Behind the wheel: a look inside Google's self-driving cars](http://www.theverge.com/google/2014/5/14/5714602/photos-inside-googles-self-driving-cars) ![](http://cdn2.vox-cdn.com/uploads/chorus_image/image/33019187/google-car-theverge-1_1020.0_standard_2040.0.jpg)

<!--more-->

## Github

* [git hook to run a command after `git pull` if a specified file was changed](https://gist.github.com/sindresorhus/7996717)
* [NProgress.js](http://ricostacruz.com/nprogress/) is a nanoscopic progress bar. Featuring realistic trickle animations to convince your users that something is happening!

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Our 10 year anniversary is coming up! To help us celebrate, <a href="https://twitter.com/simpleshow">@simpleshow</a> made this incredible video for us - <a href="http://t.co/KFHz5RvQpx">http://t.co/KFHz5RvQpx</a></p>&mdash; Moz (@Moz) <a href="https://twitter.com/Moz/statuses/466618559914065921">May 14, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <wp:post_id>89</wp:post_id>
  <title><![CDATA[Links for May 16, 2014]]></title>
  <link>http://npmawesome.com/2014-05-16-links/</link>
  <pubDate>Fri May 16 2014 09:56:57 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-16-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-16 09:56:57</wp:post_date>
  <wp:post_date_gmt>2014-05-16 16:56:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles

* [Introducing Firebase Hosting](https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/)

  > Once upon a time, in the dark ages of the internet, apps dynamically generated HTML server-side every time a page was requested. This was slow, difficult to scale, and required users to connect to distant servers to get their content.

* [Cookies vs Tokens. Getting auth right with Angular.JS](https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/)

  > What's JSON Web Token? JSON Web Token (JWT, pronounced jot) is a relatively new token format used in space-constrained environments such as HTTP Authorization headers.

* [Auth with JSON Web Tokens](http://jpadilla.com/post/73791304724/auth-with-json-web-tokens)

  > There’s a relatively new standard called JSON Web Token that happens to be backed by companies like Firebase, Google, Microsoft, and Zendesk. There are already many libraries to handle encoding and decoding of this tokens in the backend.

* [100,000 e2e selenium tests? Sounds like a nightmare!](http://watirmelon.com/2014/05/14/100000-e2e-selenium-tests-sounds-like-a-nightmare)

  > If I had to choose just one, I would definitely choose a comprehensive suite of automated unit tests over a comprehensive suite of end-to-end/system tests any day of the week.

* [Lessons learnt by building Single Page Applications](http://www.reinteractive.net/posts/186-lessons-learnt-by-building-single-page-applications)

  > I want to share some of the lessons I have learnt building them, especially what things I found difficult technically. Based on my experience I think the following are common issues that you may encounter when building them.

<!--more-->

## Github

* [Shepherd](https://github.com/HubSpot/shepherd) - guide your users through a tour of your app.

## Startups

* [CityMapper](https://citymapper.com/nyc/superrouter?) is a pretty slick city route planner available for a small number of cities.

## YouTube

* [WebTorrent: Bringing BitTorrent to the Web](https://www.youtube.com/watch?v=PT8s_IVWDgw)

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Time for some traffic problems in São Paulo... <a href="http://t.co/d29u5ctJBG">pic.twitter.com/d29u5ctJBG</a></p>&mdash; Patrick Stewart (@SirPatStew) <a href="https://twitter.com/SirPatStew/statuses/466633514482298880">May 14, 2014</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Today, we are thrilled to introduce &quot;A New Way to Learn Ionic&quot; <a href="http://t.co/CceIQ00TVG">http://t.co/CceIQ00TVG</a> <a href="http://t.co/P97znY5gxb">pic.twitter.com/P97znY5gxb</a></p>&mdash; ionic (@Ionicframework) <a href="https://twitter.com/Ionicframework/statuses/466643147934941184">May 14, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>89</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-05-16 09:56:57</wp:post_date>
  <wp:post_date_gmt>2014-05-16 16:56:57</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>90</wp:post_id>
  <title><![CDATA[longjohn]]></title>
  <link>http://npmawesome.com/2014-05-16-longjohn/</link>
  <pubDate>Fri May 16 2014 21:11:55 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-16-longjohn/</guid>
  <description>Find distance data between two locations in an easy way.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-16 21:11:55</wp:post_date>
  <wp:post_date_gmt>2014-05-17 04:11:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>longjohn</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Find distance data between two locations in an easy way.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[longjohn]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d59]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[mattinsler/longjohn]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d5a]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d5b]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

You know that feeling of disapointment when you get an error and the stack trace just abruptly ends and you know for a fact it should be much longer, and much more useful than that?

```javascript
Error: Error message
    at null._onTimeout (/examples/error-module.js:7:29)
    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)
```

I'm very well familiar with that feeling... Maybe too much? Turns out there's a way to get much better results in Node with a little bit of magic. Said magic is a module called [module full] by [author].

<!--more-->

```bash
[module install]
```

## Usage

Using [module] couldn't get any easier. You just need to `require('longjohn')` and you are all set. The magic that I mentioned above consists of replacing functions like `setTimeout` and `nextTick` with patched versions that keep track of the stack as it unfolds and as author suggests, this probably shouldn't be used in production.

But, after you require [module], your short, mildly helpful stack like this:

```javascript
Error: Error message
    at null._onTimeout (/examples/error-module.js:7:29)
    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)
```

Turns into this:

```javascript
Error: Error message
    at [object Object].<anonymous> (/examples/error-module.js:7:29)
    at listOnTimeout (timers.js:110:15)
---------------------------------------------
    at delayed (/examples/error-module.js:3:3)
    at delayedError (/examples/error-module.js:7:3)
    at [object Object].<anonymous> (/examples/error-module.js:21:5)
    at listOnTimeout (timers.js:110:15)
---------------------------------------------
    at delayed (/examples/error-module.js:3:3)
    at module.exports (/examples/error-module.js:20:3)
    at Object.<anonymous> (/examples/longjohn.js:2:26)
    at Module._compile (module.js:456:26)
    at Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Module._load (module.js:312:12)
    at Module.runMain (module.js:497:10)
```

## Closing thoughts

Getting a full stack is imperative to finding out the root cause of the problem in your code. [module] addresses that on the Node side. There's a similiar module that works in the browser called [module full name="zone.js" repo="btford/zone.js" license="Apache 2.0"] by [Brian Ford](https://github.com/btford) that I think you should check out as well.

Check out [example for this article](https://github.com/npmawesome/example-longjohn) on GitHub.]]></content:encoded>
</item><item>
  <wp:post_id>91</wp:post_id>
  <title><![CDATA[Links for May 20, 2014]]></title>
  <link>http://npmawesome.com/2014-05-20-links/</link>
  <pubDate>Tue May 20 2014 12:22:40 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-20-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-20 12:22:40</wp:post_date>
  <wp:post_date_gmt>2014-05-20 19:22:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles

* [Gulp + Browserify: The Everything Post](http://viget.com/extend/gulp-browserify-starter-faq)

  > When I was done flipping tables, I set aside my newly acquired Grunt + RequireJS skills, and started over again with Gulp and Browserify to see what all the fuss was about.
  >
  >You guys. The internet was right. To save you some googling, doc crawling, and trial and error I went through, I've assembled some resources and information I think you'll find helpful in getting started.

* [Roll Your Own Asset Pipeline with Gulp](http://flippinawesome.org/2014/05/12/roll-your-own-asset-pipeline-with-gulp/)

  > Gulp is a build system. It’s like Grunt, Make, Rake, and the like. It’s easy to use for the person running it. While it does have a slight learning curve, you’ll find it a super useful tool for all kinds of tasks. It’ll be the fastest weapon in your toolbox for asset compilation (both in terms of time to develop and run time).

* [Chrome 35 launches with more developer control](http://thenextweb.com/google/2014/05/20/chrome-35-launches-developer-control-touch-input-new-apis-javascript-features/)

  > - More developer control over touch input.
  > - New JavaScript features.
  > - Unprefixed Shadow DOM.
  > - A number of new apps/extension APIs.
  > - Lots of under the hood changes for stability and performance.

<!--more-->

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>DevTools Tip: Select a User Agent from a predefined list, or define an arbitrary one. Gif: <a href="https://t.co/M5QMInl7Fq">https://t.co/M5QMInl7Fq</a> <a href="http://t.co/9XUDDBXwoO">pic.twitter.com/9XUDDBXwoO</a></p>&mdash; Umar Hansa (@umaar) <a href="https://twitter.com/umaar/statuses/468823671923306497">May 20, 2014</a></blockquote>

<blockquote class="twitter-tweet" lang="en"><p>Miss the <a href="https://twitter.com/search?q=%23live&amp;src=hash">#live</a> demo at <a href="https://twitter.com/search?q=%23Bitcoin2014&amp;src=hash">#Bitcoin2014</a>? Not to worry! <a href="https://twitter.com/jerallaire">@jerallaire</a> walks you through Circle in this <a href="https://twitter.com/search?q=%23video&amp;src=hash">#video</a>: <a href="http://t.co/hPpRcZ5fy9">http://t.co/hPpRcZ5fy9</a> <a href="https://twitter.com/search?q=%23bitcoin&amp;src=hash">#bitcoin</a></p>&mdash; Circle Inc. (@circlebits) <a href="https://twitter.com/circlebits/statuses/467325134706343936">May 16, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>91</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-05-20 12:22:40</wp:post_date>
  <wp:post_date_gmt>2014-05-20 19:22:40</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>92</wp:post_id>
  <title><![CDATA[Links for May 22, 2014]]></title>
  <link>http://npmawesome.com/2014-05-22-links/</link>
  <pubDate>Thu May 22 2014 10:26:40 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-22-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-22 10:26:40</wp:post_date>
  <wp:post_date_gmt>2014-05-22 17:26:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles

* [Add Rules to Stylesheets with JavaScript](http://davidwalsh.name/add-rules-stylesheets)

  > Another way we can make our pages efficient and fast is to dynamically add and remove styles directly to a stylesheet instead of constantly querying the DOM for elements and applying styles.  Here's how it works!

* [Redis new data structure: the HyperLogLog](http://antirez.com/news/75)

  > There is a class of algorithms that use randomization in order to provide an approximation of the number of unique elements in a set using just a constant, and small, amount of memory. The best of such algorithms currently known is called HyperLogLog, and is due to Philippe Flajolet.

* [Script-injected "async scripts" considered harmful](https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/)

  > The script-injected pattern offers no benefits over `<script async>`. The reason it exists is because `<script async>` was not available and preload scanners did not exist back when it was first introduced. However, that era has now passed, and we need to update our best practices to use async attribute instead of script-injected scripts. In short, script-injected "async scripts" considered harmful.

* [Data-binding Revolutions with Object.observe()](http://www.html5rocks.com/en/tutorials/es7/observe/)

  > A revolution is coming. There’s a new addition to JavaScript that’s going to change everything you think you know about data-binding. It’s also going to change how many of your MVC libraries approach observing models for edits and updates.

<!--more-->

## Github

* [Solved by Flexbox](http://philipwalton.github.io/solved-by-flexbox/)

  > This site is not another CSS framework. Instead, its purpose is to showcase problems once hard or impossible to solve with CSS alone, now made trivially easy with Flexbox. And with the recent release of Internet Explorer 11 and Safari 6.1, the latest Flexbox spec is now supported in every modern browser.

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Dawg, RT <a href="https://twitter.com/ItsKieranTime">@ItsKieranTime</a> I&#39;ve found it; the most confusing image on the internet. <a href="https://twitter.com/search?q=%23KieranPresentsTheInternet&amp;src=hash">#KieranPresentsTheInternet</a> <a href="http://t.co/OUysIaxEfX">pic.twitter.com/OUysIaxEfX</a></p>&mdash; Gingerick Lamar (@odiolasgalletas) <a href="https://twitter.com/odiolasgalletas/statuses/466103422454730752">May 13, 2014</a></blockquote>
]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>92</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-05-22 10:26:40</wp:post_date>
  <wp:post_date_gmt>2014-05-22 17:26:40</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>93</wp:post_id>
  <title><![CDATA[changelog]]></title>
  <link>http://npmawesome.com/2014-05-23-changelog/</link>
  <pubDate>Fri May 23 2014 11:30:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[akoenig]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-23-changelog/</guid>
  <description>changelog release management tool</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-23 11:30:00</wp:post_date>
  <wp:post_date_gmt>2014-05-23 18:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>changelog</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-akoenig"><![CDATA[akoenig]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[changelog release management tool]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[defunctzombie/changelog]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d5c]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[defunctzombie/changelog]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d5d]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d5e]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[changelog]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d5f]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]

You fixed _all_ the bugs, closed some security holes and documented new features in your project. In other words - you did a great job and the next release is ready for the roll-out. But you're not done just yet! No? What else? You have to update the changelog file, bump the version in the respective `package.json` and create a `git tag` first. Hm, many steps, right? No more! [module full] by [author] is here to save you.

<!--more-->

Personally I'm not just a huge fan of the concept behind [Readme Driven Development](http://tom.preston-werner.com/2010/08/23/readme-driven-development.html) but also of planning releases in a changelog file. If this is your workflow as well, you will benefit from [module] - you don't have to adjust your changelog when releasing a new version by hand. It's there, anyways, as described above.

The release workflow consists of many separate tasks which don't have to be executed manually. They can be handled by [module]. Let's take a look:

```bash
[module install]
```

## Initialization

If you starting a new project you will want to create a new changelog. Execute:

```javascript
changelog --init
```

This will create an empty `HISTORY.md` file for you which has the following structure:

```javascript
# UNRELEASED

  * initial
```

The `UNRELEASED` section is for all your changes you made or will make in the version you are working on. Look at this as a personal project blog where you keep track of every _unreleased_ change. No more external _todo applications_ or what have you. Everything is in the context you are working in – your project.

## Release

Let's say your product is ready for prime time and you want to release the _1.0.0_ version (OMG!):

```javascript
changelog --release 1.0.0
```

This will will trigger `changelog` to perform the following steps:

1. Convert the first `UNRELEASED` section to `# 1.0.0 (YYYY-MM-DD)`
2. Change the `version` property in your _package.json_ accordingly.
3. Execute a `git commit -m "v1.0.0"`
4. Execute a `git tag "v1.0.0"`

## Keep on working...

Every project which does not have a roadmap with future changes is a dead project, right? I hope that the next release is always just around the corner! Next, you should start a new `UNRELEASED` section by executing the following and keep on working :)

```javascript
changelog --increment
```

## Closing thoughts

There might be other tools like [module] out there but this one fits my personal workflow very well and who knows, maybe yours too. Whatever tools you are using for the release management, I can not emphasize enough how important it is to write a changelog file. Not just for you as a project maintainer but also for communicating to the people who are using your product. [author] helps with [module] to manifest this notion of centering the versioning workflow around the changelog. Thanks!]]></content:encoded>
</item><item>
  <wp:post_id>94</wp:post_id>
  <title><![CDATA[joi]]></title>
  <link>http://npmawesome.com/2014-05-23-joi/</link>
  <pubDate>Fri May 23 2014 12:41:03 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-23-joi/</guid>
  <description>Object schema validation in Node.js with Joi.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-23 12:41:03</wp:post_date>
  <wp:post_date_gmt>2014-05-23 19:41:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>joi</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Object schema validation in Node.js with Joi.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[joi]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d60]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[spumko/joi]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d61]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[BSD 4-Clause]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d62]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[joi]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d63]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

[author photo]
Object validation is a tricky thing. It sounds pretty simple when you first think about it, yet there are a ton of libraries that try to do it. Why is that? I feel like there are just alot of way to approach the subject. [module full] is a schema validation library that came out of the [Walmart Labs](http://www.walmartlabs.com/) efforts and more specifically power validation in the [hapi] server framework.

Lets check it out!

<!--more-->

```bash
[module install]
```

## Usage

[module] works by defining a schema. You can validate a single string or number:

```javascript
var Joi = require('joi');

// will fail
Joi.string().validate(10, console.log);

// also will fail
Joi.string().email().validate('hello+gmail.com', console.log);

// will pass
Joi.string().email().validate('hello+world@gmail.com', console.log);
```

You can validate a basic plain schema

```javascript
var schema = {counter: Joi.number().min(1).max(10).required()};

// will fail
Joi.validate({counter: 0}, schema, console.log);

// will pass
Joi.validate({counter: 5}, schema, console.log);
```

Finally, you can do a some pretty complicated validation with fields depending on each other:

```javascript
var schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(30).required(),
    password: Joi.string().regex(/[a-zA-Z0-9]{3,30}/),
    confirmation: Joi.ref('password')
  })
  .with('password', 'confirmation');

// will fail because `foo` isn't in the schema at all
Joi.validate({foo: 1}, schema, console.log);

// will fail because `confirmation` is missing
Joi.validate({username: 'alex', password: 'qwerty'}, schema, console.log);

// will pass
Joi.validate({
  username: 'alex', password: 'qwerty', confirmation: 'qwerty'
}, schema, console.log);
```

## Closing thoughts

Here are some other modules you might want to evaluate:

* [module full name="validator" displayName="validator.js" repo="chriso/validator" license="MIT"] is a string validation and sanitization module by [Chris O'Hara](https://github.com/chriso).
* [finito](http://www.finitio.io/) is a language for capturing information structure by [Louis Lambeau](https://github.com/llambeau).
* [module full name="schema-inspector" repo="Atinux/schema-inspector" license="MIT"] is a module to sanitize and validate objects by [Sébastien Chopin](https://github.com/Atinux) ([previously featured on npmawesome.com](http://npmawesome.com/posts/2014-01-24-schema-inspector/)).

Finally, check out [source code](https://github.com/npmawesome/example-joi) for this article on GitHub and an [interative example](http://runnable.com/U31mW3RA_pBu7oN-/schema-validation-with-joi-for-node-js-npmawesome-and-nodejitsu) on Runnable.

[hapi]: http://spumko.github.io/]]></content:encoded>
</item><item>
  <wp:post_id>95</wp:post_id>
  <title><![CDATA[Links for May 29, 2014]]></title>
  <link>http://npmawesome.com/2014-05-29-links/</link>
  <pubDate>Thu May 29 2014 09:50:42 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-05-29-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-05-29 09:50:42</wp:post_date>
  <wp:post_date_gmt>2014-05-29 16:50:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles

* [Introducing Socket.IO 1.0](http://socket.io/blog/introducing-socket-io-1-0/)

  > The first version of Socket.IO was created shortly after Node.JS made its first appearance. I had been looking for a framework that easily enabled me to push data from a server to a client for a long time, and even had tried other approaches to server-side JavaScript.

* [Understanding web pages better](http://googlewebmastercentral.blogspot.ca/2014/05/understanding-web-pages-better.html)

  > … we decided to try to understand pages by executing JavaScript. It’s hard to do that at the scale of the current web, but we decided that it’s worth it. We have been gradually improving how we do this for some time. In the past few months, our indexing system has been rendering a substantial number of web pages more like an average user’s browser with JavaScript turned on.

* [module full] is a great resource for beginners and pros on organizing node apps and modules. Very good read.
* [Device State Detection with CSS Media Queries and JavaScript](http://davidwalsh.name/device-state-detection-css-media-queries-javascript)

  > Being able to detect device state at any given moment is important for any number of reasons and so it's important that web app CSS and JavaScript are in sync with each other.

* [hapi hapi joi joi](http://hueniversedotcom.files.wordpress.com/2013/01/hapi-hapi-joi-joi.pdf) - fantastic slides!
* [Relay Control with Johnny-Five on Node.js](http://bocoup.com/weblog/javascript-relay-with-johnny-five/)

  > DO NOT TOUCH ANY PART OF THE RELAY WHILE IT'S PLUGGED INTO THE WALL.

* [How much is your startup stock worth?](http://jdmaturen.github.io/2013/how-much-is-your-startup-stock-worth.html)

  > You can’t get rich on salary.

<!--more-->

## Github

* [Object Playground](http://www.objectplayground.com/) is a tool for visualizing and experimenting with JavaScript object relationships.
* [PDFium](https://code.google.com/p/pdfium/) is an open-source PDF rendering engine that is used in Google Chrome.
* [DynCSS](http://www.vittoriozaccaria.net/dyn-css/) - simple, dynamic CSS rules to give life to your sites.

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>This is an amazing <a href="https://twitter.com/StackOverflow">@Stackoverflow</a> answer about Angular (and using jQuery) <a href="http://t.co/pXoyf0zuN6">http://t.co/pXoyf0zuN6</a></p>&mdash; Sara Chipps (@SaraJChipps) <a href="https://twitter.com/SaraJChipps/statuses/468769556765614080">May 20, 2014</a></blockquote>

## Misc

* [AfrikaBurm - Trickster - 2014 photos](http://seanfphotography.blogspot.ca/2014/05/afrikaburm-trickster-2014.html?spref=tw) - some great photos from the AfrikaBurm festival.
* [Fantasque Sans Mono](http://openfontlibrary.org/en/font/fantasque-sans-mono)

  > A programming font, designed with functionality in mind, and with some wibbly-wobbly handwriting-like fuzziness that makes it unassumingly cool.]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>95</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-05-29 09:50:42</wp:post_date>
  <wp:post_date_gmt>2014-05-29 16:50:42</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>96</wp:post_id>
  <title><![CDATA[Links for June 6, 2014]]></title>
  <link>http://npmawesome.com/2014-06-06-links/</link>
  <pubDate>Fri Jun 06 2014 17:39:31 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-06-06-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-06-06 17:39:31</wp:post_date>
  <wp:post_date_gmt>2014-06-07 00:39:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles

* [Stripe Open Source Retreat Grantees](https://stripe.com/blog/open-source-retreat-grantees)

  > We received about 120 applications in total. Since we only had a few slots (we in fact were originally going to do two, but we had so much trouble choosing we ended up creating another slot), there were a large number of really awesome projects we had to turn away.

* [It's time for the US to use the metric system](http://www.vox.com/2014/5/29/5758542/time-for-the-US-to-use-the-metric-system)

  > The United States is the last remaining industrialized nation with no formal commitment to going metric. America's position is causing unnecessary isolation. It's an impediment to trade and puts the United States at a disadvantage.

* [How Paypal and Reddit faked their way to traction](https://www.linkedin.com/today/post/article/20140524020851-6170480-how-paypal-and-reddit-faked-their-way-to-traction?_mSplash=1)

  > A platform is useless without complementary products. Marketplaces, especially, are dead without sellers posting on them. To solve the chicken-egg problem, some marketplaces create fake supply to attract buyers.

* [I Sold My Startup for $25.5 Million](http://www.slate.com/articles/technology/technology/2014/06/i_sold_my_startup_for_25_5_million_here_s_how_i_did_it.html)

  > When I shared the news, the team stared blankly at me, unsure if it was a good thing or a bad thing.

<!--more-->

## Github

* [Headroom.js](http://wicky.nillia.ms/headroom.js/) is a lightweight, high-performance JS widget (with no dependencies!) that allows you to react to the user's scroll. The header on this site is a living example, it slides out of view when scrolling down and slides back in when scrolling up.
* [Card](http://jessepollak.github.io/card/) makes your credit card form better in one line of code.
* [maury](https://github.com/cory/maury) is an example of processing and visualizing ship course data from open ICOADS Maury data set.

## YouTube

* [Introduction to gulp.js](http://www.youtube.com/watch?v=lRyRuQdjAww)

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>In May, <a href="https://twitter.com/tjholowaychuk">@tjholowaychuk</a> was fully or partially responsible for 32MM downloads, or about 10% of all downloads in May: <a href="http://t.co/AlxA8XVGNN">http://t.co/AlxA8XVGNN</a></p>&mdash; Laurie Voss (@seldo) <a href="https://twitter.com/seldo/statuses/474678710390751232">June 5, 2014</a></blockquote>]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>96</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-06-06 17:39:31</wp:post_date>
  <wp:post_date_gmt>2014-06-07 00:39:31</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>97</wp:post_id>
  <title><![CDATA[JugglingDB]]></title>
  <link>http://npmawesome.com/2014-06-16-jugglingdb/</link>
  <pubDate>Mon Jun 16 2014 09:00:00 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-06-16-jugglingdb/</guid>
  <description>Multi-database ORM - redis, mongodb, mysql, sqlite, postgres, neo4j, memory... Many databases, common API.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-06-16 09:00:00</wp:post_date>
  <wp:post_date_gmt>2014-06-16 16:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>jugglingdb</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Multi-database ORM - redis, mongodb, mysql, sqlite, postgres, neo4j, memory... Many databases, common API.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[jugglingdb]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d64]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[1602/jugglingdb]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d65]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d66]]></wp:meta_value>
</wp:postmeta><wp:postmeta>
  <wp:meta_key>module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[JugglingDB]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_display_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d67]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

Data access is something Node.js is very well known for. When it comes to drivers, there's support for nearly every database under the sun. These days however, in most cases you use an [ORM] library instead of a plain driver. It saves you time and you don't have to write every single thing youself.

There are database specific [ORM] libraries such as [Mongoose] for MongoDB and [Sequelize] for MySQL and PostgreSQL. The downside to this approach is that you have to learn a whole new API when you have to go from one database to another. I'm not suggesting it's a good idea to switch or use different databases during a lifecycle of a single project (eg SQLite for development and MySQL for production). But going from project to project, client to client, your requirements might change and you will have to use a different database and then learn a whole new API. Fun? Yes! But if you have to delivery features quickly, this might be a setback.

<!--more-->

<img src="http://npmawesome.com/wp-content/uploads/2014/06/anatoliy_chakkaev.jpg" width="100" align="right"/>
[module full] by [author] is a young [ORM] library that tries to provide a single API for a vast array of databases. All adapters come in a form of separate modules and there are quite a few already available:

* ArangoDB
* CouchDB
* Firebird
* MongoDB
* MySQL
* PostgreSQL
* Redis
* RethinkDB
* SQLite

Lets check it out!

```bash
[module install]
```

## Usage

```javascript
var Schema = require('jugglingdb').Schema;
var schema = new Schema('redis', {port: 6379});

var Post = schema.define('Post', {
  title: { type: String, length: 255 },
  content: { type: Schema.Text },
  date: { type: Date, default: function () { return new Date; } },
  timestamp: { type: Number,  default: Date.now },
  published: { type: Boolean, default: false, index: true }
});

var User = schema.define('User', {
  name: String,
  bio: Schema.Text,
  approved: Boolean,
  joinedAt: Date,
  age: Number
});

User.hasMany(Post, { as: 'posts',  foreignKey: 'userId' });
Post.belongsTo(User, { as: 'author', foreignKey: 'userId' });

var user = new User({ name: 'Alex' });

user.save(function (err) {
  var post = user.posts.build({ title: 'Hello world' });
  post.save(console.log);
});
```

Here's the cool part, if you want to use a different database, all you have to do is change how your schema connects:

```javascript
var schema = new Schema('mongodb', {url: 'mongodb://localhost/myapp'});
```

What's even cooler, is that you can have multiple schemas connecting to multiple databases at the same time. This could be very handy if for example you want to keep some cached data in Redis, which storing your loosly defined documents in MongoDB and your accounting stuff in MySQL. You could do all that with a single API.

## Closing thoughts

[1602/jugglingdb](https://github.com/1602/jugglingdb) is not as well known as [Mongoose], but it's been in development since 2011 and has a pretty strong following on GitHub. [Documentation](http://jugglingdb.co/) is pretty extensive and [roadmap](http://jugglingdb.co/roadmap.3.html) gives you a glimpse of where the project is headed and what is currently considered missing. Finally, check out [source code](https://github.com/npmawesome/example-jugglingdb) for this article on GitHub and an [interactive example](http://runnable.com/U5SP5uAfzMh7SfoX) on Runnable. I've included MongoDB, Redis and Memory examples.

[Mongoose]: http://mongoosejs.com/
[Sequelize]: http://sequelizejs.com/
[ORM]: http://en.wikipedia.org/wiki/Object-relational_mapping]]></content:encoded>
</item><item>
  <title>anatoliy_chakkaev</title>
  <wp:post_parent>97</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/anatoliy_chakkaev.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-06-16 09:00:00</wp:post_date>
  <wp:post_date_gmt>2014-06-16 16:00:00</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>98</wp:post_id>
  <title><![CDATA[Links for June 17, 2014]]></title>
  <link>http://npmawesome.com/2014-06-17-links/</link>
  <pubDate>Tue Jun 17 2014 10:36:34 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-06-17-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-06-17 10:36:34</wp:post_date>
  <wp:post_date_gmt>2014-06-17 17:36:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/04/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/>

## Articles

* [This article describes JavaScript for Automation, a new feature in OS X 10.10](https://developer.apple.com/library/prerelease/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/index.html#//apple_ref/doc/uid/TP40014508)
* [It’s here: Docker 1.0](http://blog.docker.com/2014/06/its-here-docker-1-0/)

  > First, while many organizations have cheerfully ignored our “Do not run in production!” warnings, others have been waiting for a level of product maturity before deploying production workloads.  This release’s “1.0” label signifies a level of quality, feature completeness, backward compatibility and API stability to meet enterprise IT standards.

* [How To Make the Leaderboard Example App in Meteor](http://meteortips.com/leaderboard-example-tutorial/)

  > In the coming weeks and months, I’ll be publishing tutorials on how to build all four of these applications from scratch. I’ll be simplifying the code in some places, making it more friendly to beginners, but they’ll be practically identical in terms of features.

* [Playing DVD in JavaScript](http://gmarty.github.io/jsconf-2014-talk-play-dvd-in-js)
* [Identifying the current script element](http://www.2ality.com/2014/05/current-script.html)
* [Finding the unjustly homeless, and teaching them to code](https://medium.com/architecting-a-life/fee8f3ee97a0)

  > The idea is simple. Without disrespecting him, I will offer two options:
  >
  > 1. I will come back tomorrow and give you $100 in cash.
  > 2. I will come back tomorrow and give you three JavaScript books, (beginner-advanced-expert) and a super cheap basic laptop. I will then come an hour early from work each day—when he feels prepared—and teach him to code.

* [Real-Time Chat With Node.js' Readline & Socket.io](http://code.tutsplus.com/tutorials/real-time-chat-with-nodejs-readline-socketio--cms-20953)

  > Node.js has an under-appreciated module in its standard library that is surprisingly useful. The Readline module does what it says on the box: it reads a line of input from the terminal.

<!--more-->

## Github

* [CoffeeConsole](https://github.com/snookca/CoffeeConsole) is a Chrome Extension for running CoffeeScript from the Web Inspector.

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Introducing the new <a href="http://t.co/JK8ZTaMria">http://t.co/JK8ZTaMria</a> &lt;3 <a href="http://t.co/tPJOHsGYgj">pic.twitter.com/tPJOHsGYgj</a></p>&mdash; Yeoman (@yeoman) <a href="https://twitter.com/yeoman/statuses/477493274509602816">June 13, 2014</a></blockquote>

## Misc

* [A Retired Boeing 727 Converted Into a Home in the Woods](http://www.thisiscolossal.com/2014/06/a-retired-boeing-727-converted-into-a-home-in-the-woods/)

  > ![](http://www.thisiscolossal.com/wp-content/uploads/2014/06/retired-boeing-727-recycled-home-bruce-campbell-1.jpg)
]]></content:encoded>
</item><item>
  <title>npmawesome-logo-512x512</title>
  <wp:post_parent>98</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/npmawesome-logo-512x512.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-06-17 10:36:34</wp:post_date>
  <wp:post_date_gmt>2014-06-17 17:36:34</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>99</wp:post_id>
  <title><![CDATA[Comparing Winston and Bunyan Node.js Logging]]></title>
  <link>http://npmawesome.com/2014-06-24-comparing-winston-and-bunyan-node-js-logging/</link>
  <pubDate>Tue Jun 24 2014 17:27:49 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-06-24-comparing-winston-and-bunyan-node-js-logging/</guid>
  <description>Comparing Winston and Bunyan Node.js Logging</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-06-24 17:27:49</wp:post_date>
  <wp:post_date_gmt>2014-06-25 00:27:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>comparing-winston-and-bunyan-node-js-logging</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Comparing Winston and Bunyan Node.js Logging]]></wp:meta_value>
  </wp:postmeta>  <content:encoded><![CDATA[[partner strongloop]

If you are writing a Node.js application, chances are you going to have some kind of API end points to be consumed by your frond end or expose data for others to take in. This is where [RESTful APIs](http://en.wikipedia.org/wiki/Representational_state_transfer) come in. And now you have a dilemma - what tools to use and what approach to take? So many choices...

<img src="http://npmawesome.com/wp-content/uploads/2014/06/arnold.jpg" width="100%"/>

Lets talk about logging, shall we? Arnold over here carrying a giant log feels like an appropriate intro to this article in which we are going to talk about popular Node.js logging frameworks.

If you are writing any kind of long living application, detailed logging is paramount to spotting problems and debugging. Without logs you would have few ways of telling how is your application behaving, are there errors, what's the performance like, is it doing anything at all or is it just falling over every other request when you aren't looking at it.

<!--more-->

## Requirements

Lets identify a few requirements which we can use to pit the frameworks against each other. Some of these requirements are pretty trivial, others are not so much.

1. Time stamp each log line. This one is pretty self explanatory - you should be able to tell when each log entry occured.
2. Logging format should be easily digestible by humans as well as machines.
3. Allows for multiple configurable destination streams. For example, you might be writing trace logs to one file but when an error is encountered, write to the same file, then into error file and send an email at the same time.

Based on these requirements (and popularity) there are two logging frameworks for Node.js worth checking out, in particular:

* [Bunyan] by [Trent Mick].
* [Winston] is part of the [Flatiron] framework and sponsored by [nodejitstu].

## console

Before we get to [Bunyan] and [Winston], lets look at our old friend `console`. The most rudimentary type of logging you could do is using `console.log` and `console.error` methods. This is better than nothing but hardly the best solution. Console writes to STDOUT and STDERR respectively. There's a very interesting [caveat](http://nodejs.org/api/stdio.html) to know when it comes to `console` methods in Node.js.

> The console functions are synchronous when the destination is a terminal or a file (to avoid lost messages in case of premature exit) and asynchronous when it's a pipe (to avoid blocking for long periods of time).
>
> That is, in the following example, stdout is non-blocking while stderr is blocking:
>
>```javascript
 $ node script.js 2> error.log | tee info.log
```

This is basically a "roll your own" logging approach. It is fully manual, you have to come up with your own format and basically manage everything yourself. This is time consuming, prone to errors and you probably want to focus on your application features instead. Considering that there are open source logging libraries out there which are actively maintained, this is not worth the effort if you are trying to focus on delivering features.

How does `console` satisfy our requirements? Well, out of the box it does nothing in that regard but with some elbow grease you can get everything implemented yourself.

## Winston

<img src="http://npmawesome.com/wp-content/uploads/2014/06/lenny-henry.jpg" width="100%"/>

One of the most popular Node.js logging frameworks is [Winston]. It's designed to be a simple and universal logging library with support for multiple transports (a transport in [Winston]'s world is essentially a storage device, eg where your logs end up being stored). Each instance of a [Winston] logger can have multiple transports configured at different logging levels.

### Installation

```javascript
npm install winston
```

### Usage

The most basic [Winston] usage consists of calling the default instance that is exported from the `winston` module.

```javascript
var winston = require('winston');

winston.log('info', 'Hello distributed log files!');
winston.info('Hello again distributed logs');
```

The above is the same as:

```javascript
var winston = require('winston');
var logger = new winston.Logger();

logger.log('info', 'Hello distributed log files!');
logger.info('Hello again distributed logs');
```

Both examples will produce the following output:

```javascript
info: Hello distributed log files!
info: Hello again distributed logs
```

### Formatting

Personally I'm a little bit puzzled by the lack of details in the default formatter. There's no time stamp, machine name or process ID and the output format is mildly suitable for machine parsing. Having said that you can get all the information out yourself with just a little of extra work.

```javascript
winston.info('Hello world!', {timestamp: Date.now(), pid: process.pid});
```

Produces the following output, which is more informative, but still not very much suitable for machine parsing.

```javascript
info: Hello world! timestamp=1402286804314, pid=80481
```

Finally, the `log` method provides the same string interpolation methods as `util.format`, for example:

```javascript
winston.log('info', 'test message %d', 123);
```

### Transporters

[Winston] could be configured via constructor options or exposed method which are very thoroughly documented on the [GitHub page][Winston]. Most of the configuration typically revolves around various transports. Out of the box [Winston] comes with console and file based transports and if you have a look on [npmjs.org](https://www.npmjs.org/search?q=winston) you will see that there are community modules for pretty much everything imaginable ranging from MongoDB to commercial third party platforms.

One of the more notable transporters in my opinion is [winston-irc](https://github.com/nathan7/winston-irc) by [Nathan Zadoks](https://github.com/nathan7) which you can use to log errors to your team's IRC channel. I can see this coming in very handy.

```javascript
winston.add(require('winston-irc'), {
  host: 'irc.somewhere.net',
  nick: 'logger',
  pass: 'hunter2',
  channels: {
    '#logs': true,
    'sysadmin': ['warn', 'error']
  }
});
```

### Multiple Loggers

Once your application starts to grow, chances are you will want to have multiple loggers with different configurations where each logger is responsible for a different feature area (or category). [Winston] supports that in two ways: through `winston.loggers` and instances of `winston.Container`. In fact, `winston.loggers` is just a predefined instance of `winston.Container`:

```javascript
winston.loggers.add('category1', {console: { ... }, file: { ... }});
winston.loggers.add('category2', {irc: { ... }, file: { ... }});
```

Now that your loggers are configured you can require [Winston] in any file in your application and access these pre-configured loggers:

```javascript
var category1 = winston.loggers.get('category1');
category1.info('logging from your IoC container-based logger');
```

### More

This is most basic [Winston] usage, but there are quite a few other features, most notably:

* [Profiling](https://github.com/flatiron/winston#profiling)
* [String interpolation](https://github.com/flatiron/winston#string-interpolation)
* [Querying](https://github.com/flatiron/winston#querying-logs) and [streaming](https://github.com/flatiron/winston#streaming-logs)
* [Handling exeptions](https://github.com/flatiron/winston#exceptions)

## Bunyan

<img src="http://npmawesome.com/wp-content/uploads/2014/06/paul_bunyan_by_brendancorris-d3are2a.jpg" width="100%"/>

<sub><sup>[Illustration by Brendan Corris](http://brendancorris.deviantart.com/art/Paul-Bunyan-199472626)</sup></sub>

[Bunyan] by [Trent Mick] is another logging framework that I think should be considered. [Bunyan] takes a slightly different approach to logging than [Winston] making its mission to provide structured, machine readable logs as first class citizens. As a result, a log record from [Bunyan] is one line of `JSON.stringify` output with some common names for the requisite and common fields for a log record.

### Installation

```javascript
npm install bunyan
```

### Usage

```javascript
var bunyan = require('bunyan');
var log = bunyan.createLogger({name: 'myapp'});
log.info('hi');
log.warn({lang: 'fr'}, 'au revoir');
```

Which will produce the following output:

```javascript
{"name":"myapp","hostname":"pwony-2","pid":12616,"level":30,"msg":"hi","time":"2014-05-26T17:58:32.835Z","v":0}
{"name":"myapp","hostname":"pwony-2","pid":12616,"level":40,"lang":"fr","msg":"au revoir","time":"2014-05-26T17:58:32.837Z","v":0}
```

As you can see, out of the box [Bunyan] is not very human friendly, however most modern logging systems understand JSON format natively, which means there's little to do here to feed the logs elsewhere for storage and processing. By default, there's quite a bit of meta data included with each message, such as time stamp, process ID, host name and application name.

Of course, us humans, don't find this very digestible and to address that there's a `bunyan` CLI tool to which takes in JSON via STDIN. Here's the same example piped through `bunyan`:

```javascript
node example.js | bunyan
```

Produces the following output:

```javascript
[2014-05-26T18:03:40.820Z]  INFO: myapp/13372 on pwony-2: hi
[2014-05-26T18:03:40.824Z]  WARN: myapp/13372 on pwony-2: au revoir (lang=fr)
```

The main benefit here is that you don't need to reconfigure anything for development environment, all you have to do is pipe to `bunyan`. Checkout the [GitHub page](https://github.com/trentm/node-bunyan#cli-usage) for more documentation on the CLI tool.

### JSON

One of the key differences between [Bunyan] and [Winston] is that [Bunyan] works really well when you want to log complex contexts and objects. Lets look at this line and its output from the example above:

```javascript
log.warn({lang: 'fr'}, 'au revoir');
{"name":"myapp","hostname":"pwony-2","pid":12616,"level":40,"lang":"fr","msg":"au revoir","time":"2014-05-26T17:58:32.837Z","v":0}
```

You can see that `{lang: 'fr'}` got merged with the main log object and `au revoir` became `msg`. Now picture something like this:

```javascript
log.info(user, 'registered');
log.info({user: user}, 'registered');
```

Which produces:

```javascript
{"name":"myapp","hostname":"pwony-2","pid":14837,"level":30,"username":"alex","email":"...@gmail.com","msg":"registered","time":"2014-05-26T18:27:43.530Z","v":0}
{"name":"myapp","hostname":"pwony-2","pid":14912,"level":30,"user":{"username":"alex","email":"...@gmail.com"},"msg":"registered","time":"2014-05-26T18:28:19.874Z","v":0}
```

Or when piped through `bunyan`:

```javascript
[2014-05-26T18:28:42.455Z]  INFO: myapp/14943 on pwony-2: registered (username=alex, email=...@gmail.com)
[2014-05-26T18:28:42.457Z]  INFO: myapp/14943 on pwony-2: registered
    user: {
      "username": "alex",
      "email": "...@gmail.com"
    }
```

The beauty of this approach will become clear when you we look at child loggers.

### Child Loggers

[Bunyan] has a concept of child loggers, which allows to specialize a logger for a sub-component of your application, i.e. to create a new logger with additional bound fields that will be included in its log records. A child logger is created with `log.child(...)`. This comes in incredibly handy if you want to have scoped loggers for different components in your system, requests, or just plain function calls. Lets look at some code.

Imagine you want to carry request ID through out all log lines for a given request so that you can tie them all together.

```javascript
var bunyan = require('bunyan');
var log = bunyan.createLogger({name: 'myapp'});

app.use(function(req, res, next) {
  req.log = log.child({reqId: uuid()});
  next();
});

app.get('/', function(req, res) {
  req.log.info({user: ...});
});
```

The `req.log` logger will always keep its context passed to the `log.child()` function and merge it with all subsequent calls, so the output would look something like this:

```javascript
{"name":"myapp","hostname":"pwony-2","pid":14837,"level":30,"reqId":"XXXX-XX-XXXX","user":"...@gmail.com","time":"2014-05-26T18:27:43.530Z","v":0}
```

### Serializers

Two problems arise when [Bunyan] tries to stringify entire objects:

1. Circular references. [Winston] is a little bit smarter here and detects circular references when they occur (however the result output `$ref=$` isn't very useful).
2. Unwanted noise. It feels to me that because objects are first class in [Bunyan] it's much easier to get into a habit of just dumping everything into the log.

To help deal with both, [Bunyan] has a concept of [serializers](https://github.com/trentm/node-bunyan#serializers) that are basically transformation functions which let you scope down commonly passed objects to just the fields that you are interested in:

```javascript
function reqSerializer(req) {
  return {
    method: req.method,
    url: req.url,
    headers: req.headers
  }
}

var log = bunyan.createLogger({name: 'myapp', serializers: {req: reqSerializer}});
log.info({req: req});
```

Now trying to log `req` object would just include the three fields that we are interested in.

### Streams

[Streams](https://github.com/trentm/node-bunyan#streams) in [Bunyan] are the same thing as transporters in [Winston] - it's a way to send your logs elsewhere for display and storage purposes. [Bunyan] uses a [Writable Stream](http://nodejs.org/docs/latest/api/all.html#writable_Stream) interface with some additional attributes. A [Bunyan] logger instance has one or more streams and are specified with the `streams` option:

```javascript
var log = bunyan.createLogger({
  name: "foo",
  streams: [
    {
      stream: process.stderr,
      level: "debug"
    },
    ...
  ]
});
```

### More

Here are a few more notable things to explore in [Bunyan]:

* [Runtime log snooping via Dtrace support](https://github.com/trentm/node-bunyan#dtrace-support)
* [Log record fields](https://github.com/trentm/node-bunyan#log-record-fields)

## What's next?

[Winston] and [Bunyan] are both very mature and established logging frameworks and are very much on par in terms of features. [Winston] has a lot of community support with various logging modules. [Bunyan] makes it easy out of the box to parse logs but leaves consumption up the user (generally syslog drain works pretty well here). I feel it all comes down to preference and how easy it is to integrate with your stack.

[Winston]: https://github.com/flatiron/winston
[Flatiron]: http://flatironjs.org/
[nodejitstu]: http://nodejitsu.com

[Bunyan]: https://github.com/trentm/node-bunyan
[Trent Mick]: https://github.com/trentm]]></content:encoded>
</item><item>
  <title>arnold</title>
  <wp:post_parent>99</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/winston-and-bunyan/arnold.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-06-24 17:27:49</wp:post_date>
  <wp:post_date_gmt>2014-06-25 00:27:49</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>lenny-henry</title>
  <wp:post_parent>99</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/winston-and-bunyan/lenny-henry.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-06-24 17:27:49</wp:post_date>
  <wp:post_date_gmt>2014-06-25 00:27:49</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>paul_bunyan_by_brendancorris-d3are2a</title>
  <wp:post_parent>99</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/winston-and-bunyan/paul_bunyan_by_brendancorris-d3are2a.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-06-24 17:27:49</wp:post_date>
  <wp:post_date_gmt>2014-06-25 00:27:49</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>100</wp:post_id>
  <title><![CDATA[songbird]]></title>
  <link>http://npmawesome.com/2014-06-26-songbird/</link>
  <pubDate>Thu Jun 26 2014 09:43:14 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-06-26-songbird/</guid>
  <description>Chain promises easily in Node.js</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-06-26 09:43:14</wp:post_date>
  <wp:post_date_gmt>2014-06-26 16:43:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>songbird</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Chain promises easily in Node.js]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[songbird]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d68]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[duereg/songbird]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d69]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d6a]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

I'm always on a look out for interesting modules and unusual solutions. When working with [promises] in Node.js, there's a constant friction between callbacks that is Node's defacto interface and your desire to use [promises] throughout your entire project. The now famous [Bluebird] \(Github: [petkaantonov/bluebird], License: MIT) library has a good collection of [helper methods][1] to assist you in going to and from callback world.

<!--more-->

Over time I began to feel the need for a simple helper function to automagically integrate a callback style function into [promises] control flow. Calling `promisify` each time on a function isn't super fun and `promisifyAll` feels a little odd to me and so yesterday I set out to look for a module that implements something like this:

```javascript
Promise
  .call(fs.readFile, 'path/to/file.txt', 'utf8')
  .then(console.log)
```

[author photo]
Not surprisingly somebody else has already thought of this. I found the [module full] module by [author] that implements a very clean interface for converting any callback style function to a return a promise instead. [module] does what is generally considered a no-no - it extends `Object` and `Function` prototype which gives you a magic `promise` property on every function. [module] also wraps the [Bluebird] library so you don't have to install both. Lets check it out:

```bash
[module install]
```

## Usage

```javascript
var Promise = require('songbird');
var fs = require('fs');

// callback API
fs.readFile('./package.json', 'utf8', function(err, pkg) {
  console.log('callbacks', pkg);
});

// songbird API
fs.promise.readFile('./package.json', 'utf8').then(function(pkg) {
  console.log('promise', pkg);
});

Promise
  .join(
    fs.promise.readFile('./package.json', 'utf8'),
    fs.promise.readFile('./songbird.js', 'utf8')
  )
  .spread(function(pkg, songbird) {
    console.log('package.json length is', pkg.length);
    console.log('songbird.js length is', songbird.length);
  });
```

## Closing thoughts

While I think it's a great idea to mix in the `promise` property to `Object` and `Function`, however with great power comes great responsibility. I strongly urge against using [module] in modules that you would distribute on npm because it would have a very big side effect on anyone who dares to install your code. However, when used on a project that isn't made available publicly, [module] would be a great asset.

Check out [source code](https://github.com/npmawesome/example-songbird) for this article on GitHub and an [interactive example](http://runnable.com/U575XtnsLhN9grRU) on Runnable. Let us know what you think! It's not every day you encounter a module that boldly extends `Object` and `Function`.

[promises]: http://promises-aplus.github.io/promises-spec/
[1]: https://github.com/petkaantonov/bluebird/blob/master/API.md#promisification
[Bluebird]: http://browsenpm.org/package/bluebird
[petkaantonov/bluebird]: https://github.com/petkaantonov/bluebird]]></content:encoded>
</item><item>
  <wp:post_id>101</wp:post_id>
  <title><![CDATA[Links for June 30, 2014]]></title>
  <link>http://npmawesome.com/2014-06-30-links/</link>
  <pubDate>Mon Jun 30 2014 09:43:28 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-06-30-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-06-30 09:43:28</wp:post_date>
  <wp:post_date_gmt>2014-06-30 16:43:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://npmawesome.com/wp-content/uploads/2014/06/docker.png" class="hide-on-mobile" width="150" align="right"/>

## Articles

* [Error Handling in Node.js](http://www.joyent.com/developers/node/design/errors)

  > Error handling is a pain, and it's easy to get by for a long time in Node.js without dealing with many errors correctly. But building robust Node.js apps requires dealing properly with errors, and it's not hard to learn how.

* [MongoDB and Amazon Web Services: Deploying for High Availability](http://www.slideshare.net/mongodb/mongodb-and-amazon-web-services-deploying-for-high-availability-31642339)

  > Best practices are meant to be a sensible starting point

* [CSS: The Good Parts](http://blog.ponyfoo.com/2014/05/17/css-the-good-parts)

  > This style guide is a jab at solving collisions between CSS class names, and issues that ultimately lead to confusion, having to use !important rules, copying and pasting style declarations, and other awful aspects of CSS developments.

* [Emulators written in JavaScript](http://www.cambus.net/emulators-written-in-javascript/)

  > This list started as a compilation of JavaScript emulators posted to Echo JS over the years.

* [Develop a NodeJS App With Docker](http://blog.abhinav.ca/blog/2014/06/17/develop-a-nodejs-app-with-docker/)

  > This is the first of two posts. This post covers a somewhat detailed tutorial on using Docker as a replacement for Vagrant when developing a Node app using the Express framework. To make things a bit non-trivial, the app will persist session information in Redis using the connect-redid middleware.

* [Candy Japan crosses $10000 MRR](http://www.candyjapan.com/candy-japan-crosses-10000-mrr)

  > Out of that $10k / month revenue of course not all (not even most) is profit. Compared to a SaaS, the costs are very high, but I've carved enough profit margin to reach an income level similar to a Japanese salaryman now.

<!--more-->

## Github

* [flow.js](https://github.com/flowjs/flow.js) is a JavaScript library providing multiple simultaneous, stable, fault-tolerant and resumable/restartable file uploads via the HTML5 File API.

## Startups

* [Counterparty](https://www.counterparty.co) is a global marketplace and financial platform built on Bitcoin, which makes powerful peer-to-peer financial instruments available to anyone with an Internet connection.
* [bugsnap](https://bugsnag.com/)’s cross platform error monitoring helps you ship with confidence.
* [Learnable](https://learnable.com/) is a resource to learn web development and design from the experts.
* [Celery](https://www.trycelery.com/) is the easiest way to accept orders now and charge when you're ready.

## YouTube

* [Amazon DynamoDB Design Patterns for Ultra-High Performance Apps](https://www.youtube.com/watch?v=Dh8kp1AcRg0)

## Unix

* [HippyVM](http://hippyvm.com/) on average is 7.3x faster than stock PHP and 2x faster than Facebook’s HHVM.

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>New <a href="https://twitter.com/hashtag/dockercon?src=hash">#dockercon</a> 14 video: &quot;Automated <a href="https://twitter.com/chef">@chef</a> cookbook testing with <a href="https://twitter.com/droneio">@droneio</a> and <a href="https://twitter.com/github">@github</a>&quot; <a href="http://t.co/7h13hXi2V3">http://t.co/7h13hXi2V3</a> by <a href="https://twitter.com/pczarkowski">@pczarkowski</a> from <a href="https://twitter.com/Rackspace">@Rackspace</a></p>&mdash; Docker (@docker) <a href="https://twitter.com/docker/statuses/482242087811702784">June 26, 2014</a></blockquote>
]]></content:encoded>
</item><item>
  <title>docker</title>
  <wp:post_parent>101</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/docker.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-06-30 09:43:28</wp:post_date>
  <wp:post_date_gmt>2014-06-30 16:43:28</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>102</wp:post_id>
  <title><![CDATA[Ten open source Node.js apps]]></title>
  <link>http://npmawesome.com/2014-07-01-ten-open-source-nodejs-apps/</link>
  <pubDate>Tue Jul 01 2014 10:28:58 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-07-01-ten-open-source-nodejs-apps/</guid>
  <description>Ten open source Node.js apps to discover, review and learn from!</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ten-open-source-nodejs-apps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Ten open source Node.js apps to discover, review and learn from!]]></wp:meta_value>
  </wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

In this article we are going to quickly look at 10 open source Node.js applications. I want to shed some light on a few awesome Node.js projects for the sake of exposure and hope that you (just like me) would read and learn from their source code even if the applications themselves are of no interest to you.

<!--more-->

## Strider CD

[Strider CD](http://browsenpm.org/package/strider) [GitHub: [Strider-CD/strider](https://github.com/Strider-CD/strider), License: BSD] is Continuous Deployment / Continuous Integration platform.

Getting started is very simple. Simply add your GitHub projects to strider, and relax as the tight integration means your tests will run on every commit. [Checkout the YouTube demo](https://www.youtube.com/watch?v=whVH24yQSHI) for a 4 minute introduction.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/strider.jpg" width="100%" />

## Popcorn Time

Popcorn Time [GitHub: [popcorn-official/popcorn-app](https://github.com/popcorn-official/popcorn-app), License: GPL] allows any computer user to watch movies easily streaming from torrents, without any particular knowledge. It is, in my opinion, the most interesting applications technology wise in this list with a good amount of [controversy](https://torrentfreak.com/popcorn-time-devs-drop-like-flies-but-no-one-will-talk-140420/) to boot.

It's a desktop app build on top of the node-webkit [GitHub: [rogerwang/node-webkit](https://github.com/rogerwang/node-webkit), License: MIT] that is able to stream and play a torrent movie practicaly in real time... and it's all JavaScript. Seriously cool stuff!

<img src="http://npmawesome.com/wp-content/uploads/2014/07/popcorn1.png" width="100%" />

<img src="http://npmawesome.com/wp-content/uploads/2014/07/popcorn2.png" width="100%" />

## MediacenterJS

MediacenterJS [GitHub: [jansmolders86/mediacenterjs](https://github.com/jansmolders86/mediacenterjs), License: GPL] is a media center (like for instance [XBMC](http://xbmc.org/)) running completely from the comfort of your browser. The server application runs on Windows, MAC and Linux systems, the client runs in every modern browser.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/mediacenterjs.png" width="100%" />

## KiwiIRC

[module name="kiwiirc" displayName="KiwiIRC" github="prawnsalad/KiwiIRC" license="AGPL" full] is a fully featured IRC client that can be extended to suit almost any needs. Using the web application is extremly simple even without any IRC knowledge as all the common needs are built directly into the UI.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/kiwiirc.png" width="100%" />

## Slate

Slate [GitHub: [slate/slate](https://github.com/slate/slate), License: MIT] is a modern minimalistic IRC client, completely extensible through plugins and built with web technologies and for OSX, Linux, and eventually Windows.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/slate.png" width="100%" />

## David

[module name="david" displayName="David" github="alanshaw/david-www" license="MIT" full] is a web service that tells you when your project NPM dependencies are out of date.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/david.png" width="100%" />

## Shields

[module name="gh-badges" displayName="Shields" github="badges/shields" license="CC0" full] is a service that provides legible & concise status badges for third-party codebase services, like those that you see aplenty all over GitHub.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/shields.png" width="100%" />

## I Love Open Source

I Love Open Source [GitHub: [codio/iloveopensource](https://github.com/codio/iloveopensource), License: MIT] is a way of encouraging users of Open Source code to express their gratitude through a simple acknowledgement page. Along the way, they are gently offered a chance to donate cash or just thanks.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/iloveopensource.png" width="100%" />

## browsenpm.org

[browsenpm.org](http://browsenpm.org/package/browsenpm) [GitHub: [nodejitsu/browsenpm.org](https://github.com/nodejitsu/browsenpm.org), License: MIT] allows you to browse packages, users, code, stats and more the public npm registry in style.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/browsenpm.png" width="100%" />

## npmjs.org

[npmjs.org](http://browsenpm.org/package/npm-www) [GitHub: [npm/npm-www](https://github.com/npm/npm-www), License: BSD] is the source for npmjs.org that you probably have seen many times before but might have not realized was open for anyone to see and contribute to.

<img src="http://npmawesome.com/wp-content/uploads/2014/07/npmjs.png" width="100%" />

Have you seen other interesting applications written in Node.js? Please post them in comments!]]></content:encoded>
</item><item>
  <title>strider</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/strider.jpg</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>popcorn1</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/popcorn1.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>popcorn2</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/popcorn2.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>mediacenterjs</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/mediacenterjs.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>kiwiirc</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/kiwiirc.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>slate</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/slate.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>david</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/david.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>shields</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/shields.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>iloveopensource</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/iloveopensource.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>browsenpm</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/browsenpm.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <title>npmjs</title>
  <wp:post_parent>102</wp:post_parent>
  <wp:attachment_url>http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/npmjs.png</wp:attachment_url>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_date>2014-07-01 10:28:58</wp:post_date>
  <wp:post_date_gmt>2014-07-01 17:28:58</wp:post_date_gmt>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
</item><item>
  <wp:post_id>103</wp:post_id>
  <title><![CDATA[Links for July 3, 2014]]></title>
  <link>http://npmawesome.com/2014-07-03-links/</link>
  <pubDate>Thu Jul 03 2014 10:25:02 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-07-03-links/</guid>
  <description>Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-07-03 10:25:02</wp:post_date>
  <wp:post_date_gmt>2014-07-03 17:25:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Nerd links for the day, videos, GitHub projects, talks, articles and other stuff.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="nerd-links"><![CDATA[Nerd Links]]></category>  <content:encoded><![CDATA[<img src="http://bost.ocks.org/mike/algorithms/starry-night-detail.jpg" class="hide-on-mobile" width="100%" />

## Articles

* [Visualizing Algorithms](http://bost.ocks.org/mike/algorithms/)

  > Algorithms are a fascinating use case for visualization. To visualize an algorithm, we don’t merely fit data to a chart; there is no primary dataset. Instead there are logical rules that describe behavior. This may be why algorithm visualizations are so unusual, as designers experiment with novel forms to better communicate. This is reason enough to study them.

* [The introduction to Reactive Programming you've been missing](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)

  > The hardest part of the learning journey is thinking in FRP. It's a lot about letting go of old imperative and stateful habits of typical programming, and forcing your brain to work in a different paradigm. I haven't found any guide on the internet in this aspect, and I think the world deserves a practical tutorial on how to think in FRP, so that you can get started. Library documentation can light your way after that. I hope this helps you.

* [How Psychedelics Saved My Life](http://reset.me/story/howpsychedelicssavedmylife)

  > I founded the website reset.me, to produce and aggregate journalism on consciousness, natural medicines, and therapies.  Psychedelic explorer Terrence McKenna compared taking psychedelics to hitting the ‘reset button’ on your internal hard drive, clearing out the junk, and starting over.  I created reset.me to help connect those who need to hit the ‘reset button’ in life with journalism covering the tools that enable us to heal.

* [AngularJS - Providers](http://www.thinkster.io/angularjs/eIaGNOAlOk/angularjs-providers)

  > Factories are a common paradigm in Angular that allow you to configure a function that returns an object which can be then injected into controllers.

* [Moving Atom To React](http://blog.atom.io/2014/07/02/moving-atom-to-react.html)

  > Performance is a top priority for the Atom team, and recently we’ve been focusing on making basic text editing smoother and more responsive. After some initial incremental progress, we decided to take a step back and rewrite the editor component's view layer with a superior framework and a better understanding of the problem.

<!--more-->

## Github

* [Ice](https://github.com/NYTimes/ice) is a track changes implementation, built in javascript, for anything that is contenteditable on the web. Conceived by the CMS Group at The New York Times, ice is powering the editor used for writing articles in the newsroom.
* [Octicons](http://octicons.github.com/) - github icons!

## Startups

* [Craft Coffee](https://www.craftcoffee.com) - the world's best coffee, expertly chosen and delivered to your doorstep.
* [Candy Japan](http://www.candyjapan.com/) - Japanese candy surprises in your mailbox twice a month. Free shipping even to United States.
* [Parkopedia](http://www.parkopedia.com) is a wikipedia for parking - add, edit and review parking information.

## YouTube

* [API Testing and Monitoring with Frisby.js - SF Node.JS talk by Garland Kan](https://www.youtube.com/watch?v=8zcWQVdh3SQ)

  > An increasing number of applications are built with APIs for internal services communicating with each other and an external API. These critical APIs must be monitored. In this talk, Garland Kan (Engineer, Algorithms.io and AutoDevBot.com), explains how engineers can use Frisby.JS as an API testing and monitoring tool.

## Apps

* [Bartender](http://www.macbartender.com/) lets you organize your menu bar apps, by hiding them, rearranging them, or moving them to Bartender's Bar. You can display the full menu bar, set options to have menu bar items show in the menu bar when they have updated, or have them always visible in Bartender's Bar.

## Unix

* `cd -` to go back to the previous directory where you just were.

## Twitter

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Google Maps | AngularJS directives for the Google Maps Javascript API - <a href="http://t.co/WzfDvtNgAb">http://t.co/WzfDvtNgAb</a> <a href="http://t.co/y9Gqaa0vTh">pic.twitter.com/y9Gqaa0vTh</a></p>&mdash; Angular-js Directive (@ng_directives) <a href="https://twitter.com/ng_directives/statuses/482169124840566785">June 26, 2014</a></blockquote>

## Misc

* [Instructables Cocktails](http://www.instructables.com/tag/type-id/category-food/channel-cocktails-and-mocktails/)]]></content:encoded>
</item><item>
  <wp:post_id>104</wp:post_id>
  <title><![CDATA[mag]]></title>
  <link>http://npmawesome.com/2014-07-08-mag/</link>
  <pubDate>Tue Jul 08 2014 10:02:58 GMT-0700</pubDate>
  <dc:creator><![CDATA[evlasenko]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-07-08-mag/</guid>
  <description>Mag is the streaming logger for Node.js</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-07-08 10:02:58</wp:post_date>
  <wp:post_date_gmt>2014-07-08 17:02:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>mag</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-evlasenko"><![CDATA[evlasenko]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[Mag is the streaming logger for Node.js]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[mag]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d6b]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[mahnunchik/mag]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d6c]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[MIT]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d6d]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[author photo]
My name is [author] and I want to introduce my logging module called [module full]. There are lots of full-featured logging frameworks such as [module name="bunyan" displayName="Bunyan" github="trentm/node-bunyan" license="MIT" full] [module name="node-bunyan" displayName="Winston" github="flatiron/winston" license="MIT" full] or [module name="log4js" github="nomiddlename/log4js-node" license="MIT" full]. Why write another one? Personally, I subscribe to the [twelve-factor app methodology](http://12factor.net) and more specifically [the part about logs](http://12factor.net/logs). Another cool thing about `mag` is that it’s fully built on [Streams3](https://www.npmjs.org/package/readable-stream).

<!--more-->

## Installation

```bash
[module install]
```

## Twelve-factor app logging

* Logs are the stream of time-ordered events.
* App never concerns itself with routing or storage of its output stream.
* App should not attempt to write to or manage logfiles.
* App should write its event stream, unbuffered, to stdout.

## Here’s how to use Mag

### Step 1

When you start developing an application you do not want to spend time configuring the logger, you just want be building features. You can just require `mag` (one line more than console usage =) and use it:

```javascript
var logger = require('mag')();
logger.info('my great application is running!');

// 01:27:36.427 <INFORMATIONAL> my great application is running!
```

You get a well formatted message with a timestamp. Done!

### Step 2

When your application begins to grow and you want to visually separate messages from different parts of application, you can start using the namespaces feature of `mag`.

```javascript
var mag = require('mag');

var logger = mag('my-app');
var libLogger = mag('my-lib');

logger.info('my great application is running');
libLogger.debug('my library is running too');

// 22:36:24.245 [my-app] <INFORMATIONAL> my great application is running
// 22:36:24.246 [my-lib] <DEBUG> my library is running too
```

### Step 3

When your application is finally ready for production, it is time to think about the logging format. Should it be text line by line? Maybe JSON?. Should entire error stack be printed or only a few lines? At this time you can require `mag-hub` module and configure the message format once in your application:

```javascript
var hub = require('mag-hub');

// Formatters
var info = require('mag-process-info');
var format = require('mag-format-message');
var colored = require('mag-colored-output');

var myCustomFormatter = require('./my-custom-formatter.js');

hub.pipe(info())
  .pipe(format())
  .pipe(myCustomFormatter())
  .pipe(colored())
  .pipe(process.stdout);
```

## How it works

1. `mag` requires `mag-stream` module as a output for its log objects
1. `mag-stream` tries to require top level `mag-hub` module
1. if it fails then `mag-stream` requires `mag-fallback`
1. `mag-fallback` is the fallback formatter which is essentially the same as using a `console` with a timestamp.

Mag does not come bundled with any transports, even formatters are in separate modules. You could potentially make log management based on mag, but I recommend sticking with the [twelve-factor app](http://12factor.net/logs) methodology again and keep it simple. Use a log collector from Splunk or Loggly to drain the syslog instead.

## Related Modules

* [module name="mag-logger-facade" github="mahnunchik/mag-logger-facade" license="MIT" full]
* [module name="mag-stream" github="mahnunchik/mag-stream" license="MIT" full]
* [module name="mag-hub" github="mahnunchik/mag-hub" license="MIT" full]
* [module name="mag-fallback" github="mahnunchik/mag-fallback" license="MIT" full]]]></content:encoded>
</item><item>
  <wp:post_id>105</wp:post_id>
  <title><![CDATA[colorguard]]></title>
  <link>http://npmawesome.com/2014-07-09-colorguard/</link>
  <pubDate>Wed Jul 09 2014 10:04:58 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-07-09-colorguard/</guid>
  <description>CSS Colorguard helps you maintain the color set that you want, and warns you when colors you've added are too similar to ones that already exist.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-07-09 10:04:58</wp:post_date>
  <wp:post_date_gmt>2014-07-09 17:04:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>colorguard</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[CSS Colorguard helps you maintain the color set that you want, and warns you when colors you've added are too similar to ones that already exist.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[colorguard]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d6e]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[SlexAxton/css-colorguard]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d6f]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[Apache 2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d70]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

[author photo]
When a small web project gains traction and more people join and begin editing the CSS files, it becomes progressively more difficult to keep everything consistent. Creative people hand off a new element style to a developer who just joined the team. Our protagonist has been around the block and promptly opens up a favorite color picker and grabs the colors from the JPEG. It looks good. Next day same things happens, and then again and again.

In a short amount of time there are now 20 color values in the CSS that are all factually different from each other yet represent the same color visually. [module full] by [author] helps you maintain the color set that you want, and warns you when colors you've added are too similar to ones that already exist.

<!--more-->

```bash
[module install]
```

## Usage

```javascript
# Just regular
colorguard --file style.css

# pipe a file
cat file.css | colorguard

# Threshold is available via command line
colorguard --file style.css --threshold 3

# The other options are too hard to type, so just pass it a json object
# with `ignore` or `whitelist` properties (overrides `--threshold option`)
colorguard --file style.css --options colorguard.json

# Change the output type to full json (includes stats)
colorguard --file style.css --format json
```

Example output

```bash
$ colorguard --file test/fixtures/simple.css
Collision: #020202, #000000
  - #020202 [line: 2] is too close (0.3146196209793196) to #000000 [line: 2, 3, 7, 12, 13, 16, 17]
Collision: #020202, #010101
  - #020202 [line: 2] is too close (0.1574963682909058) to #010101 [line: 20]
Collision: #000000, #010101
  - #000000 [line: 2, 3, 7, 12, 13, 16, 17] is too close (0.15712369811016996) to #010101 [line: 20]

$ cat test/fixtures/simple.css | colorguard --format json
{"collisions":[{"colors":[{"rgb":"#020202","lines":[2]},{"rgb":"#000000","lines":[2,3,7,
```

## API

```javascript
var colorguard = require('colorguard');
var fs = require('fs');
var css = fs.readFileSync('./file.css', 'utf8');

var output = colorguard.inspect(css, {
  // 0 through 100. Lower is more similar. Anything below 3 warns you.
  // 3 is the default threshold, but that's mostly personal opinion
  threshold: 3,

  // This color is just ignored entirely (use with caution)
  ignore: ["#030303"],

  // These color combinations are ignored (usually use this)
  whitelist: [["#000000", "#010101"]]
});
```

## Build Tools

[module] can also be used in conjunction with [module name="gulp" displayName="Gulp" github="gulpjs/gulp" license="MIT" full], [module name="grunt" displayName="Grunt" github="gruntjs/grunt" license="MIT" full] and [module name="broccoli" displayName="Broccoli" github="broccolijs/broccoli" license="MIT" full] build systems:

* [module name="gulp-colorguard" github="pgilad/gulp-colorguard" license="MIT" full]
* [module name="broccoli-colorguard" github="SlexAxton/broccoli-colorguard" license="Apache 2" full]
* [module name="grunt-colorguard" github="elliottwilliams/grunt-colorguard" license="MIT" full]

## What Else?

Checkout the [runnable](http://runnable.com/U72CW5aEx3ISuIdl/colorguard-module-example-for-node-js-for-nodejitsu-npmawesome-css-and-colors) example and [github example repository](https://github.com/npmawesome/example-colorguard).]]></content:encoded>
</item><item>
  <wp:post_id>106</wp:post_id>
  <title><![CDATA[colorguard]]></title>
  <link>http://npmawesome.com/2014-07-10-sweetjs/</link>
  <pubDate>Wed Jul 09 2014 10:04:58 GMT-0700</pubDate>
  <dc:creator><![CDATA[alexgorbatchev]]></dc:creator>
  <guid isPermaLink="false">http://npmawesome.com/2014-07-10-sweetjs/</guid>
  <description>CSS Colorguard helps you maintain the color set that you want, and warns you when colors you've added are too similar to ones that already exist.</description>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_date>2014-07-09 10:04:58</wp:post_date>
  <wp:post_date_gmt>2014-07-09 17:04:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sweetjs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password></wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="author" nicename="cap-alexgorbatchev"><![CDATA[alexgorbatchev]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_amt_description</wp:meta_key>
    <wp:meta_value><![CDATA[CSS Colorguard helps you maintain the color set that you want, and warns you when colors you've added are too similar to ones that already exist.]]></wp:meta_value>
  </wp:postmeta><category domain="category" nicename="npm"><![CDATA[npm]]></category>
<wp:postmeta>
  <wp:meta_key>module_name</wp:meta_key>
  <wp:meta_value><![CDATA[colorguard]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_name</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d71]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_github</wp:meta_key>
  <wp:meta_value><![CDATA[SlexAxton/css-colorguard]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_github</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d72]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>module_license</wp:meta_key>
  <wp:meta_value><![CDATA[Apache 2]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
  <wp:meta_key>_module_license</wp:meta_key>
  <wp:meta_value><![CDATA[field_53c3e3dbc6d73]]></wp:meta_value>
</wp:postmeta>  <content:encoded><![CDATA[[partner nodejitsu]

[author photo]

<!--more-->

```bash
[module install]
```

## Usage

extension=yaml.so]]></content:encoded>
</item></channel>
</rss>