<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 25 Feb 2014 17:20:47 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Tue, 25 Feb 2014 17:20:13 GMT</pubDate>
        <item>
            <title><![CDATA[webdriver.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/2c405e9d55507036d6cc2aff250c3146" style="float: right; margin-left: 1em"/>
<a href="https://github.com/camme/webdriverjs">webdriver.js</a> is a module by <a href="https://github.com/camme">Camilo Tapia</a> to render node.js error stack in a much more digestable way. This seems like it might a good module to add to your infrastracture if you, like me, constantly having to weed through the ugly stack messages to find relavant lines. <a href="https://github.com/camme/webdriverjs">webdriver.js</a> is not the &quot;official webdriverjs driver&quot; says <a href="https://github.com/christian-bromann">Christian Bromann</a> in <a href="https://github.com/camme/webdriverjs/issues/138#issuecomment-32051980">this thread</a>:</p>
<blockquote>
<p>We&#39;re trying to provide a selenium runner which is easy to use, highly extendable and compatible with all common JavaScript test frameworks. It uses an own chain API to execute all async commands in right order. The specialty of this library is that we wrap all JSONWire protocol commands in useful actions commands. So you don&#39;t have to care about to get an element first and then call the click command; you just execute the click with a selector as parameter.</p>
</blockquote>
<pre><code>npm install webdriverjs
</code></pre><h2 id="usage">Usage</h2>
<pre><code>var webdriverjs = require(&#39;webdriverjs&#39;);

var options = {
  desiredCapabilities: {
    browserName: &#39;chrome&#39;
  }
};

webdriverjs
  .remote(options)
  .init()
  .url(&#39;http://www.google.com&#39;)
  .title(function(err, res) {
    console.log(&#39;Title was: &#39; + res.value);
  })
  .end();
</code></pre><h2 id="selector-api">Selector API</h2>
<p>The JsonWireProtocol provides several strategies to query an element. WebdriverJS simplifies these to make it more familiar with the common existing selector libraries like Sizzle. The following selector types are supported:</p>
<ul>
<li>CSS query selector</li>
<li>link text</li>
<li>partial link text</li>
<li>tag name</li>
<li>name attribute</li>
<li>xPath</li>
</ul>
<h2 id="more">More</h2>
<p>Here is a simplified example of differences between the drivers:</p>
<p><a href="https://code.google.com/p/selenium/wiki/WebDriverJs">selenium-webdriverjs</a>:</p>
<pre><code>driver.get(&#39;http://www.google.com&#39;);
driver.findElement(webdriver.By.id(&#39;q&#39;)).sendKeys(&#39;webdriver&#39;);
driver.findElement(webdriver.By.id(&#39;btnG&#39;)).click();
</code></pre><p><a href="https://github.com/admc/wd">WD.js</a>:</p>
<pre><code>browser
  .get(&quot;http://www.google.com&quot;)
  .elementById(&#39;q&#39;)
  .sendKeys(&#39;webdriver&#39;)
  .elementById(&#39;btnG&#39;)
  .click()
</code></pre><p><a href="https://github.com/camme/webdriverjs">webdriver.js</a>:</p>
<pre><code>client
    .url(&#39;http://google.com&#39;)
    .setValue(&#39;#q&#39;,&#39;webdriver&#39;)
    .click(&#39;#btnG&#39;)
</code></pre><p><a href="https://github.com/camme/webdriverjs">webdriver.js</a> has also almost all protocol commands implemented, so you can do the same with the standard JSONWire protocol commands.</p>
<pre><code>client
    .url(&#39;http://google.com&#39;)
    .element(&#39;#q&#39;, function(err,res) {
        client.elementIdValue(res.value.ELEMENT, &#39;webdriver&#39;);
    })
    .element(&#39;#btnG&#39;, function(err,res) {
        client.elementIdClick(res.value.ELEMENT);
    });
</code></pre>]]></description>
            <link>http://npmawesome.com/posts/2014-02-25-webdriverjs</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-25-webdriverjs</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 25 Feb 2014 17:07:16 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[pretty-error]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/8db4bf4bbef66bb91a4f2a0ba3b26e68" style="float: right; margin-left: 1em"/>
<a href="https://github.com/AriaMinaei/pretty-error">pretty-error</a> is a module by <a href="https://github.com/AriaMinaei">Aria Minaei</a> to render node.js error stack in a much more digestable way. This seems like it might a good module to add to your infrastracture if you, like me, constantly having to weed through the ugly stack messages to find relavant lines.</p>
<pre><code>npm install pretty-error
</code></pre><p><img class="hide-on-mobile" src="https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/pretty-error-screenshot.png" style="width: 100%; margin: 1em 0"/></p>
<h2 id="usage">Usage</h2>
<pre><code>require(&#39;pretty-error&#39;).start(function() {
  startTheApp();
});
</code></pre><h2 id="how-it-works">How it Works</h2>
<p><a href="https://github.com/AriaMinaei/pretty-error">pretty-error</a> turns error objects into something similar to an HTML document, and then uses the upcoming <a href="https://github.com/AriaMinaei/renderkid">RenderKid</a> to render the document using simple HTML/CSS-like commands for the console. This allows <a href="https://github.com/AriaMinaei/pretty-error">pretty-error</a> to be themed using simple CSS-like declarations.</p>
<h2 id="the-cool-bits">The cool bits</h2>
<h3 id="shortening-paths">Shortening paths</h3>
<p>You might want to substitute long paths with shorter, more readable aliases:</p>
<pre><code>pe.alias(&#39;E:/open-source/theatrejs/scripts/js&#39;, &#39;(Theare.js)&#39;);

// to remove the alias:
pe.removeAlias(&#39;E:/open-source/theatrejs/scripts/js&#39;);

// or:
pe.removeAllAliases();
</code></pre><h3 id="skipping-packages">Skipping packages</h3>
<p>You might want to skip trace lines that belong to specific packages (chai, when, socket.io):</p>
<pre><code>pe.skipPackage(&#39;chai&#39;, &#39;when&#39;, &#39;socket.io&#39;);

// to unskip:
pe.unskipPackage(&#39;socket.io&#39;);
pe.unskipAllPackages();
</code></pre><h3 id="skipping-node-files">Skipping node files</h3>
<pre><code>// this will skip node.js, path.js, event.js, etc.
pe.skipNodeFiles();

// also:
pe.unskipNodeFiles();
</code></pre><h3 id="skipping-paths">Skipping paths</h3>
<pre><code>pe.skipPath(&#39;/home/dir/someFile.js&#39;);

// also:
pe.unskipPath(&#39;/home/dir/someFile.js&#39;);
pe.unskipAllPaths();
</code></pre>]]></description>
            <link>http://npmawesome.com/posts/2014-02-24-pretty-error</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-24-pretty-error</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 24 Feb 2014 17:55:21 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[supertest]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/f1e3ab214a976a39cfd713bc93deb10f" style="float: right; margin-left: 1em"/>
<a href="https://github.com/visionmedia/supertest">supertest</a> is a module by <a href="https://github.com/visionmedia">TJ Holowaychuk</a> that takes testing HTTP easier via <a href="http://github.com/visionmedia/superagent">superagent</a>. The motivation with this module is to provide a high-level abstraction for testing HTTP, while still allowing you to drop down to the lower-level API provided by superagent.</p>
<pre><code>npm install supertest
</code></pre><p>You may pass an <code>http.Server</code>, or a <code>Function</code> to <code>request()</code> - if the server is not already listening for connections then it is bound to an ephemeral port for you so there is no need to keep track of ports.</p>
<h2 id="usage">Usage</h2>
<p>Here&#39;s a basic GET request to an end point.</p>
<pre><code>var request = require(&#39;supertest&#39;)
  , express = require(&#39;express&#39;);

var app = express();

app.get(&#39;/user&#39;, function(req, res) {
  res.send(200, { name: &#39;tobi&#39; });
});

request(app)
  .get(&#39;/user&#39;)
  .expect(&#39;Content-Type&#39;, /json/)
  .expect(&#39;Content-Length&#39;, &#39;20&#39;)
  .expect(200)
  .end(function(err, res) {
    if (err) throw err;
  });
</code></pre><p>You can also get all fancy and upload files:</p>
<pre><code>request(app)
  .post(&#39;/&#39;)
  .attach(&#39;avatar&#39;, &#39;test/fixtures/homeboy.jpg&#39;)
</code></pre><p>Passing the app or url each time is not necessary, if you&#39;re testing the same host you may simply re-assign the request variable with the initialization app or url:</p>
<pre><code>request = request(&#39;http://localhost:5555&#39;);

request.get(&#39;/&#39;).expect(200, function(err) {
  console.log(err);
});

request.get(&#39;/&#39;).expect(&#39;heya&#39;, function(err) {
  console.log(err);
});
</code></pre><p>Anything you can do with <a href="http://github.com/visionmedia/superagent">superagent</a>, you can do with <a href="https://github.com/visionmedia/supertest">supertest</a>. For some strange reason I love testing HTTP end points, this is my goto library for this. Thanks TJ!</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-21-supertest</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-21-supertest</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 21 Feb 2014 18:09:41 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[spritesmith]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/15927fc52919e9223adc7ed99e125d4d" style="float: right; margin-left: 1em"/>
<a href="https://github.com/Ensighten/spritesmith">spritesmith</a> is a module by <a href="https://github.com/twolfson">Todd Wolfson</a> that takes image files and generates <a href="http://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29#Sprites_by_CSS">spritesheets</a> and coordinate maps. By itself <a href="https://github.com/Ensighten/spritesmith">spritesmith</a> would be somewhat difficult to utilize in your workflow, that&#39;s why nice people have created <a href="https://github.com/twolfson/gulp.spritesmith">gulp.spritesmith</a> and <a href="https://github.com/Ensighten/grunt-spritesmith">grunt-spritesmith</a> tasks to make build sprites for you with just a few lines of code.</p>
<pre><code>npm install spritesmith
</code></pre><h2 id="usage">Usage</h2>
<p><img class="hide-on-mobile" src="http://upload.wikimedia.org/wikipedia/commons/0/03/Sprite-example.gif" style="float: right; width: 150px; margin-left: 1em; background: white; padding: 1em"/></p>
<pre><code>var sprites = [
  &#39;sprite1.png&#39;,
  &#39;sprite2.jpg&#39;,
  &#39;sprite3.png&#39;
];

spritesmith({&#39;src&#39;: sprites}, function (err, result) {
  // Binary string representation of image
  result.image;

  // Object mapping filename to {x, y, width, height} of image
  result.coordinates;

  // Object with metadata about spritesheet {width, height}
  result.properties;
});
</code></pre><p>Converting this structure to image files and CSS now seems like a pretty straightforward task.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-20-spritesmith</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-20-spritesmith</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 20 Feb 2014 17:58:22 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[9 gulp.js plugins for a great build system]]></title>
            <description><![CDATA[<div class="highlight">
  <img class="hide-on-mobile" src="/images/posts/nodejitsu.png" style="height: 80px"/>
  This post was written for <a href="https://blog.nodejitsu.com">Nodejitsu</a> blog and is crossposted here. <a href="https://blog.nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a> and is now supporting the project.
</div>

<p>This article assumes you have experience with node.js, npm and you are pretty familiar with the concept of task runners and command-line interface. It will walk through general steps required to get up and running with <a href="http://gulpjs.com">gulp.js</a>.</p>
<p>Not unlike all the other build systems, it all starts by installing the task runner itself, e.g. <code>npm install gulp</code> and creating the main file in the root of your project called <code>gulpfile.js</code>. For those people like myself, who immediately want to know if <a href="http://gulpjs.com">gulp.js</a> supports CoffeeScript - the answer is yes - just <code>require(&#39;./gulpfile.coffee&#39;)</code> from <code>gulpfile.js</code>.</p>
<p>Now that we have everything sorted out, lets get cracking and make a task runner to support our HTML5 node.js project.</p>
<h2 id="-gulp-util-"><a href="https://github.com/gulpjs/gulp-util">gulp-util</a></h2>
<p>This is the official tool belt for <a href="http://gulpjs.com">gulp.js</a>. The authors decided to split up helpers into a separate module which you basically end up requiring every time. This module brings in functionality for logging, coloring console output, and so on. Check out the <a href="https://github.com/gulpjs/gulp-util">gulp-util</a> github page for the full list.</p>
<p>Since this is a utility module, there isn&#39;t a specific place to get started with it, so we will use it throughout instead.</p>
<h2 id="-gulp-clean-"><a href="https://github.com/peter-vilja/gulp-clean">gulp-clean</a></h2>
<p>The first thing any self-respecting build system should do is clean the space and remove everything that&#39;s in the way.</p>
<pre><code>var gulp = require(&#39;gulp&#39;);
var clean = require(&#39;gulp-clean&#39;);

gulp.task(&#39;clean&#39;, function () {
  gulp.src(&#39;build&#39;, {read: false})
    .pipe(clean());
});
</code></pre><p>You can now run <code>gulp clean</code> and the <code>build</code> folder in the root of your project will be obliterated.</p>
<h2 id="-gulp-concat-"><a href="https://github.com/wearefractal/gulp-concat">gulp-concat</a></h2>
<p>It&#39;s probably safe to assume that your HTML5 project has a few external dependencies like <a href="http://jquery.com">jQuery</a>, maybe <a href="http://modernizr.com/">Modernizr</a> and such. Instead of having a separate <code>&lt;script&gt;</code> tag for each one of them, it would be nice to concat them together into one file. That&#39;s where <a href="https://github.com/wearefractal/gulp-concat">gulp-concat</a> comes in:</p>
<pre><code>var concat = require(&#39;gulp-concat&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
});
</code></pre><p>Now, running <code>gulp vendor</code> will take all <code>*.js</code> files from the local <code>vendor</code> folder and concat them into <code>build/vendor.js</code>.</p>
<h2 id="-gulp-uglify-"><a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a></h2>
<p>The next thing to do is to minify our <code>vendor.js</code>. Lets add this to our <code>vendor</code> task.</p>
<pre><code>var uglify = require(&#39;gulp-uglify&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(uglify())
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
});
</code></pre><p>Notice, that instead of creating a separate task for minifying, we simply added another <code>pipe</code> call. This is essentially what <a href="http://gulpjs.com">gulp.js</a> is all about - applying the right tools!</p>
<p>This is also where things might start going wrong, because <a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a> will throw an error if you have invalid JavaScript syntax. To deal with that lets add a basic error:</p>
<pre><code>var gutil = require(&#39;gulp-util&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(uglify())
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
    .on(&#39;error&#39;, gutil.log)
});
</code></pre><h2 id="-gulp-rename-"><a href="https://github.com/hparra/gulp-rename">gulp-rename</a></h2>
<p>Do you want to keep both, minified and source files around? That&#39;s not a problem! Lets extend our <code>vendor</code> task to write out <code>vendor.js</code> and <code>vendor.min.js</code> at the same time.</p>
<pre><code>var rename = require(&#39;gulp-rename&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .on(&#39;error&#39;, gutil.log)
});
</code></pre><p>Notice that <code>gulp.dest</code> is used twice here. This is the cool thing about <a href="http://gulpjs.com">gulp.js</a> - everything is just streams. Adding <code>gulp.dest</code> merely dumps whatever we currently have in the stream to disk, we can then mutate it further and save the new state again. Cool, eh?</p>
<h2 id="-gulp-filesize-"><a href="https://github.com/Metrime/gulp-filesize">gulp-filesize</a></h2>
<p>Don&#39;t know about you, but after minifying JavaScript I always want to know the file size. Guess what - I&#39;m not the only one and there&#39;s a plugin for that.</p>
<pre><code>var filesize = require(&#39;gulp-filesize&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .on(&#39;error&#39;, gutil.log)
});
</code></pre><p>Again, see how <code>filesize</code> is used twice? It will first print out the size of our source file and then the minified size.</p>
<h2 id="-gulp-less-"><a href="https://github.com/plus3network/gulp-less">gulp-less</a></h2>
<p>Lets assume you used the amazing <a href="http://lesscss.org/">LESS</a> preprocessor for your generating your CSS files and now want to generate them. <a href="https://github.com/plus3network/gulp-less">gulp-less</a> to the rescue!</p>
<pre><code>var less = require(&#39;gulp-less&#39;);
var path = require(&#39;path&#39;);

gulp.task(&#39;css&#39;, function () {
  gulp.src(&#39;less/**/*.less&#39;)
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});
</code></pre><p>Running <code>gulp css</code> will compile all <a href="http://lesscss.org/">LESS</a> files from the <code>less</code> folder into <code>build/css</code>.</p>
<h2 id="-gulp-changed-"><a href="https://github.com/sindresorhus/gulp-changed">gulp-changed</a></h2>
<p>I would be forever unhappy if every time I ran <code>gulp css</code> all of my files would be regenerated regardless if the source <a href="http://lesscss.org/">LESS</a> files have changed or not. Lets use <a href="https://github.com/sindresorhus/gulp-changed">gulp-changed</a> to excluded not modified files.</p>
<pre><code>var changed = require(&#39;gulp-changed&#39;);

gulp.task(&#39;css&#39;, function () {
  gulp.src(&#39;less/**/*.less&#39;)
    .pipe(changed(&#39;build/css&#39;))
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});
</code></pre><h2 id="-gulp-watch-"><a href="https://github.com/floatdrop/gulp-watch">gulp-watch</a></h2>
<p>It would be really cool if you didn&#39;t have to run <code>gulp css</code> every time you make a change, right? Lets set up a task that will monitor our files for changes and and compile them right away.</p>
<p><a href="https://github.com/floatdrop/gulp-watch">gulp-watch</a> is a little bit different from the other plugins and we use it instead of <code>gulp.src</code> as the starting point.</p>
<pre><code>var watch = require(&#39;gulp-watch&#39;);

gulp.task(&#39;css:watch&#39;, function () {
  watch({
    glob: &#39;less/**/*.less&#39;,
    emit: &#39;one&#39;,
    emitOnGlob: false
  }, function(files) {
    return files
      .pipe(less({
        paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
      }))
      .pipe(gulp.dest(&#39;build/css&#39;))
      .on(&#39;error&#39;, gutil.log);
  });
});
</code></pre><p><code>gulp css:watch</code> will being watching all of our LESS files and compile only the changed one.</p>
<h2 id="all-together">All together</h2>
<p>Now lets put it all together into <code>gulpfile.js</code></p>
<pre><code>var path = require(&#39;path&#39;);
var gulp = require(&#39;gulp&#39;);
var gutil = require(&#39;gulp-util&#39;);
var clean = require(&#39;gulp-clean&#39;);
var concat = require(&#39;gulp-concat&#39;);
var uglify = require(&#39;gulp-uglify&#39;);
var rename = require(&#39;gulp-rename&#39;);
var filesize = require(&#39;gulp-filesize&#39;);
var less = require(&#39;gulp-less&#39;);
var changed = require(&#39;gulp-changed&#39;);
var watch = require(&#39;gulp-watch&#39;);

gulp.task(&#39;clean&#39;, function () {
  gulp.src(&#39;build&#39;, {read: false})
    .pipe(clean());
});

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .on(&#39;error&#39;, gutil.log)
});

gulp.task(&#39;css&#39;, function () {
  gulp.src(&#39;less/**/*.less&#39;)
    .pipe(changed(&#39;build/css&#39;))
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});

gulp.task(&#39;css:watch&#39;, function () {
  watch({
    glob: &#39;less/**/*.less&#39;,
    emit: &#39;one&#39;,
    emitOnGlob: false
  }, function(files) {
    return files
      .pipe(less({
        paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
      }))
      .pipe(gulp.dest(&#39;build/css&#39;))
      .on(&#39;error&#39;, gutil.log);
  });
});
</code></pre><h2 id="summary">Summary</h2>
<p>The thing that I personally really like about <a href="http://gulpjs.com">gulp.js</a> is that it feels to me like a toolbox full of single purpose tools that I can use to assemble almost anything. It&#39;s amazing how in a span of a couple of months community has wrote <a href="http://gulpjs.com/plugins/">over 300 plugins</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-19-9-gulp-js-plugins-for-a-great-build-system</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-19-9-gulp-js-plugins-for-a-great-build-system</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 19 Feb 2014 17:26:59 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[npm-diff]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://1.gravatar.com/avatar/a010d5218f2c3d194dbbac9c5d14d0ad" style="float: right; margin-left: 1em"/>
<a href="https://github.com/segmentio/npm-diff">npm-diff</a> is a utility module by <a href="https://github.com/juliangruber">Julian Gruber</a> to diff two versions of NPM module. I&#39;ve been fascinated recently by all the tools being released to help you manage <code>package.json</code> and module publishing. It&#39;s really cool!</p>
<pre><code>npm install npm-diff
</code></pre><h2 id="usage">Usage</h2>
<pre><code>$ npm-diff intersect 0.0.0 0.1.0 | colordiff
</code></pre><p><img class="hide-on-mobile" src="https://github-camo.global.ssl.fastly.net/304bdd7188c9fea08e87e731790aad980877ce7b/68747470733a2f2f692e636c6f756475702e636f6d2f5267694263634b7664742e706e67" style="width: 100%"/></p>
<p>BOOM! <code>brew install colordiff</code> if you haven&#39;t got it.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-18-npm-diff</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-18-npm-diff</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 18 Feb 2014 19:13:20 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[NodePDF]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/c0f5a91f71e988a9e2d9c20ffa546f4e" style="float: right; margin-left: 1em"/>
<a href="https://github.com/TJkrusinski/NodePDF">NodePDF</a> is a module by <a href="https://github.com/TJkrusinski">TJ Krusinski</a> for creating PDF files from web pages. It depends on <a href="http://phantomjs.org/">PhantomJS</a> and works by simply taking a screenshot of a page and stuffing it into a PDF. One the plus side, this makes it really easy to do mostly graphics based PDF files from node. On the down side, the content isn&#39;t scalable at all, so printing quality will suffer.</p>
<pre><code>npm install nodepdf
</code></pre><h2 id="usage">Usage</h2>
<p><img class="hide-on-mobile" src="/images/posts/nodepdf.jpg" style="width: 300px; float: right; margin: 1em;"/></p>
<pre><code>var nodepdf = require(&#39;nodepdf&#39;);

// last argument is optional, sets the width and height
// for the viewport to render the pdf from
var pdf = new nodepdf(
  &#39;http://npmawesome.com&#39;,
  &#39;npmawesome.pdf&#39;,
  {
    args: &#39;--debug=true&#39;,
    viewportSize: {
      width: 500,
      height: 300
    }
  }
);

pdf.on(&#39;error&#39;, function(msg){
    console.log(msg);
});

pdf.on(&#39;done&#39;, function(pathToFile){
    console.log(pathToFile);
});
</code></pre><p>I can imagine this being used for something simple, like printing tickets, post cards, photos and so on.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-17-nodepdf</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-17-nodepdf</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 17 Feb 2014 17:56:26 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[domain-context]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/domain-context.jpg" style="width: 100%"/></p>
<p><a href="https://github.com/andreypopp/domain-context">domain-context</a> is a module by <a href="https://github.com/andreypopp">Andrey Popp</a> for dealing with globally accessible domain-bound contexts, connect/express middleware included.</p>
<pre><code>npm install domain-context
</code></pre><h2 id="usage">Usage</h2>
<pre><code>var connectDomain = require(&#39;connect-domain&#39;),
    domainContext = require(&#39;domain-context&#39;),
    express = require(&#39;express&#39;);

var lifecycle = {
  context: function() {
    return {db: new pg.Client(...)}
  },
  cleanup: function(context) {
    context.db.query(&#39;commit&#39;);
    context.db.end();
  },
  onError: function(err, context) {
    context.db.query(&#39;rollback&#39;);
    context.db.end();
  }
};

app = express();
app.use(connectDomain());
app.use(domainContext.middleware(lifecycle));

// Your applicaiton&#39;s middleware goes here
//
// Note that because of connect/express design you are required to place two
// middlewares around your application — domainContext.middleware() and
// domainContext.middlewareOnError().

app.use(domainContext.middlewareOnError(lifecycle));

// Now you can use domainContext.get() to query data from the currently active domain:

var domainContext = require(&#39;connect-reqcontext&#39;);

function getUserById(id, cb) {
  domainContext.get(&#39;db&#39;).query(&quot;select ...&quot;, cb);
}
</code></pre><p>I feel that this is pretty self-explanatory here. Being able to get request context outside of the <code>express</code> handlers and not having to pass so much context around to API is pretty great.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-13-domain-context</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-13-domain-context</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 13 Feb 2014 21:20:38 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JSONStream]]></title>
            <description><![CDATA[<p><a href="https://github.com/dominictarr/JSONStream">JSONStream</a> is a module by <a href="https://github.com/dominictarr">Dominic Tarr</a> for streaming <code>JSON.parse</code> and <code>JSON.stringify</code>.</p>
<pre><code>npm install jsonstream
</code></pre><h2 id="usage">Usage</h2>
<pre><code>var request = require(&#39;request&#39;),
    JSONStream = require(&#39;JSONStream&#39;),
    es = require(&#39;event-stream&#39;)
    ;

var parser = JSONStream.parse([&#39;rows&#39;, true]),
    req = request({url: &#39;http://isaacs.couchone.com/registry/_all_docs&#39;}),
    logger = es.mapSync(function (data) {
      console.error(data);
      return data;
    })

request({url: &#39;http://isaacs.couchone.com/registry/_all_docs&#39;})
  .pipe(JSONStream.parse(&#39;rows.*&#39;))
  .pipe(es.mapSync(function (data) {
    console.error(data);
    return data;
  }));
</code></pre><p><img class="hide-on-mobile" src="/images/posts/json.svg" style="float: right; width: 100px; margin-left: 1em"/>
I like the idea behind streaming JSON alot because you don&#39;t have to wait for the whole document to come down the pipe, especially if it&#39;s very large. It can also integrate with <a href="http://gulpjs.com">gulp.js</a> very nicely. The really cool thing for me is that you can react to specific nodes in the data structure vs having to seek them out and loop over them manually.</p>
<p>Are you dealing with large JSON structures on your project?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-12-jsonstream</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-12-jsonstream</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 12 Feb 2014 18:07:44 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[peer.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/peerjs.png" style="float: right; margin-left: 1em"/>
<a href="https://github.com/peers/peerjs">peer.js</a> provides a complete, configurable, and easy-to-use peer-to-peer API built on top of WebRTC, supporting both data channels and media streams. <a href="https://github.com/peers/peerjs">peer.js</a> wraps the browser&#39;s WebRTC implementation to provide a complete, configurable, and easy-to-use peer-to-peer connection API. Equipped with nothing but an ID, a peer can create a P2P data or media stream connection to a remote peer.</p>
<pre><code>npm install peerjs
</code></pre><p>To broker connections, <a href="https://github.com/peers/peerjs">peer.js</a> connects to a PeerServer (<a href="http://peerjs.com/peerserver">free hosted</a> or <a href="https://github.com/peers/peerjs-server">host your own</a>). Note that <strong>no peer-to-peer data goes through the server</strong> - the server acts only as connection broker.</p>
<h2 id="usage">Usage</h2>
<pre><code>var Peer = require(&#39;peerjs&#39;).Peer;

// You can pick your own id or omit the id if you want to get a random one from the server.
var peer = new Peer(&#39;pick-an-id&#39;, { key: &#39;myapikey&#39; });
</code></pre><p>Connect</p>
<pre><code>var conn = peer.connect(&#39;another-peers-id&#39;);
conn.on(&#39;open&#39;, function() {
  conn.send(&#39;hi!&#39;);
});
</code></pre><p>Receive</p>
<pre><code>peer.on(&#39;connection&#39;, function(conn) {
  conn.on(&#39;data&#39;, function(data) {
    // Will print &#39;hi!&#39;
    console.log(data);
  });
});
</code></pre><p>Checkout the <a href="http://peerjs.com/docs/#api">awesome API docs</a> and take it out for a spin. You can create a video chat with just a few lines of code. Have you done any peer-to-peer stuff?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-11-peer-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-11-peer-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 11 Feb 2014 17:59:37 GMT</pubDate>
        </item>
    </channel>
</rss>