<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 31 Jan 2014 21:30:01 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Fri, 31 Jan 2014 21:29:38 GMT</pubDate>
        <item>
            <title><![CDATA[coupon-code]]></title>
            <description><![CDATA[<p><a href="https://github.com/appsattic/node-coupon-code">coupon-code</a> implementation of Perl&#39;s <a href="https://github.com/grantm/Algorithm-CouponCode">Algorithm::CouponCode</a> written by <a href="https://github.com/appsattic">Andrew Chilton</a>. It is meant to solve a what appears on the surface very simple problem - coupon code validation. You would imagine printing codes on paper cups and then having user enter them - pretty straight forward. What happens however when user confuses zero for letter O, or five for S? Should you tell them their code is invalid?</p>
<pre><code>npm install coupon-code</code></pre>
<h2 id="usage">Usage</h2>
<p>Lets say you issue a code and print it on a coffee cup.</p>
<pre><code>var cc = require(&#39;coupon-code&#39;);

var code = cc.generate();
// 55G2-DHM0-50NN</code></pre>
<p>Somebody enjoyed their coffee and decided to enter the code, which now, upon inspection, is a little bit wet and fuzzy. They enter:</p>
<pre><code>cc.validate(&#39;s5g2-dhmo-50nn&#39;);
// true</code></pre>
<p>You can also specify size of the desired code:</p>
<pre><code>cc.generate();
// 55G2-DHM0-50NN

cc.generate({ parts : 4 });
// U5H9-HKDH-8RNX-1EX7

cc.generate({ partLen : 6 });
// WYLKQM-U35V40-9N84DA</code></pre>
<p>Pretty cool, eh? Until finding this package, I haven&#39;t given this problem a second thought. Have you dealt with coupon codes in your app?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-31-coupon-code</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-31-coupon-code</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 31 Jan 2014 17:35:42 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[rewire]]></title>
            <description><![CDATA[<p><a href="https://github.com/jhnns/rewire">rewire</a> is a dependency injection module for node.js applications written by <a href="https://github.com/jhnns">Johannes Ewald</a>. It adds a special setter and getter to modules so you can modify their behaviour for better unit testing.</p>
<pre><code>npm install rewire</code></pre>
<h2 id="features">Features</h2>
<ul>
<li>Inject mocks for other modules or globals like process</li>
<li>Leak private variables</li>
<li>Override variables within the module</li>
<li>Works with CoffeeScript</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>var rewire = require(&quot;rewire&quot;);

// rewire acts exactly like require.
var myModule = rewire(&quot;./myModule.js&quot;);

// Just with one difference:
// Your module will now export a special setter and getter for private variables.
myModule.__set__(&quot;myPrivateVar&quot;, 123);
myModule.__get__(&quot;myPrivateVar&quot;); // = 123

// This allows you to mock almost everything within the module e.g. the fs-module.
// Just pass the variable name as first parameter and your mock as second.
myModule.__set__(&quot;fs&quot;, {
  readFile: function (path, encoding, cb) {
    cb(null, &quot;Success!&quot;);
  }
});

myModule.readSomethingFromFileSystem(function (err, data) {
  console.log(data); // = Success!
});

// You can set different variables with one call.
myModule.__set__({
  fs: fsMock,
  http: httpMock,
  someOtherVar: &quot;hello&quot;
});

// You may also override globals. These changes are only within the module, so
// you don&#39;t have to be concerned that other modules are influenced by your mock.
myModule.__set__({
  console: {
    log: function () { /* be quiet */ }
  }
});</code></pre>
<p>The biggest difference between <code>rewire</code> and <code>require</code> is that calling <code>rewire</code> multiple times gives you a new module instance every time. Something to keep in mind.</p>
<p>This seems like a good and bad idea at the same time. The power to change and introspect private variables might lead to code that isn&#39;t exactly very suitable for tests. I find that writing code to be testable leads to much better code structure and I spend alot more time considering my API.</p>
<p>What do you think?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-30-rewire</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-30-rewire</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 30 Jan 2014 17:49:19 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[yarm]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/b928accd038cf24ef3f14cb5dd758b04" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/njoyard/yarm">yarm</a> is Yet Another REST Middleware for node.js and Express written by <a href="https://github.com/njoyard">Nicolas Joyard</a>. It has no dependencies, however it is intended to be used with <a href="http://expressjs.com/">Express</a> and will have additional features if <a href="http://mongoosejs.com/">Mongoose</a> is present.</p>
<pre><code>npm install yarm</code></pre>
<h2 id="features">Features</h2>
<p>The list of features is very extensive. <a href="https://github.com/njoyard/yarm">yarm</a> creates REST style APIs for native objects, <a href="http://mongoosejs.com/">Mongoose</a> and allows you to have pretty tight control over what&#39;s happening. There&#39;s a long list of customization options that let you specify output format, what&#39;s included, how MongoDB collection are fetched, permissions and so.</p>
<h2 id="usage">Usage</h2>
<pre><code>var app = require(&quot;express&quot;)();
var yarm = require(&quot;yarm&quot;);
var mongoose = require(&quot;mongoose&quot;);

app.use(&quot;/rest&quot;, yarm());

var postSchema = new mongoose.Schema({
  title: String,
  text: String,
  comments: [{
    author: String,
    text: String
  }]
});

var Post = mongoose.model(&quot;post&quot;, postSchema);

yarm.mongoose(&quot;posts&quot;, Post);

app.listen(80);

$ curl http://localhost/rest/posts?skip=10&amp;limit=1
{
  &quot;_count&quot;: 42,
  &quot;_items&quot;: [
    {
      &quot;_id&quot;: &quot;507f191e810c19729de860ea&quot;,
      &quot;title&quot;: &quot;My 11th post&quot;,
      &quot;text&quot;: &quot;Hello, World&quot;,
      &quot;comments&quot;: [
        {
          &quot;author&quot;: &quot;Bob&quot;,
          &quot;text&quot;: &quot;First !&quot;
        }
      ]
    }
  ]
}

$ curl http://localhost/rest/posts/507f191e810c19729de860ea
{
  &quot;_id&quot;: &quot;507f191e810c19729de860ea&quot;,
  &quot;title&quot;: &quot;My 11th post&quot;,
  &quot;text&quot;: &quot;Hello, World&quot;,
  &quot;comments&quot;: [
    {
      &quot;author&quot;: &quot;Bob&quot;,
      &quot;text&quot;: &quot;First !&quot;
    }
  ]
}

$ curl http://localhost/rest/posts/507f191e810c19729de860ea/comments/0/text
First !</code></pre>
<p>You can roll your own:</p>
<pre><code>resource
  .get(function(req, cb) {
    // GET handler
  })
  .put(function(req, isPatch, cb) {
    // PUT and PATCH handler
  })
  .post(function(req, cb) {
    // POST handler
  })
  .del(function(req, cb) {
    // DELETE handler
  });</code></pre>
<p>Of course, you can have nested resources.</p>
<pre><code>yarm.resource(&quot;/posts/:pid&quot;).sub(&quot;comments/:cid/*&quot;).get(function(req, cb) {
  cb(null, { ... });
});

$ curl http://localhost/rest/posts/first-post/comments/3/foo/bar
...</code></pre>
<p>Check out <a href="https://github.com/njoyard/yarm">yarm</a> github page for complete documentation. How do you handle your APIs?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-29-yarm</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-29-yarm</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 29 Jan 2014 17:37:23 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[modella]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/824b41e6108a22c4c96f50ee23419369" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/modella/modella">modella</a> is a bare bones model framework written by <a href="https://github.com/matthewmueller">Matthew Mueller</a> of the <a href="/posts/2013-12-27-cheerio/">cheerio</a> fame. It exposes a few APIs on which plugins can be built to enhance functionality. The core module and select plugins work on the client and server.</p>
<pre><code>npm install modella</code></pre>
<h2 id="plugins">Plugins</h2>
<p>Most of functionality comes bundles as plugins:</p>
<ul>
<li><p>Adapter (Sync Layer) Plugins</p>
<ul>
<li><a href="https://github.com/modella/ajax">ajax</a> - RESTful AJAX HTTP adapter.</li>
<li><a href="https://github.com/modella/ejdb">ejdb</a> - Ejdb database adapter.</li>
<li><a href="https://github.com/modella/leveldb">leveldb</a> - LevelDB adapter.</li>
<li><a href="https://github.com/modella/mongo">mongo</a> - MongoDB adapter.</li>
<li><a href="https://github.com/alexmingoia/modella-mysql">modella-mysql</a> - MySQL adapter.</li>
<li><a href="https://github.com/alexmingoia/modella-memory">modella-memory</a> - In-memory adapter.</li>
</ul>
</li>
<li><p>Attribute Utilities</p>
<ul>
<li><a href="https://github.com/modella/validators">validators</a> - Validations for attributes</li>
<li><a href="https://github.com/modella/slug">slug</a> - Slug generation on attributes</li>
<li><a href="https://github.com/ramitos/modella-level-relations">modella-level-relations</a> - LevelUP based modella relations</li>
</ul>
</li>
<li><p>Security Plugins</p>
<ul>
<li><a href="https://github.com/modella/auth">auth</a> - Authorization plugin.</li>
<li><a href="https://github.com/modella/filter">filter</a> - Filter sensitive fields from a JSON blob.</li>
<li><a href="https://github.com/modella/protection">protection</a> - Mass-assignment protection.</li>
</ul>
</li>
<li><p>Misc</p>
<ul>
<li><a href="https://github.com/alexmingoia/modella-resource">modella-resource</a> - Expose <a href="https://github.com/modella/modella">modella</a> models via RESTful resource middleware (for use with Express).</li>
<li><a href="https://github.com/modella/friendly-errors">friendly-errors</a> - add friendly error messages to attributes.</li>
<li><a href="https://github.com/modella/save-invalid">save-invalid</a> - Save invalid models and mark them as dirty in the database.</li>
</ul>
</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>var modella = require(&#39;modella&#39;);
var validators = require(&#39;modella-validators&#39;);
var mongo = require(&#39;modella-mongo&#39;)(&#39;localhost/db&#39;)
var User = modella(&#39;User&#39;);

User.use(validators);
User.use(mongo);

User
  .attr(&#39;_id&#39;)
  .attr(&#39;username&#39;, { required: true })
  .attr(&#39;email&#39;, { required: true, format: &#39;email&#39; });

User.index(&#39;email&#39;, { unique : true });

var user = new User({ name: &#39;Charley&#39; });

user.save(function(err) {
  User.find(user._id, function(err, u) {
    console.log(u.username());
  });
});</code></pre>
<p>If you feel disgrundled with Mongoose or just tired of using the raw driver, give <a href="https://github.com/modella/modella">modella</a> a try!</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-28-modella</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-28-modella</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 28 Jan 2014 17:56:33 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[mversion]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/c1ad8925b70df4f6665315865511eafc" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/mikaelbr/mversion">mversion</a> is an NPM, Bower, Jam, Ender module version handler. It imitates <a href="https://npmjs.org/doc/version.html"><code>npm version</code></a> to also work on other packaging files. For those times you have either have multiple packaging files (like <code>bower.json</code>, <code>component.json</code>, <code>manifest.json</code>) or just not a <code>package.json</code> file. <code>mversion</code> can easily bump your version and optionally commit and create a tag.</p>
<pre><code>npm install mversion</code></pre>
<h2 id="features">Features</h2>
<ul>
<li>Update version by defining new semver valid version or a release string (major, minor, patch, build).</li>
<li><p>Use <code>-m</code> to auto commit and tag in Git. Apply optional message and use <code>%s</code> as placeholder for the updated version. Default message is <code>v%s</code> where <code>%s</code> is replaced with new version. For example:</p>
<pre><code>$ mversion minor -m
$ mversion minor -m &#39;Bumped to v%s&#39;</code></pre>
</li>
</ul>
<h2 id="cli-usage">CLI Usage</h2>
<pre><code>$ mversion 0.0.5 -m
New Version: 0.0.5
Updated package.json
Updated component.json
Updated manifest.json
Commited to git and created tag v0.0.5</code></pre>
<h2 id="api-usage">API Usage</h2>
<pre><code>var mversion = require(&#39;mversion&#39;);

mversion.get(function (err, data) {
  /*
    data = {
      &#39;package.json&#39;: VERSION,
      &#39;component.json&#39;: VERSION
    }
  */
});

mversion.update(&#39;minor&#39;, function (err, data) { })
mversion.update(&#39;major&#39;, function (err, data) { })
mversion.update(&#39;major&#39;, &#39;Some commit message for version %s&#39;, function (err, data) { }) // Will commit/tag
mversion.update(&#39;patch&#39;, function (err, data) { })
mversion.update(&#39;build&#39;, function (err, data) { })
mversion.update(&#39;0.0.1&#39;, &#39;Bumping version&#39;, function (err, data) { }) // Will commit/tag
mversion.update(&#39;v1.0.1&#39;, function (err, data) { })
mversion.update(&#39;v1.0.1-beta&#39;, function (err, data) { })
mversion.update(&#39;v1.0.1-010988&#39;, function (err, data) { })</code></pre>
<h2 id="gulp">Gulp</h2>
<p>Of course, <a href="https://github.com/mikaelbr">Mikael Brevik</a> has <a href="https://github.com/mikaelbr/gulp-mversion">gulp.js plugin</a> to help you with automate build and deploy process.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-27-mversion</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-27-mversion</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 28 Jan 2014 01:47:14 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[schema-inspector]]></title>
            <description><![CDATA[<div style="text-align: center"><img class="hide-on-mobile" src="/images/posts/schema-inspector.png" style="margin-bottom: 1em" /></div>

<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/16c362a6f8dbbedbc3bf13d001c6b286" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/Atinux/schema-inspector">schema-inspector</a> is a powerful tool to sanitize and validate JS objects written by <a href="https://github.com/Atinux">Sébastien Chopin</a>. It&#39;s disigned to work both client-side and server-side and to be scalable with allowing asynchronous and synchronous calls. There&#39;s support for object validation and sanitazation with a very simple schema definition.</p>
<pre><code>npm install schema-inspector</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>var inspector = require(&#39;schema-inspector&#39;);

var schema = {
  type: &#39;object&#39;,
  properties: {
    lorem: { type: &#39;string&#39;, eq: &#39;ipsum&#39; },
    dolor: {
      type: &#39;array&#39;,
      items: { type: &#39;number&#39; }
    }
  }
};

var candidate = {
  lorem: &#39;not_ipsum&#39;,
  dolor: [ 12, 34, &#39;ERROR&#39;, 45, &#39;INVALID&#39; ]
};
var result = inspector.validate(schema, candidate); // Candidate is not valid
console.log(result.format());

/*
  Property @.lorem: must be equal to &quot;ipsum&quot;, but is equal to &quot;not_ipsum&quot;
  Property @.dolor[2]: must be number, but is string
  Property @.dolor[4]: must be number, but is string
*/</code></pre>
<h2 id="more">More</h2>
<p>Object validation can come in extremely handy when you are writing APIs. On one end you can validate user input:</p>
<pre><code>var express = require(&#39;express&#39;);
var inspector = require(&#39;schema-inspector&#39;);
var app = express();

var schema = {
  type: &#39;object&#39;,
  properties: {
    title: { type: &#39;string&#39;, ne: &#39;&#39; },
    message: { type: &#39;string&#39;, ne: &#39;&#39; }
  }
};

app.post(&#39;/api&#39;, function(req, res, next) {
  var post = req.body;
  var validation = inspector.validate(schema, post);

  if(!validation.valid) {
    return res.send(validation.errors, 400);
  }

  res.send({status: &#39;ok&#39;});
});</code></pre>
<p>On the flip side, you can use the <a href="https://github.com/Atinux/schema-inspector">schema-inspector</a> to validate API response in your tests:</p>
<pre><code>var request = require(&#39;request&#39;);
var inspector = require(&#39;schema-inspector&#39;);

var schema = {
  type: &#39;object&#39;,
  properties: {
    statusCode: { type: &#39;number&#39;, eq: 200 },
    body: { type: &#39;object&#39;, properties: {
      status: { type: &#39;string&#39;, eq: &#39;ok&#39; }
    }}
  }
};

describe(&#39;POST /api&#39;, function()
{
  var response;

  before(function(done) {
    request(
      {
        url: &#39;/api&#39;,
        json: { title: &#39;Hello!&#39;, message: &#39;First Post&#39; }
        method: &#39;POST&#39;
      },
      function(err, r) {
        response = {
          statusCode: r.statusCode,
          body: r.body
        };
        done()
      }
    );
  });

  it(&#39;validates&#39;, function() {
    var validation = inspector.validate(schema, response);

    if(!validation.valid) {
      throw new Error(validation.format());
    }
  });
});</code></pre>
<p>In the end, you have a strong contract between your APIs, consumer and your tests with just a few lines of code. I&#39;m loving this! The <a href="http://atinux.github.io/schema-inspector/">documentation</a> site is very good and I strongly recommend checking it out.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-24-schema-inspector</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-24-schema-inspector</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 24 Jan 2014 17:17:24 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[oboe.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/a26d7792bcf2ccd16be185627ce8e37d" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/jimhigson/oboe.js">oboe.js</a> is written by <a href="https://github.com/jimhigson">Jim Higson</a> and helps web applications respond quicker by wrapping HTTP&#39;s request-response model with a progressively streamed interface. It glues a transport that sits somewhere between streaming and downloading to a JSON parser. It doesn&#39;t have any external dependencies.</p>
<pre><code>npm install oboe.js</code></pre>
<h2 id="features">Features</h2>
<p>The library is extremely feature rich for its 13KB size. I will try to summarize them here and you can get full details with examples on the <a href="https://github.com/jimhigson/oboe.js">oboe.js</a> github page.</p>
<ul>
<li>Can hanging up when everything that&#39;s needed was processed</li>
<li>Can react to field and node names</li>
<li>Can react to partial arrays</li>
<li>Can react to specific nodes or to fields located anywhere</li>
<li>Can use CSS4 style matching patterns</li>
</ul>
<blockquote>
<p>Asynchronous parsing is better if the data is written out progressively from the server side because we&#39;re sending and parsing everything at the earliest possible opportunity. If you can, send small bits of the output asynchronously as soon as it is ready instead of waiting before everything is ready to start sending.</p>
</blockquote>
<div style="text-align: center"><img class="hide-on-mobile" src="/images/posts/oboe.png" style="width: 400px; margin: 1em 0" /></div>

<h2 id="usage">Usage</h2>
<p>Here&#39;s a very <strong>basic</strong> use case:</p>
<pre><code>{
   &quot;foods&quot;: [
      {&quot;colour&quot;:&quot;purple&quot;},
      {&quot;colour&quot;:&quot;red&quot;},
      {&quot;colour&quot;:&quot;brown&quot;}
   ],
   &quot;badThings&quot;: [
      {&quot;name&quot;:&quot;poison&quot;},
      {&quot;name&quot;:&quot;broken_glass&quot;}
   ]
}

var oboe = require(&#39;oboe&#39;);

oboe(&#39;http://localhost/myapp/things.json&#39;)
  .node(&#39;foods.*&#39;, function(foodThing) {
    // This callback will be called everytime a new object is found in the
    // foods array. Oboe won&#39;t wait for the download to finish first.
    console.log(foodThing.name);
  })
  .node(&#39;badThings.*&#39;, function(badThing) {
    console.log(&#39;Danger! stay away from &#39; + badThings.name);
  })
  .done(function(things) {
    console.log(&#39;there are &#39; + things.foods.length + &#39; things you can eat &#39; +
      &#39;and &#39; + things.badThings.length + &#39; that you shouldn\&#39;t.&#39;);
  });</code></pre>
<p>Have you used streaming JSON parser before?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-23-oboe-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-23-oboe-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 23 Jan 2014 17:46:38 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[autoprefixer]]></title>
            <description><![CDATA[<p><a href="https://github.com/ai/autoprefixer">autoprefixer</a> parses CSS and adds vendor prefixes to rules based on information from the glorious <a href="http://caniuse.com">Can I Use</a>.</p>
<pre><code>npm install autoprefixer</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/autoprefixer.svg" style="width: 200px; float: right" /></p>
<p>The best tool is a tool you can&#39;t see and one that does the work for you. This is the main idea behind <a href="https://github.com/ai/autoprefixer">autoprefixer</a>. The interface is simple: just forget about vendor prefixes and write normal CSS according to latest W3C specs. You don’t need a special language (like Sass) or special mixins. Of course, you can still use something like <a href="http://sass-lang.com/">SASS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> or <a href="http://www.lesscss.org/">LESS</a> because <a href="https://github.com/ai/autoprefixer">autoprefixer</a> is a postprocessor for CSS.</p>
<h2 id="features">Features</h2>
<ul>
<li>Because <a href="https://github.com/ai/autoprefixer">autoprefixer</a> uses actual data from <a href="http://caniuse.com">Can I Use</a>, it can also clean up your CSS and remove prefixes that are no longer needed.</li>
<li>Flexbox or gradients have different syntaxes in different browsers (sometimes you need to recalculate angles, sometimes you need 2 old properties instead of new one), but <a href="https://github.com/ai/autoprefixer">autoprefixer</a> hides this from you. Just code by latest W3C specs and Autoprefixer will produce the code for old browsers.</li>
<li>You can specify the browsers you want to target</li>
<li>Source map support</li>
</ul>
<h2 id="usage">Usage</h2>
<p>There&#39;s an incredible amount of ways you can use <a href="https://github.com/ai/autoprefixer">autoprefixer</a>:</p>
<ul>
<li>as a grunt task using <a href="https://github.com/nDmitry/grunt-autoprefixer">grunt-autoprefixer</a> plugin</li>
<li>with Compass</li>
<li>with Stylus</li>
<li>with Rails</li>
<li>with Mincer</li>
<li>with Middleman</li>
<li>with Node</li>
<li>with PHP</li>
</ul>
<p>There are plenty of examples and information on the <a href="https://github.com/ai/autoprefixer">autoprefixer</a>. Check it out!</p>
<p>I&#39;m completely in love with CSS preprocessors, they make life so much easier. I still go between <a href="http://www.lesscss.org/">LESS</a> and <a href="http://learnboost.github.io/stylus/">Stylus</a>, but more often lean towards LESS because it makes using <a href="http://getbootstrap.com/">Bootstrap</a> framework so much easier and so much more modular.</p>
<p>Do you use a CSS preprocessor? Which one?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-22-autoprefixer</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-22-autoprefixer</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 22 Jan 2014 17:35:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[js-yaml]]></title>
            <description><![CDATA[<p><a href="https://github.com/nodeca/js-yaml">js-yaml</a> is an implementation of <a href="http://yaml.org/">YAML</a> written by <a href="https://github.com/nodeca">Dervus Grim</a> and is a human friendly data serialization language. It started as <a href="http://pyyaml.org/">PyYAML</a> port, but was completely rewritten from scratch. Full support for 1.2 spec.</p>
<pre><code>npm install js-yaml</code></pre>
<h2 id="example">Example</h2>
<p>You can parse a YAML document into an object:</p>
<pre><code>var fs = require(&#39;fs&#39;);
var yaml = require(&#39;js-yaml&#39;);
var obj = yaml.load(fs.readFileSync(filename, &#39;utf8&#39;));</code></pre>
<p>And of course you can stringify an object into a YAML document:</p>
<pre><code>yaml.dump(object, opts);</code></pre>
<p>YAML to JSON is what CoffeeScript to JavaScript - pure awesomeness. On the surface it&#39;s a one to one data format that is much more human friendly. Under the surface, YAML allows you to reference other nodes and values within the document to avoid repetition. For example, the header for post in the source looks like this:</p>
<pre><code>npm:
  repo: &amp;repo nodeca/js-yaml
  name: &amp;name js-yaml
slug: *name
title: *name</code></pre>
<p>Where <code>&amp;name</code> is an anchor and repeated using <code>*name</code> reference. This is a very simple example, but anchors could point to entire nodes consisting of other references and objects. Checkout <a href="https://github.com/nodeca/js-yaml">js-yaml</a> repo for more examples and explanation.</p>
<p>YAML is awesome! I wish <code>package.json</code> was <code>package.yaml</code>. Are you using YAML in your project?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-21-js-yaml</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-21-js-yaml</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 21 Jan 2014 17:11:30 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[gaze]]></title>
            <description><![CDATA[<p><a href="https://github.com/shama/gaze">gaze</a> a globbing <code>fs.watch</code> wrapper written by <a href="https://github.com/shama">Kyle Robinson Young</a> and built from the best parts of other fine watch libs. Compatible with Node.js 0.10/0.8, Windows, OSX and Linux. There&#39;s a <a href="https://npmjs.org/browse/depended/gaze">pretty long list</a> of other great modules that are built on top of <a href="https://github.com/shama/gaze">gaze</a>.</p>
<pre><code>npm install gaze</code></pre>
<p><img src="https://github-camo.global.ssl.fastly.net/4b73eecb09b0400ba274ed9aa205da664ee5538e/687474703a2f2f646f6e746b72792e636f6d2f696d616765732f7265706f732f67617a652e706e67" style="width: 100%"/></p>
<h2 id="usage">Usage</h2>
<pre><code>var gaze = require(&#39;gaze&#39;);

// Watch all .js files/dirs in process.cwd()
gaze(&#39;**/*.js&#39;, function(err, watcher) {
  // Files have all started watching
  // watcher === this

  // Get all watched files
  console.log(this.watched());

  // On file changed
  this.on(&#39;changed&#39;, function(filepath) {
    console.log(filepath + &#39; was changed&#39;);
  });

  // On file added
  this.on(&#39;added&#39;, function(filepath) {
    console.log(filepath + &#39; was added&#39;);
  });

  // On file deleted
  this.on(&#39;deleted&#39;, function(filepath) {
    console.log(filepath + &#39; was deleted&#39;);
  });

  // On changed/added/deleted
  this.on(&#39;all&#39;, function(event, filepath) {
    console.log(filepath + &#39; was &#39; + event);
  });

  // Get watched files with relative paths
  console.log(this.relative());
});

// Also accepts an array of patterns
gaze([&#39;stylesheets/*.css&#39;, &#39;images/**/*.png&#39;], function() {
  // Add more patterns later to be watched
  this.add([&#39;js/*.js&#39;]);
});</code></pre>
<p>I&#39;ve been getting my feet wet with <a href="http://gulpjs.com">gulp.js</a> and specifically <a href="https://github.com/floatdrop/gulp-watch">gulp-watch</a> plugin which helps you process only the files that were changed. This helps to speed up asset building quite a bit.</p>
<p>Are you using any file watchers in your project?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-17-gaze</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-17-gaze</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Sat, 18 Jan 2014 01:50:40 GMT</pubDate>
        </item>
    </channel>
</rss>