<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 13 Feb 2014 21:39:02 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Thu, 13 Feb 2014 21:38:36 GMT</pubDate>
        <item>
            <title><![CDATA[domain-context]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/domain-context.jpg" style="width: 100%"/></p>
<p><a href="https://github.com/andreypopp/domain-context">domain-context</a> is a module by <a href="https://github.com/andreypopp">Andrey Popp</a> for dealing with globally accessible domain-bound contexts, connect/express middleware included.</p>
<pre><code>npm install domain-context</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>var connectDomain = require(&#39;connect-domain&#39;),
    domainContext = require(&#39;domain-context&#39;),
    express = require(&#39;express&#39;);

var lifecycle = {
  context: function() {
    return {db: new pg.Client(...)}
  },
  cleanup: function(context) {
    context.db.query(&#39;commit&#39;);
    context.db.end();
  },
  onError: function(err, context) {
    context.db.query(&#39;rollback&#39;);
    context.db.end();
  }
};

app = express();
app.use(connectDomain());
app.use(domainContext.middleware(lifecycle));

// Your applicaiton&#39;s middleware goes here
//
// Note that because of connect/express design you are required to place two
// middlewares around your application â€” domainContext.middleware() and
// domainContext.middlewareOnError().

app.use(domainContext.middlewareOnError(lifecycle));

// Now you can use domainContext.get() to query data from the currently active domain:

var domainContext = require(&#39;connect-reqcontext&#39;);

function getUserById(id, cb) {
  domainContext.get(&#39;db&#39;).query(&quot;select ...&quot;, cb);
}</code></pre>
<p>I feel that this is pretty self-explanatory here. Being able to get request context outside of the <code>express</code> handlers and not having to pass so much context around to API is pretty great.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-13-domain-context</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-13-domain-context</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 13 Feb 2014 21:20:38 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JSONStream]]></title>
            <description><![CDATA[<p><a href="https://github.com/dominictarr/JSONStream">JSONStream</a> is a module by <a href="https://github.com/dominictarr">Dominic Tarr</a> for streaming <code>JSON.parse</code> and <code>JSON.stringify</code>.</p>
<pre><code>npm install jsonstream</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>var request = require(&#39;request&#39;),
    JSONStream = require(&#39;JSONStream&#39;),
    es = require(&#39;event-stream&#39;)
    ;

var parser = JSONStream.parse([&#39;rows&#39;, true]),
    req = request({url: &#39;http://isaacs.couchone.com/registry/_all_docs&#39;}),
    logger = es.mapSync(function (data) {
      console.error(data);
      return data;
    })

request({url: &#39;http://isaacs.couchone.com/registry/_all_docs&#39;})
  .pipe(JSONStream.parse(&#39;rows.*&#39;))
  .pipe(es.mapSync(function (data) {
    console.error(data);
    return data;
  }));</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/json.svg" style="float: right; width: 100px; margin-left: 1em"/>
I like the idea behind streaming JSON alot because you don&#39;t have to wait for the whole document to come down the pipe, especially if it&#39;s very large. It can also integrate with <a href="http://gulpjs.com">gulp.js</a> very nicely. The really cool thing for me is that you can react to specific nodes in the data structure vs having to seek them out and loop over them manually.</p>
<p>Are you dealing with large JSON structures on your project?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-12-jsonstream</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-12-jsonstream</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 12 Feb 2014 18:07:44 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[peer.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/peerjs.png" style="float: right; margin-left: 1em"/>
<a href="https://github.com/peers/peerjs">peer.js</a> provides a complete, configurable, and easy-to-use peer-to-peer API built on top of WebRTC, supporting both data channels and media streams. <a href="https://github.com/peers/peerjs">peer.js</a> wraps the browser&#39;s WebRTC implementation to provide a complete, configurable, and easy-to-use peer-to-peer connection API. Equipped with nothing but an ID, a peer can create a P2P data or media stream connection to a remote peer.</p>
<pre><code>npm install peerjs</code></pre>
<p>To broker connections, <a href="https://github.com/peers/peerjs">peer.js</a> connects to a PeerServer (<a href="http://peerjs.com/peerserver">free hosted</a> or <a href="https://github.com/peers/peerjs-server">host your own</a>). Note that <strong>no peer-to-peer data goes through the server</strong> - the server acts only as connection broker.</p>
<h2 id="usage">Usage</h2>
<pre><code>var Peer = require(&#39;peerjs&#39;).Peer;

// You can pick your own id or omit the id if you want to get a random one from the server.
var peer = new Peer(&#39;pick-an-id&#39;, { key: &#39;myapikey&#39; });</code></pre>
<p>Connect</p>
<pre><code>var conn = peer.connect(&#39;another-peers-id&#39;);
conn.on(&#39;open&#39;, function() {
  conn.send(&#39;hi!&#39;);
});</code></pre>
<p>Receive</p>
<pre><code>peer.on(&#39;connection&#39;, function(conn) {
  conn.on(&#39;data&#39;, function(data) {
    // Will print &#39;hi!&#39;
    console.log(data);
  });
});</code></pre>
<p>Checkout the <a href="http://peerjs.com/docs/#api">awesome API docs</a> and take it out for a spin. You can create a video chat with just a few lines of code. Have you done any peer-to-peer stuff?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-11-peer-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-11-peer-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 11 Feb 2014 17:59:37 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[node-dependencies]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/91ab609100e96dd5ccb270399e1acab6" style="float: right; margin-left: 1em"/>
<a href="https://github.com/FogCreek/node-dependencies">node-dependencies</a> is a very basic but incredibly useful command line utility written by <a href="https://github.com/dpatti">Doug Patti</a> of <a href="https://www.fogcreek.com/">Fog Creek</a> that checks and prints out out-of-date dependencies for your Node.js app.</p>
<pre><code>npm install node-dependencies</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>$ node-dependencies --sort=urgency

Package                   Local      Major      Minor      Patch
tedious                   0.1.4        ---        ---      0.1.5
mongoose                 3.6.11        ---        ---   3.6.0rc1
optimist                  0.5.0        ---      0.6.0      0.5.2
redis                     0.8.1        ---        ---      0.8.3
underscore                1.4.3        ---        ---      1.4.4
less-middleware          0.1.11        ---        ---     0.1.12
express                   3.2.4        ---        ---      3.2.6
grunt                     0.4.1        ---        ---   0.4.0rc8
coffee-script             1.6.2        ---        ---      1.6.3
bcrypt                    0.7.5        ---        ---      0.7.6
knox                      0.8.2        ---        ---      0.8.3
coffee-backtrace          0.2.0        ---      0.3.4      0.2.1
socket.io                0.9.14        ---        ---    0.9.1-1
async                    0.1.22        ---      0.2.9        ---
mocha                     1.9.0        ---     1.11.0        ---
less                      1.3.3        ---   1.4.0-b4        ---
hbs                       2.1.0        ---      2.3.0        ---
grunt-ember-handleba      0.4.0        ---      0.6.0        ---
js-yaml                   1.0.3      2.1.0        ---        ---
ent                       0.0.5        ---        ---        ---
date-utils               1.2.13        ---        ---        ---
jquery                    1.8.3        ---        ---        ---</code></pre>
<p>I came about  trying to update dependencies for a whole bunch of NPM modules. It would be even more useful if it could update <code>package.json</code> for me.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-10-node-dependencies</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-10-node-dependencies</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 10 Feb 2014 18:57:16 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[cucumber.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/cucumber-logo.png" style="width: 100%; margin-bottom: 1em"/></p>
<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/cbc1acceddbfaceee4cf3cae24d7c912" style="float: right; margin-left: 1em"/>
<a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> is a port of the famous Ruby <a href="http://cukes.info/">Cucumber testing framework</a> by <a href="https://github.com/jbpros">Julien Biezemans</a> that lets software development teams describe how software should behave in plain text. The text is written in a business-readable domain-specific language and serves as documentation, automated tests and development-aid - all rolled into one format.</p>
<pre><code>npm install cucumber</code></pre>
<h2 id="features">Features</h2>
<p><a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> implements most of the Ruby counterpart&#39;s feature for feature and has baked in support for CoffeeScript.</p>
<h2 id="usage">Usage</h2>
<p>Features are written with the <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin syntax</a></p>
<pre><code># features/myFeature.feature

Feature: Example feature
  As a user of cucumber.js
  I want to have documentation on cucumber
  So that I can concentrate on building awesome applications

  Scenario: Reading documentation
    Given I am on the Cucumber.js GitHub repository
    When I go to the README file
    Then I should see &quot;Usage&quot; as the page title</code></pre>
<p>Then</p>
<pre><code>@Then &quot;I should see \&quot;$title\&quot; as the page title&quot;, (title, callback) -&gt;
  # the above string is converted to the following Regexp by Cucumber:
  # /^I should see &quot;([^&quot;]*)&quot; as the page title$/
  pageTitle = @browser.text(&quot;title&quot;)

  if title is pageTitle
    callback()
  else
    callback.fail new Error(&quot;Expected to be on page with title &quot; + title)</code></pre>
<p>or in JavaScript</p>
<pre><code>this.Then(&#39;I should see &quot;$title&quot; as the page title&#39;, function(title, callback) {
  // the above string is converted to the following Regexp by Cucumber:
  // /^I should see &quot;([^&quot;]*)&quot; as the page title$/

  var pageTitle = this.browser.text(&#39;title&#39;);
  if (title === pageTitle) {
    callback();
  } else {
    callback.fail(new Error(&quot;Expected to be on page with title &quot; + title));
  }
});</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/cucumber-meme.jpg" style="float: right; margin-left: 1em"/>
Writing <a href="https://github.com/cucumber/cucumber/wiki/Feature-Introduction">Cucumber scenarios</a> is pretty straight forward and is very addictive. I currently use <a href="http://visionmedia.github.io/mocha/">Mocha</a> and write <code>describe</code> and <code>it</code> blocks in nearly the same fasion so that they read as a cohesive story. Perhaps I should just use <a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> instead?</p>
<p><a href="http://www.martinfowler.com/bliki/BusinessReadableDSL.html">The pipe dream</a> is to be let business people to write software rules without involving programmers. I&#39;m on the fence if it&#39;s a good idea, or even if it&#39;s possible, but I used to write Cucumber tests back in my Ruby days and loved it!</p>
<p>Check out this <a href="http://flippinawesome.org/2014/01/27/bdd-in-javascript-with-cucumberjs/">awesome write up</a> on <a href="https://github.com/cucumber/cucumber-js">cucumber.js</a>. So, what do you think? Is Cucumber a good idea?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-05-cucumber-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-05-cucumber-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 05 Feb 2014 21:06:18 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[binary.js]]></title>
            <description><![CDATA[<p><a href="https://github.com/binaryjs/binaryjs">binary.js</a> is a lightweight framework by <a href="https://github.com/binaryjs">Eric Zhang</a> that utilizes websockets to send, stream, and pipe binary data bidirectionally between browser javascript.</p>
<pre><code>npm install binaryjs</code></pre>
<p><img class="hide-on-mobile" src="https://pbs.twimg.com/profile_images/1896980487/418999_10151351854540262_653030261_23084074_1065502090_n_bigger.jpg" style="float: right; margin-left: 1em"/></p>
<h2 id="features">Features</h2>
<ul>
<li>BinaryPack serialization format is fast, binary, and JSON-type compatible. Data stays binary end to end</li>
<li>Automatically chunks large binary data buffers for streaming performance</li>
<li>Send multiple streams of data concurrently over multiplexed websocket connection</li>
<li>API implements Node.js read/write Streams. You can pipe any stream into BinaryJS streams (and vice-versa)</li>
<li><code>pause</code>, <code>resume</code>, and <code>end</code> as in the Streams API</li>
<li>Currently supports Chrome 15+ and Firefox 11+, IE10. Fallbacks that will support Safari, mobile iOS and Android, and older FF/Chrome versions are in the works.</li>
</ul>
<h2 id="what-can-you-do-with-this-">What can you do with this?</h2>
<p>You have just as much flexibility as a full TCP socket between client and server. Here are some ideas by <a href="https://github.com/binaryjs">Eric Zhang</a> that are now possible:</p>
<ul>
<li>Realtime multiplayer video games without expensive stringifying</li>
<li>Streaming FLAC into HTML5 WebAudio api</li>
<li>Progressive image loading (for retina displays and high-res photorgraphy)</li>
<li>Streaming file uploads</li>
<li>Live HTML <code>&lt;video&gt;</code> streaming</li>
<li>PJAX (pushState + ajax) with no HTTP requests. Not even for image assets</li>
<li>Video/audio chat over websockets</li>
</ul>
<h2 id="usage">Usage</h2>
<p>Server</p>
<pre><code>var server = BinaryServer({port: 9000});

server.on(&#39;connection&#39;, function(client){
  client.on(&#39;stream&#39;, function(stream, meta){
    var file = fs.createWriteStream(meta.file);
    stream.pipe(file);
  });
});</code></pre>
<p>Browser:</p>
<pre><code>var client = BinaryClient(&#39;ws://localhost:9000&#39;);

client.on(&#39;open&#39;, function(stream){
  var stream = client.createStream({file: &#39;hello.txt&#39;});
  stream.write(&#39;Hello&#39;);
  stream.write(&#39;World!&#39;);
  stream.end();
});</code></pre>
<p>Check out <a href="https://github.com/binaryjs/binaryjs/blob/master/doc/start.md">getting started</a> page and <a href="for extensive documentation">binaryjs.com</a>. Thanks <a href="https://github.com/binaryjs">Eric Zhang</a> for making this happen!</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-04-binary-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-04-binary-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 04 Feb 2014 17:41:51 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[power-assert]]></title>
            <description><![CDATA[<p><a href="https://github.com/twada/power-assert">power-assert</a> is a module written by <a href="https://github.com/twada">Takuto Wada</a> that provides pretty damn descriptive assert messages for your tests.</p>
<pre><code>npm install power-assert</code></pre>
<h2 id="features">Features</h2>
<p><a href="https://github.com/twada/power-assert">power-assert</a> transforms your regular boring asserts to this:</p>
<pre><code>AssertionError: # /path/to/examples/mocha_node.js:10

    assert(this.ary.indexOf(who) === two);
                |   |       |    |   |
                |   |       |    |   2
                |   |       |    false
                |   -1      &quot;ariya&quot;
                [1,2,3]</code></pre>
<h2 id="usages">Usages</h2>
<p>There are two ways to use <a href="https://github.com/twada/power-assert">power-assert</a>.</p>
<ol>
<li><code>power-assert</code> + <code>espower-loader</code> : Only works under Node.</li>
<li><code>power-assert</code> + <a href="http://github.com/twada/grunt-espower"><code>grunt-espower</code></a> or <a href="http://github.com/twada/gulp-espower"><code>gulp-espower</code></a> : Generates instrumented code so works anywhere.</li>
</ol>
<p>To give you an idea what the trasnformed code looks like, for example, it transforms:</p>
<pre><code>assert(this.ary.indexOf(who) === two);</code></pre>
<p>into:</p>
<pre><code>assert(assert._expr(assert._capt(assert._capt(assert._capt(this.ary, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 20
    }
}).indexOf(assert._capt(who, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 32
    }
})), &#39;funcall&#39;, {
    start: {
        line: 9,
        column: 24
    }
}) === assert._capt(two, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 41
    }
}), &#39;binary&#39;, {
    start: {
        line: 9,
        column: 37
    }
}), {
    start: {
        line: 9,
        column: 15
    },
    path: &#39;/Users/alexgorbatchev/1-npmawesome/1/power-assert-demo/test/power_assert/mocha_power_assert_test.js&#39;
}, &#39;        assert(this.ary.indexOf(who) === two);&#39;));</code></pre>
<p><a href="https://github.com/twada/power-assert">power-assert</a> also works with CoffeeScript files to produce output:</p>
<pre><code>AssertionError:

    assert this.ary.indexOf(who) isnt minusOne
                |   |       |    |    |
                |   |       |    |    -1
                |   |       |    false
                |   -1      &quot;ariya&quot;
                [1,2,3]</code></pre>
<p>I&#39;m very tempted to give this a try over my goto <a href="http://chaijs.com/">chai.js</a> library. I&#39;m a little bit worried that it changes number of lines and it might be harder to do certain type of debugging, but the benefit might be worth it!</p>
<p>There&#39;s a full documentation on the <a href="https://github.com/twada/power-assert">power-assert</a> github page and a <a href="https://github.com/twada/power-assert-demo">demo project</a>. What do you think?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-03-power-assert</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-03-power-assert</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 03 Feb 2014 18:59:55 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[coupon-code]]></title>
            <description><![CDATA[<p><a href="https://github.com/appsattic/node-coupon-code">coupon-code</a> implementation of Perl&#39;s <a href="https://github.com/grantm/Algorithm-CouponCode">Algorithm::CouponCode</a> written by <a href="https://github.com/appsattic">Andrew Chilton</a>. It is meant to solve a what appears on the surface very simple problem - coupon code validation. You would imagine printing codes on paper cups and then having user enter them - pretty straight forward. What happens however when user confuses zero for letter O, or five for S? Should you tell them their code is invalid?</p>
<pre><code>npm install coupon-code</code></pre>
<h2 id="usage">Usage</h2>
<p>Lets say you issue a code and print it on a coffee cup.</p>
<pre><code>var cc = require(&#39;coupon-code&#39;);

var code = cc.generate();
// 55G2-DHM0-50NN</code></pre>
<p>Somebody enjoyed their coffee and decided to enter the code, which now, upon inspection, is a little bit wet and fuzzy. They enter:</p>
<pre><code>cc.validate(&#39;s5g2-dhmo-50nn&#39;);
// true</code></pre>
<p>You can also specify size of the desired code:</p>
<pre><code>cc.generate();
// 55G2-DHM0-50NN

cc.generate({ parts : 4 });
// U5H9-HKDH-8RNX-1EX7

cc.generate({ partLen : 6 });
// WYLKQM-U35V40-9N84DA</code></pre>
<p>Pretty cool, eh? Until finding this package, I haven&#39;t given this problem a second thought. Have you dealt with coupon codes in your app?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-31-coupon-code</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-31-coupon-code</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 31 Jan 2014 17:35:42 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[rewire]]></title>
            <description><![CDATA[<p><a href="https://github.com/jhnns/rewire">rewire</a> is a dependency injection module for node.js applications written by <a href="https://github.com/jhnns">Johannes Ewald</a>. It adds a special setter and getter to modules so you can modify their behaviour for better unit testing.</p>
<pre><code>npm install rewire</code></pre>
<h2 id="features">Features</h2>
<ul>
<li>Inject mocks for other modules or globals like process</li>
<li>Leak private variables</li>
<li>Override variables within the module</li>
<li>Works with CoffeeScript</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>var rewire = require(&quot;rewire&quot;);

// rewire acts exactly like require.
var myModule = rewire(&quot;./myModule.js&quot;);

// Just with one difference:
// Your module will now export a special setter and getter for private variables.
myModule.__set__(&quot;myPrivateVar&quot;, 123);
myModule.__get__(&quot;myPrivateVar&quot;); // = 123

// This allows you to mock almost everything within the module e.g. the fs-module.
// Just pass the variable name as first parameter and your mock as second.
myModule.__set__(&quot;fs&quot;, {
  readFile: function (path, encoding, cb) {
    cb(null, &quot;Success!&quot;);
  }
});

myModule.readSomethingFromFileSystem(function (err, data) {
  console.log(data); // = Success!
});

// You can set different variables with one call.
myModule.__set__({
  fs: fsMock,
  http: httpMock,
  someOtherVar: &quot;hello&quot;
});

// You may also override globals. These changes are only within the module, so
// you don&#39;t have to be concerned that other modules are influenced by your mock.
myModule.__set__({
  console: {
    log: function () { /* be quiet */ }
  }
});</code></pre>
<p>The biggest difference between <code>rewire</code> and <code>require</code> is that calling <code>rewire</code> multiple times gives you a new module instance every time. Something to keep in mind.</p>
<p>This seems like a good and bad idea at the same time. The power to change and introspect private variables might lead to code that isn&#39;t exactly very suitable for tests. I find that writing code to be testable leads to much better code structure and I spend alot more time considering my API.</p>
<p>What do you think?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-30-rewire</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-30-rewire</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 30 Jan 2014 17:49:19 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[yarm]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/b928accd038cf24ef3f14cb5dd758b04" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/njoyard/yarm">yarm</a> is Yet Another REST Middleware for node.js and Express written by <a href="https://github.com/njoyard">Nicolas Joyard</a>. It has no dependencies, however it is intended to be used with <a href="http://expressjs.com/">Express</a> and will have additional features if <a href="http://mongoosejs.com/">Mongoose</a> is present.</p>
<pre><code>npm install yarm</code></pre>
<h2 id="features">Features</h2>
<p>The list of features is very extensive. <a href="https://github.com/njoyard/yarm">yarm</a> creates REST style APIs for native objects, <a href="http://mongoosejs.com/">Mongoose</a> and allows you to have pretty tight control over what&#39;s happening. There&#39;s a long list of customization options that let you specify output format, what&#39;s included, how MongoDB collection are fetched, permissions and so.</p>
<h2 id="usage">Usage</h2>
<pre><code>var app = require(&quot;express&quot;)();
var yarm = require(&quot;yarm&quot;);
var mongoose = require(&quot;mongoose&quot;);

app.use(&quot;/rest&quot;, yarm());

var postSchema = new mongoose.Schema({
  title: String,
  text: String,
  comments: [{
    author: String,
    text: String
  }]
});

var Post = mongoose.model(&quot;post&quot;, postSchema);

yarm.mongoose(&quot;posts&quot;, Post);

app.listen(80);

$ curl http://localhost/rest/posts?skip=10&amp;limit=1
{
  &quot;_count&quot;: 42,
  &quot;_items&quot;: [
    {
      &quot;_id&quot;: &quot;507f191e810c19729de860ea&quot;,
      &quot;title&quot;: &quot;My 11th post&quot;,
      &quot;text&quot;: &quot;Hello, World&quot;,
      &quot;comments&quot;: [
        {
          &quot;author&quot;: &quot;Bob&quot;,
          &quot;text&quot;: &quot;First !&quot;
        }
      ]
    }
  ]
}

$ curl http://localhost/rest/posts/507f191e810c19729de860ea
{
  &quot;_id&quot;: &quot;507f191e810c19729de860ea&quot;,
  &quot;title&quot;: &quot;My 11th post&quot;,
  &quot;text&quot;: &quot;Hello, World&quot;,
  &quot;comments&quot;: [
    {
      &quot;author&quot;: &quot;Bob&quot;,
      &quot;text&quot;: &quot;First !&quot;
    }
  ]
}

$ curl http://localhost/rest/posts/507f191e810c19729de860ea/comments/0/text
First !</code></pre>
<p>You can roll your own:</p>
<pre><code>resource
  .get(function(req, cb) {
    // GET handler
  })
  .put(function(req, isPatch, cb) {
    // PUT and PATCH handler
  })
  .post(function(req, cb) {
    // POST handler
  })
  .del(function(req, cb) {
    // DELETE handler
  });</code></pre>
<p>Of course, you can have nested resources.</p>
<pre><code>yarm.resource(&quot;/posts/:pid&quot;).sub(&quot;comments/:cid/*&quot;).get(function(req, cb) {
  cb(null, { ... });
});

$ curl http://localhost/rest/posts/first-post/comments/3/foo/bar
...</code></pre>
<p>Check out <a href="https://github.com/njoyard/yarm">yarm</a> github page for complete documentation. How do you handle your APIs?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-29-yarm</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-29-yarm</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 29 Jan 2014 17:37:23 GMT</pubDate>
        </item>
    </channel>
</rss>