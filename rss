<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 09 Jan 2014 18:18:14 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Thu, 09 Jan 2014 18:17:05 GMT</pubDate>
        <item>
            <title><![CDATA[gulp]]></title>
            <description><![CDATA[<p><a href="https://github.com/gulpjs/gulp">gulp</a> is a streaming build and task runner system. It&#39;s an alternative to the ever prelific <a href="http://gruntjs.com/">grunt.js</a>. There&#39;s been quite <a href="https://twitter.com/search?q=gulp%20grunt&amp;src=typd">a bit of buzz on the twitters</a>.</p>
<h2 id="example">Example</h2>
<p>This file is just a quick sample to give you a taste of what gulp does.</p>
<pre><code>var gulp = require(&#39;gulp&#39;);
var uglify = require(&#39;gulp-uglify&#39;);
var imagemin = require(&#39;gulp-imagemin&#39;);

gulp.task(&#39;scripts&#39;, function() {
  // Minify and copy all JavaScript (except vendor scripts)
  return gulp.src([&#39;client/js/**/*.js&#39;, &#39;!client/js/vendor/**&#39;])
    .pipe(uglify())
    .pipe(gulp.dest(&#39;build/js&#39;));
});

// Copy all static images
gulp.task(&#39;images&#39;, function() {
 return gulp.src(&#39;client/img/**&#39;)
    .pipe(imagemin())
    .pipe(gulp.dest(&#39;build/img&#39;));
});

// The default task (called when you run `gulp`)
gulp.task(&#39;default&#39;, function() {
  gulp.run(&#39;scripts&#39;, &#39;images&#39;);

  // Watch files and run tasks if they change
  gulp.watch(&#39;client/js/**&#39;, function() {
    gulp.run(&#39;scripts&#39;);
  });

  gulp.watch(&#39;client/img/**&#39;, function() {
    gulp.run(&#39;images&#39;);
  });
});</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/gulp.png" style="width: 150px; float: right" /></p>
<h2 id="opinion">Opinion</h2>
<p>There&#39;s always a lot of excitement when a new thing comes out that promises to be better than the current thing. It seems to be especially true when the current thing is already pretty solid and just works. What gets to people are the edge cases and they feel annoyed and frustrated easily forgetting how smoothly the rest of the system works.</p>
<p><a href="https://github.com/bevacqua">Nicolas Bevacqua</a> has written a <a href="http://blog.ponyfoo.com/2014/01/09/gulp-grunt-whatever">very interesting article</a> on the subject. My favorite quote:</p>
<blockquote>
<p>Make a choice by yourself, don&#39;t just pick something <em>because XYZ said so</em>. Pick the tool which works for you. The one you understand, are comfortable with. Above all, <strong>the one that fits your needs</strong>. Don&#39;t go blindly chasing the latest fad because someone else tells you to. Similarly, don&#39;t get stuck with monolithic jQuery applications (just to give out an example), try something else. Innovate. Be the change you want to see in the world.</p>
</blockquote>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-09-gulp</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2014-01-09-gulp            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 09 Jan 2014 17:57:52 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[chalk]]></title>
            <description><![CDATA[<p><a href="https://github.com/sindresorhus/chalk">chalk</a> is a clean and focused alternative to <a href="https://github.com/Marak/colors.js">colors.js</a>, which is currently the most popular string styling module, but it has serious deficiencies like extending String.prototype which causes all kinds of <a href="https://github.com/yeoman/yo/issues/68">problems</a>. Although there are other ones, they either do too much or not enough.</p>
<pre><code>npm install chalk</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/chalk.png" style="width: 250px; float: right" /></p>
<h2 id="why">Why</h2>
<ul>
<li><strong>Doesn&#39;t extend String.prototype</strong></li>
<li>Expressive API</li>
<li>Clean and focused</li>
<li>Auto-detects color support</li>
<li>Actively maintained</li>
<li><a href="https://npmjs.org/browse/depended/chalk">Used by 150+ modules</a></li>
</ul>
<h2 id="example">Example</h2>
<pre><code>var chalk = require(&#39;chalk&#39;);

// style a string
console.log(  chalk.blue(&#39;Hello world!&#39;)  );

// combine styled and normal strings
console.log(  chalk.blue(&#39;Hello&#39;), &#39;World&#39; + chalk.red(&#39;!&#39;)  );

// compose multiple styles using the chainable API
console.log(  chalk.blue.bgRed.bold(&#39;Hello world!&#39;)  );

// nest styles
console.log(  chalk.red(&#39;Hello&#39;, chalk.underline.bgBlue(&#39;world&#39;) + &#39;!&#39;)  );

// pass in multiple arguments
console.log(  chalk.blue(&#39;Hello&#39;, &#39;World!&#39;, &#39;Foo&#39;, &#39;bar&#39;, &#39;biz&#39;, &#39;baz&#39;)  );</code></pre>
<p><a href="https://github.com/sindresorhus/chalk">chalk</a> was written by <a href="https://github.com/sindresorhus">Sindre Sorhus</a> <a href="https://twitter.com/sindresorhus">@sindresorhus</a> who&#39;s got a ton of other opensource work. Thank you!</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-06-chalk</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2014-01-06-chalk            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 07 Jan 2014 00:17:02 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[recluster]]></title>
            <description><![CDATA[<p><a href="https://github.com/doxout/recluster">recluster</a> is a clustering library with support for zero-downtime reloading.</p>
<pre><code>npm install recluster</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/recluster.jpg" style="width: 250px; float: right" /></p>
<p>Delivering that 100% uptime for web apps can be a tricky business. Errors and new code rollouts are the things we have to deal with on a daily basis and if you run continuous integration, your app is probably restarting many times a day. What kind of experience this might be creating for your users?</p>
<p><a href="https://github.com/doxout/recluster">recluster</a> is among a <a href="https://github.com/nodejitsu/forever">few</a> <a href="https://github.com/superjoe30/naught">other</a> libraries that try to address this issue. It is:</p>
<ul>
<li>Cluster aware.</li>
<li>Zero downtime errors and deploys.</li>
<li>Does not run as daemon.</li>
<li>Log agnostic.</li>
<li>Simple, relatively easy to reason about.</li>
</ul>
<h2 id="example">Example</h2>
<p>If <code>server.js</code> is your regular http server (e.g. express), create <code>cluster.js</code> and add:</p>
<pre><code>var recluster = require(&#39;recluster&#39;),
    path = require(&#39;path&#39;);

var cluster = recluster(path.join(__dirname, &#39;server.js&#39;));
cluster.run();

process.on(&#39;SIGUSR2&#39;, function() {
    console.log(&#39;Got SIGUSR2, reloading cluster...&#39;);
    cluster.reload();
});

console.log(&quot;spawned cluster, kill -s SIGUSR2&quot;, process.pid, &quot;to reload&quot;);</code></pre>
<p>then run it</p>
<pre><code>node cluster.js</code></pre>
<p>To hot-reload the server, simply run</p>
<pre><code>kill -s SIGUSR2 &lt;cluster_pid&gt;</code></pre>
<p>A server worker can gracefully exit by cleaning up in the &#39;close&#39; event of its server:</p>
<pre><code>server.on(&#39;close&#39;, function() {
    // cleanup
});</code></pre>
<p>Non-server workers can listen for the disconnect command and shut down gracefully before the kill timeout:</p>
<pre><code>process.on(&#39;message&#39;, function(m) {
    if (m.cmd == &#39;disconnect&#39;) {
        // cleanup
    }
})</code></pre>
<p>For some fantastic insights on the subject, checkout <a href="http://sandinmyjoints.github.io/towards-100-pct-uptime">Towards 100% Uptime with Node.js</a> slides by <a href="https://github.com/sandinmyjoints">William Bert</a> <a href="https://twitter.com/williamjohnbert">@williamjohnbert</a> and <a href="http://qzaidi.github.io/2013/05/14/node-in-production/">10 steps to nodejs nirvana in production</a> by <a href="http://github.com/qzaidi">Qasim Zaidi</a> <a href="http://twitter.com/#!/kernelhacker">@kernelhacker</a>.</p>
<p>Curious, how do you manage your node process?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-31-recluster</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-31-recluster            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 31 Dec 2013 18:45:13 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[rework]]></title>
            <description><![CDATA[<p><a href="https://github.com/reworkcss/rework">rework</a> is a tool for CSS manipulations built on css, allowing you to automate vendor prefixing, create your own properties, inline images, anything you can imagine! Also works in the browser.</p>
<pre><code>npm install rework</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/rework.gif" style="width: 250px; float: right" /></p>
<p>Originally written by TJ Holowaychuk, <a href="https://github.com/reworkcss/rework">rework</a> is a module for working with CSS. Just like <a href="https://github.com/ariya/esprima">esprima</a> for JavaScript, <a href="https://github.com/reworkcss/rework">rework</a> allows you to change and extend CSS, basically take it to a whole new level.</p>
<h2 id="example">Example</h2>
<p>To get an idea of how to use <a href="https://github.com/reworkcss/rework">rework</a>, take a look at one of the many plugins. A good example would be <a href="https://github.com/simme/rework-imagesize">rework-imagesize</a> plugin.</p>
<pre><code>var rework = require(&#39;rework&#39;);
var size   = require(&#39;rework-imagesize&#39;);

var css = rework(str)
  .use(size(&#39;path/to/images/folder&#39;))
  .toString();</code></pre>
<p>Using the above JavaScript. This:</p>
<pre><code>h1 {
  background: url(&#39;myimage.png&#39;);
  imgsize: myimage.png;
  text-indent: 100%;
}</code></pre>
<p>Would produce something like:</p>
<pre><code>h1 {
  background: url(&#39;myimage.png&#39;);
  text-indent: 100%;
  height: 201px;
  width: 300px;
}</code></pre>
<p><a href="https://github.com/reworkcss">Rework Github</a> account has a good number of modules to do various things to your CSS. I also like the idea of using <a href="https://github.com/reworkcss/rework">rework</a> as a post processor for your favourite dynamic CSS language, such as <a href="http://lesscss.org/">LESS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> or <a href="https://github.com/andrew/node-sass">SASS</a>.</p>
<p>Curious what is your favourite dynamic CSS framework?</p>
<p><em>Image borrowed from <a href="http://www.horriblelogos.com/rework-digital/">horrible logos</a> and isn&#39;t the official logo :)</em></p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-30-rework</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-30-rework            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 30 Dec 2013 18:27:29 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[cheerio]]></title>
            <description><![CDATA[<p><a href="https://github.com/MatthewMueller/cheerio">cheerio</a> is a fast, flexible, and lean implementation of core jQuery designed specifically for the server.</p>
<pre><code>npm install cheerio</code></pre>
<h2 id="features">Features</h2>
<p><img class="hide-on-mobile" src="/images/posts/cheerio.jpg" style="width: 150px; float: right" /></p>
<ul>
<li>Familiar syntax. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> implements a subset of core jQuery. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing its truly gorgeous API.</li>
<li>Blazingly fast. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient. Preliminary end-to-end benchmarks suggest that <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> is about 8x faster than JSDOM.</li>
<li>Insanely flexible. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> wraps around <a href="https://twitter.com/fb55">@FB55</a>&#39;s <a href="https://github.com/fb55/htmlparser2">forgiving htmlparser</a>. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> can parse nearly any HTML or XML document.</li>
</ul>
<h2 id="example">Example</h2>
<pre><code>var cheerio = require(&#39;cheerio&#39;),
    $ = cheerio.load(&#39;&lt;h2 class=&quot;title&quot;&gt;Hello world&lt;/h2&gt;&#39;);

$(&#39;h2.title&#39;).text(&#39;Hello there!&#39;);
$(&#39;h2&#39;).addClass(&#39;welcome&#39;);

$.html();
//=&gt; &lt;h2 class=&quot;title welcome&quot;&gt;Hello there!&lt;/h2&gt;</code></pre>
<h2 id="screencast-introduction">Screencast Introduction</h2>
<iframe src="//player.vimeo.com/video/31950192" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

<p>Are you using jQuery on the server side?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-27-cheerio</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-27-cheerio            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 27 Dec 2013 17:19:30 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[dat]]></title>
            <description><![CDATA[<p><a href="https://github.com/maxogden/dat">dat</a> is a project that seeks providing better tools for data collaboration.</p>
<pre><code>npm install dat</code></pre>
<h2 id="what-is-dat-">What is dat?</h2>
<p><img class="hide-on-mobile" src="/images/posts/dat.png" style="float: right" /></p>
<p>I like the name, makes for clever titles like this :) Anyways, dat:</p>
<ul>
<li>make data syncable. automatic sync and updates of entire data sets (or subsets)</li>
<li>data sets can be very large (billions of items) or updated frequently (real time data)</li>
<li>sync and transformation plugin API to connect dat to any existing database/format/language</li>
<li>built with automated + decentralized workflows in mind</li>
</ul>
<p>To illustrate the goals of <code>dat</code> consider the GitHub project, which is a great model of this idea working in a different space. GitHub is built on top of an open source tool called <code>git</code> and provides a user-friendly web application that lets software developers find code written by others, use it in their own programs and improve upon it. In a similar fashion <code>dat</code> will be developed as a set of tools to store, synchronize, manipulate and collaborate in a decentralized fashion on sets of data, hopefully enabling platforms analogous to GitHub to be built on top of it.</p>
<p>The concept sounds pretty amazing to me. Currently <code>dat</code> is in pre-alpha stage but with full time support from <a href="http://maxogden.com/gut-hosted-open-data-filets.html">Max Ogden</a> it will evolve very quickly.</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/FX7qSwz3SCk" frameborder="0" allowfullscreen></iframe>

<p>Aside from a truly epic beard, Max also has a <a href="http://www.youtube.com/watch?v=FX7qSwz3SCk">cool talk</a> on YouTube introducing <code>dat</code>. Have you gotten any ideas on how this could be used yet?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-19-dat</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-19-dat            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 19 Dec 2013 18:08:03 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[xregexp]]></title>
            <description><![CDATA[<p><a href="https://github.com/slevithan/xregexp">xregexp</a> provides augmented and extensible JavaScript regular expressions. You get new syntax, flags, and methods beyond what browsers support natively. XRegExp is also a regex utility belt with tools to make your client-side grepping simpler and more powerful, while freeing you from worrying about pesky cross-browser inconsistencies and the dubious lastIndex property.</p>
<pre><code>npm install xregexp</code></pre>
<h2 id="usage-examples">Usage examples</h2>
<p><a href="http://www.bennadel.com/blog/2383-The-5th-Annual-Regular-Expression-Day-And-Prizes-June-1st-2012.htm"><img class="hide-on-mobile" src="http://www.bennadel.com/resources/regexday/2011/photos/1__original.jpg" style="width: 300px; float: right" /></a></p>
<pre><code>// Using named capture and flag x (free-spacing and line comments)
var date = XRegExp(&#39;(?&lt;year&gt;  [0-9]{4} ) -?  # year  \n\
                    (?&lt;month&gt; [0-9]{2} ) -?  # month \n\
                    (?&lt;day&gt;   [0-9]{2} )     # day   &#39;, &#39;x&#39;);

// XRegExp.exec gives you named backreferences on the match result
var match = XRegExp.exec(&#39;2012-02-22&#39;, date);
match.year; // -&gt; &#39;2012&#39;

// It also includes optional pos and sticky arguments
var pos = 3, result = [];
while (match = XRegExp.exec(&#39;&lt;1&gt;&lt;2&gt;&lt;3&gt;&lt;4&gt;5&lt;6&gt;&#39;, /&lt;(\d+)&gt;/, pos, &#39;sticky&#39;)) {
  result.push(match[1]);
  pos = match.index + match[0].length;
} // result -&gt; [&#39;2&#39;, &#39;3&#39;, &#39;4&#39;]

// XRegExp.replace allows named backreferences in replacements
XRegExp.replace(&#39;2012-02-22&#39;, date, &#39;${month}/${day}/${year}&#39;); // -&gt; &#39;02/22/2012&#39;
XRegExp.replace(&#39;2012-02-22&#39;, date, function(match) {
  return match.month + &#39;/&#39; + match.day + &#39;/&#39; + match.year;
}); // -&gt; &#39;02/22/2012&#39;</code></pre>
<h2 id="addons">Addons</h2>
<p>Addons are one of the more impressive features of <a href="https://github.com/slevithan/xregexp">xregexp</a>. In particular, the <code>matchRecursive</code> addon allows you to match balanced brackets and quotes, which is otherwise impossible with regular regex (.NET had this extension built in for some time now however).</p>
<p>In browsers, first include the script:</p>
<pre><code>&lt;script src=&quot;src/xregexp.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;src/addons/matchrecursive.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>You can then match recursive constructs using XRegExp pattern strings as left and right delimiters:</p>
<pre><code>var str = &#39;(t((e))s)t()(ing)&#39;;
XRegExp.matchRecursive(str, &#39;\\(&#39;, &#39;\\)&#39;, &#39;g&#39;);
// -&gt; [&#39;t((e))s&#39;, &#39;&#39;, &#39;ing&#39;]

// Extended information mode with valueNames
str = &#39;Here is &lt;div&gt; &lt;div&gt;an&lt;/div&gt;&lt;/div&gt; example&#39;;
XRegExp.matchRecursive(str, &#39;&lt;div\\s*&gt;&#39;, &#39;&lt;/div&gt;&#39;, &#39;gi&#39;, {
    valueNames: [&#39;between&#39;, &#39;left&#39;, &#39;match&#39;, &#39;right&#39;]
});
/* -&gt; [
{name: &#39;between&#39;, value: &#39;Here is &#39;,       start: 0,  end: 8},
{name: &#39;left&#39;,    value: &#39;&lt;div&gt;&#39;,          start: 8,  end: 13},
{name: &#39;match&#39;,   value: &#39; &lt;div&gt;an&lt;/div&gt;&#39;, start: 13, end: 27},
{name: &#39;right&#39;,   value: &#39;&lt;/div&gt;&#39;,         start: 27, end: 33},
{name: &#39;between&#39;, value: &#39; example&#39;,       start: 33, end: 41}
] */

// Omitting unneeded parts with null valueNames, and using escapeChar
str = &#39;...{1}\\{{function(x,y){return y+x;}}&#39;;
XRegExp.matchRecursive(str, &#39;{&#39;, &#39;}&#39;, &#39;g&#39;, {
    valueNames: [&#39;literal&#39;, null, &#39;value&#39;, null],
    escapeChar: &#39;\\&#39;
});
/* -&gt; [
{name: &#39;literal&#39;, value: &#39;...&#39;, start: 0, end: 3},
{name: &#39;value&#39;,   value: &#39;1&#39;,   start: 4, end: 5},
{name: &#39;literal&#39;, value: &#39;\\{&#39;, start: 6, end: 8},
{name: &#39;value&#39;,   value: &#39;function(x,y){return y+x;}&#39;, start: 9, end: 35}
] */

// Sticky mode via flag y
str = &#39;&lt;1&gt;&lt;&lt;&lt;2&gt;&gt;&gt;&lt;3&gt;4&lt;5&gt;&#39;;
XRegExp.matchRecursive(str, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;gy&#39;);
// -&gt; [&#39;1&#39;, &#39;&lt;&lt;2&gt;&gt;&#39;, &#39;3&#39;]</code></pre>
<p>XRegExp.matchRecursive throws an error if it scans past an unbalanced delimiter in the target string.</p>
<p>I&#39;ve been using <a href="https://github.com/slevithan/xregexp">xregexp</a> in <a href="https://github.com/alexgorbatchev/SyntaxHighlighter">SyntaxHighlighter</a> for a while now. My favourite feature is named captures, which JavaScript is desperately missing. Have you used <a href="https://github.com/slevithan/xregexp">xregexp</a> already? How?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-18-xregexp</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-18-xregexp            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 19 Dec 2013 01:27:16 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[npm v1.3.18]]></title>
            <description><![CDATA[<p>NPM v1.3.18 release notes:</p>
<ul>
<li><p>Added an <code>--ignore-scripts</code> option, which will prevent package.json scripts from being run. Most notably, this will work on npm install, so e.g. npm install <code>--ignore-scripts</code> will not run preinstall and prepublish scripts. (<a href="https://github.com/isaacs/npm/commit/d7e67bf0d94b085652ec1c87d595afa6f650a8f6">d7e67bf</a>, @sqs)</p>
</li>
<li><p>Fixed a bug introduced in 1.3.16 that would manifest with certain cache configurations, by causing spurious errors saying &quot;Adding a cache directory to the cache will make the world implode.&quot; (<a href="https://github.com/isaacs/npm/commit/966373fad8d741637f9744882bde9f6e94000865">966373f</a>, @domenic)</p>
</li>
<li><p>Re-fixed the multiple download of URL dependencies, whose fix was reverted in 1.3.17. (<a href="https://github.com/isaacs/npm/commit/a362c3f1919987419ed8a37c8defa19d2e6697b0">a362c3f</a>, @spmason)</p>
</li>
</ul>
<p><a href="https://github.com/isaacs/npm/releases/tag/v1.3.18">https://github.com/isaacs/npm/releases/tag/v1.3.18</a></p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-17-npm</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-17-npm            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 17 Dec 2013 18:41:23 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ect]]></title>
            <description><![CDATA[<p><a href="https://github.com/baryshev/ect">ect</a> is a <a href="http://ectjs.com/#benchmark">performance focused</a> JavaScript template engine with embedded CoffeeScript syntax. <a href="http://ectjs.com">Just try demo</a> to check all features.</p>
<pre><code>npm install ect</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/coffeescript.png" style="float: right" /></p>
<h2 id="features">Features</h2>
<ul>
<li>Excellent performance</li>
<li>Templates caching</li>
<li>Automatic reloading of changed templates</li>
<li>CoffeeScript code in templates</li>
<li>Multi-line expressions support</li>
<li>Tag customization support</li>
<li>Node.JS and client-side support</li>
<li>Powerful but simple syntax</li>
<li>Inheritance, partials, blocks</li>
<li>Compatible with <code>express</code></li>
<li>Compatible with <code>RequireJS</code></li>
<li>Backward compatible with <code>eco</code></li>
<li><a href="https://github.com/TurtlePie/Sublime-ECT">Syntax highlighting for Sublime Text 2</a> by <a href="https://github.com/TurtlePie">TurtlePie</a></li>
</ul>
<h2 id="example">Example</h2>
<p>app.js</p>
<pre><code>express = require(&quot;express&quot;)
app = express()
ECT = require(&quot;ect&quot;)
ectRenderer = ECT watch: true, root: __dirname + &quot;/views&quot;
app.engine &quot;.ect&quot;, ectRenderer.render

app.get &quot;/&quot;, (req, res) -&gt;
  res.render &quot;index.ect&quot;

app.listen 3000
console.log &quot;Listening on port 3000&quot;</code></pre>
<p>views/index.ect</p>
<pre><code>&lt;% extend &#39;layout.ect&#39; %&gt;
&lt;div&gt;Hello, World!&lt;/div&gt;</code></pre>
<p>views/layout.ect</p>
<pre><code>&lt;html&gt;
  &lt;body&gt;
    &lt;% content %&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>There are plenty of examples and information on the <a href="https://github.com/baryshev/ect">ect</a>. Check it out!</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-16-ect</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-16-ect            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 17 Dec 2013 00:57:39 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[chrono]]></title>
            <description><![CDATA[<p><a href="https://github.com/wanasit/chrono">chrono</a> is a natural language date parser in Javascript. It is designed to extract date informations from any given text. Works in node and browser. Check out the <a href="http://wanasit.github.io/pages/chrono/">nifty test page</a>.</p>
<pre><code>npm install chrono</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/clock.gif" style="float: right; width: 100px; margin-left: 1em" /></p>
<p><a href="https://github.com/wanasit/chrono">chrono</a> supports a number of date and time formats, including:</p>
<ul>
<li>Today, Tomorrow, Yesterday, last Friday, etc</li>
<li>10/13/2013</li>
<li>this Friday from 13:00 - 16.00</li>
<li>Saturday, 17 August 2013 - Monday, 19 August 2013</li>
<li>Sat Aug 17 2013 18:40:39 GMT+0900 (JST)</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>&gt; var chrono = require(&#39;chrono-node&#39;)

&gt; chrono.parseDate(&#39;An appointment on Sep 12-13&#39;)
Thu Sep 12 2013 12:00:00 GMT+0900 (JST)

&gt; chrono.parse(&#39;An appointment on Sep 12-13&#39;)
[ { start:
     { year: 2013,
       month: 8,
       day: 12,
       impliedComponents: [Object],
       isCertain: [Function],
       date: [Function] },
    startDate: Thu Sep 12 2013 12:00:00 GMT+0900 (JST),
    end:
     { year: 2013,
       month: 8,
       day: 13,
       impliedComponents: [Object],
       isCertain: [Function],
       date: [Function] },
    endDate: Fri Sep 13 2013 12:00:00 GMT+0900 (JST),
    referenceDate: Sat Aug 17 2013 17:54:57 GMT+0900 (JST),
    index: 18,
    text: &#39;Sep 12-13&#39;,
    concordance: &#39;An appointment on Sep 12-13&#39; } ]</code></pre>
<p>What&#39;s even more cool, <a href="https://github.com/wanasit/chrono">chrono</a> is designed to work with long text (notes, emails, articles, etc). <code>chrono.parse</code> will return an array of every date mentioned in the story.</p>
<pre><code>&gt; var text = &#39;October 7, 2011, of which details were not revealed out of respect to Jobs\&#39;s family.[239] Apple announced on the same day that they had no plans for a public service, but were encouraging &quot;well-wishers&quot; to send their remembrance messages to an email address created to receive such messages.[240] Sunday, October 16, 2011&#39;
&gt; chrono.parse(text)
[{ start:
    { year: 2011,
      month: 9,
      day: 7,
      ....
 { start:
    { year: 2011,
      month: 9,
      day: 16,
      ....</code></pre>
<p>There are plenty of examples and information on the <a href="https://github.com/wanasit/chrono">chrono</a>. Check it out!</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-13-chrono</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-13-chrono            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Sat, 14 Dec 2013 01:14:45 GMT</pubDate>
        </item>
    </channel>
</rss>