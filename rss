<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Wed, 19 Feb 2014 18:13:37 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Wed, 19 Feb 2014 18:13:11 GMT</pubDate>
        <item>
            <title><![CDATA[9 gulp.js plugins for a great build system]]></title>
            <description><![CDATA[<div class="highlight">
  <img class="hide-on-mobile" src="/images/posts/nodejitsu.png" style="height: 80px"/>
  This post was written for <a href="https://blog.nodejitsu.com">Nodejitsu</a> blog and is crossposted here. <a href="https://blog.nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a> and is now supporting the project.
</div>

<p>This article assumes you have experience with node.js, npm and you are pretty familiar with the concept of task runners and command-line interface. It will walk through general steps required to get up and running with <a href="http://gulpjs.com">gulp.js</a>.</p>
<p>Not unlike all the other build systems, it all starts by installing the task runner itself, e.g. <code>npm install gulp</code> and creating the main file in the root of your project called <code>gulpfile.js</code>. For those people like myself, who immediately want to know if <a href="http://gulpjs.com">gulp.js</a> supports CoffeeScript - the answer is yes - just <code>require(&#39;./gulpfile.coffee&#39;)</code> from <code>gulpfile.js</code>.</p>
<p>Now that we have everything sorted out, lets get cracking and make a task runner to support our HTML5 node.js project.</p>
<h2 id="-gulp-util-"><a href="https://github.com/gulpjs/gulp-util">gulp-util</a></h2>
<p>This is the official tool belt for <a href="http://gulpjs.com">gulp.js</a>. The authors decided to split up helpers into a separate module which you basically end up requiring every time. This module brings in functionality for logging, coloring console output, and so on. Check out the <a href="https://github.com/gulpjs/gulp-util">gulp-util</a> github page for the full list.</p>
<p>Since this is a utility module, there isn&#39;t a specific place to get started with it, so we will use it throughout instead.</p>
<h2 id="-gulp-clean-"><a href="https://github.com/peter-vilja/gulp-clean">gulp-clean</a></h2>
<p>The first thing any self-respecting build system should do is clean the space and remove everything that&#39;s in the way.</p>
<pre><code>var gulp = require(&#39;gulp&#39;);
var clean = require(&#39;gulp-clean&#39;);

gulp.task(&#39;clean&#39;, function () {
  gulp.src(&#39;build&#39;, {read: false})
    .pipe(clean());
});</code></pre>
<p>You can now run <code>gulp clean</code> and the <code>build</code> folder in the root of your project will be obliterated.</p>
<h2 id="-gulp-concat-"><a href="https://github.com/wearefractal/gulp-concat">gulp-concat</a></h2>
<p>It&#39;s probably safe to assume that your HTML5 project has a few external dependencies like <a href="http://jquery.com">jQuery</a>, maybe <a href="http://modernizr.com/">Modernizr</a> and such. Instead of having a separate <code>&lt;script&gt;</code> tag for each one of them, it would be nice to concat them together into one file. That&#39;s where <a href="https://github.com/wearefractal/gulp-concat">gulp-concat</a> comes in:</p>
<pre><code>var concat = require(&#39;gulp-concat&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
});</code></pre>
<p>Now, running <code>gulp vendor</code> will take all <code>*.js</code> files from the local <code>vendor</code> folder and concat them into <code>build/vendor.js</code>.</p>
<h2 id="-gulp-uglify-"><a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a></h2>
<p>The next thing to do is to minify our <code>vendor.js</code>. Lets add this to our <code>vendor</code> task.</p>
<pre><code>var uglify = require(&#39;gulp-uglify&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(uglify())
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
});</code></pre>
<p>Notice, that instead of creating a separate task for minifying, we simply added another <code>pipe</code> call. This is essentially what <a href="http://gulpjs.com">gulp.js</a> is all about - applying the right tools!</p>
<p>This is also where things might start going wrong, because <a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a> will throw an error if you have invalid JavaScript syntax. To deal with that lets add a basic error:</p>
<pre><code>var gutil = require(&#39;gulp-util&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(uglify())
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
    .on(&#39;error&#39;, gutil.log)
});</code></pre>
<h2 id="-gulp-rename-"><a href="https://github.com/hparra/gulp-rename">gulp-rename</a></h2>
<p>Do you want to keep both, minified and source files around? That&#39;s not a problem! Lets extend our <code>vendor</code> task to write out <code>vendor.js</code> and <code>vendor.min.js</code> at the same time.</p>
<pre><code>var rename = require(&#39;gulp-rename&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .on(&#39;error&#39;, gutil.log)
});</code></pre>
<p>Notice that <code>gulp.dest</code> is used twice here. This is the cool thing about <a href="http://gulpjs.com">gulp.js</a> - everything is just streams. Adding <code>gulp.dest</code> merely dumps whatever we currently have in the stream to disk, we can then mutate it further and save the new state again. Cool, eh?</p>
<h2 id="-gulp-filesize-"><a href="https://github.com/Metrime/gulp-filesize">gulp-filesize</a></h2>
<p>Don&#39;t know about you, but after minifying JavaScript I always want to know the file size. Guess what - I&#39;m not the only one and there&#39;s a plugin for that.</p>
<pre><code>var filesize = require(&#39;gulp-filesize&#39;);

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .on(&#39;error&#39;, gutil.log)
});</code></pre>
<p>Again, see how <code>filesize</code> is used twice? It will first print out the size of our source file and then the minified size.</p>
<h2 id="-gulp-less-"><a href="https://github.com/plus3network/gulp-less">gulp-less</a></h2>
<p>Lets assume you used the amazing <a href="http://lesscss.org/">LESS</a> preprocessor for your generating your CSS files and now want to generate them. <a href="https://github.com/plus3network/gulp-less">gulp-less</a> to the rescue!</p>
<pre><code>var less = require(&#39;gulp-less&#39;);
var path = require(&#39;path&#39;);

gulp.task(&#39;css&#39;, function () {
  gulp.src(&#39;less/**/*.less&#39;)
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});</code></pre>
<p>Running <code>gulp css</code> will compile all <a href="http://lesscss.org/">LESS</a> files from the <code>less</code> folder into <code>build/css</code>.</p>
<h2 id="-gulp-changed-"><a href="https://github.com/sindresorhus/gulp-changed">gulp-changed</a></h2>
<p>I would be forever unhappy if every time I ran <code>gulp css</code> all of my files would be regenerated regardless if the source <a href="http://lesscss.org/">LESS</a> files have changed or not. Lets use <a href="https://github.com/sindresorhus/gulp-changed">gulp-changed</a> to excluded not modified files.</p>
<pre><code>var changed = require(&#39;gulp-changed&#39;);

gulp.task(&#39;css&#39;, function () {
  gulp.src(&#39;less/**/*.less&#39;)
    .pipe(changed(&#39;build/css&#39;))
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});</code></pre>
<h2 id="-gulp-watch-"><a href="https://github.com/floatdrop/gulp-watch">gulp-watch</a></h2>
<p>It would be really cool if you didn&#39;t have to run <code>gulp css</code> every time you make a change, right? Lets set up a task that will monitor our files for changes and and compile them right away.</p>
<p><a href="https://github.com/floatdrop/gulp-watch">gulp-watch</a> is a little bit different from the other plugins and we use it instead of <code>gulp.src</code> as the starting point.</p>
<pre><code>var watch = require(&#39;gulp-watch&#39;);

gulp.task(&#39;css:watch&#39;, function () {
  watch({
    glob: &#39;less/**/*.less&#39;,
    emit: &#39;one&#39;,
    emitOnGlob: false
  }, function(files) {
    return files
      .pipe(less({
        paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
      }))
      .pipe(gulp.dest(&#39;build/css&#39;))
      .on(&#39;error&#39;, gutil.log);
  });
});</code></pre>
<p><code>gulp css:watch</code> will being watching all of our LESS files and compile only the changed one.</p>
<h2 id="all-together">All together</h2>
<p>Now lets put it all together into <code>gulpfile.js</code></p>
<pre><code>var path = require(&#39;path&#39;);
var gulp = require(&#39;gulp&#39;);
var gutil = require(&#39;gulp-util&#39;);
var clean = require(&#39;gulp-clean&#39;);
var concat = require(&#39;gulp-concat&#39;);
var uglify = require(&#39;gulp-uglify&#39;);
var rename = require(&#39;gulp-rename&#39;);
var filesize = require(&#39;gulp-filesize&#39;);
var less = require(&#39;gulp-less&#39;);
var changed = require(&#39;gulp-changed&#39;);
var watch = require(&#39;gulp-watch&#39;);

gulp.task(&#39;clean&#39;, function () {
  gulp.src(&#39;build&#39;, {read: false})
    .pipe(clean());
});

gulp.task(&#39;vendor&#39;, function() {
  gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .on(&#39;error&#39;, gutil.log)
});

gulp.task(&#39;css&#39;, function () {
  gulp.src(&#39;less/**/*.less&#39;)
    .pipe(changed(&#39;build/css&#39;))
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});

gulp.task(&#39;css:watch&#39;, function () {
  watch({
    glob: &#39;less/**/*.less&#39;,
    emit: &#39;one&#39;,
    emitOnGlob: false
  }, function(files) {
    return files
      .pipe(less({
        paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
      }))
      .pipe(gulp.dest(&#39;build/css&#39;))
      .on(&#39;error&#39;, gutil.log);
  });
});</code></pre>
<h2 id="summary">Summary</h2>
<p>The thing that I personally really like about <a href="http://gulpjs.com">gulp.js</a> is that it feels to me like a toolbox full of single purpose tools that I can use to assemble almost anything. It&#39;s amazing how in a span of a couple of months community has wrote <a href="http://gulpjs.com/plugins/">over 300 plugins</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-19-9-gulp-js-plugins-for-a-great-build-system</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-19-9-gulp-js-plugins-for-a-great-build-system</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 19 Feb 2014 17:26:59 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[npm-diff]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://1.gravatar.com/avatar/a010d5218f2c3d194dbbac9c5d14d0ad" style="float: right; margin-left: 1em"/>
<a href="https://github.com/segmentio/npm-diff">npm-diff</a> is a utility module by <a href="https://github.com/juliangruber">Julian Gruber</a> to diff two versions of NPM module. I&#39;ve been fascinated recently by all the tools being released to help you manage <code>package.json</code> and module publishing. It&#39;s really cool!</p>
<pre><code>npm install npm-diff</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>$ npm-diff intersect 0.0.0 0.1.0 | colordiff</code></pre>
<p><img class="hide-on-mobile" src="https://github-camo.global.ssl.fastly.net/304bdd7188c9fea08e87e731790aad980877ce7b/68747470733a2f2f692e636c6f756475702e636f6d2f5267694263634b7664742e706e67" style="width: 100%"/></p>
<p>BOOM! <code>brew install colordiff</code> if you haven&#39;t got it.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-18-npm-diff</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-18-npm-diff</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 18 Feb 2014 19:13:20 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[NodePDF]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/c0f5a91f71e988a9e2d9c20ffa546f4e" style="float: right; margin-left: 1em"/>
<a href="https://github.com/TJkrusinski/NodePDF">NodePDF</a> is a module by <a href="https://github.com/TJkrusinski">TJ Krusinski</a> for creating PDF files from web pages. It depends on <a href="http://phantomjs.org/">PhantomJS</a> and works by simply taking a screenshot of a page and stuffing it into a PDF. One the plus side, this makes it really easy to do mostly graphics based PDF files from node. On the down side, the content isn&#39;t scalable at all, so printing quality will suffer.</p>
<pre><code>npm install nodepdf</code></pre>
<h2 id="usage">Usage</h2>
<p><img class="hide-on-mobile" src="/images/posts/nodepdf.jpg" style="width: 300px; float: right; margin: 1em;"/></p>
<pre><code>var nodepdf = require(&#39;nodepdf&#39;);

// last argument is optional, sets the width and height
// for the viewport to render the pdf from
var pdf = new nodepdf(
  &#39;http://npmawesome.com&#39;,
  &#39;npmawesome.pdf&#39;,
  {
    args: &#39;--debug=true&#39;,
    viewportSize: {
      width: 500,
      height: 300
    }
  }
);

pdf.on(&#39;error&#39;, function(msg){
    console.log(msg);
});

pdf.on(&#39;done&#39;, function(pathToFile){
    console.log(pathToFile);
});</code></pre>
<p>I can imagine this being used for something simple, like printing tickets, post cards, photos and so on.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-17-nodepdf</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-17-nodepdf</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 17 Feb 2014 17:56:26 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[domain-context]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/domain-context.jpg" style="width: 100%"/></p>
<p><a href="https://github.com/andreypopp/domain-context">domain-context</a> is a module by <a href="https://github.com/andreypopp">Andrey Popp</a> for dealing with globally accessible domain-bound contexts, connect/express middleware included.</p>
<pre><code>npm install domain-context</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>var connectDomain = require(&#39;connect-domain&#39;),
    domainContext = require(&#39;domain-context&#39;),
    express = require(&#39;express&#39;);

var lifecycle = {
  context: function() {
    return {db: new pg.Client(...)}
  },
  cleanup: function(context) {
    context.db.query(&#39;commit&#39;);
    context.db.end();
  },
  onError: function(err, context) {
    context.db.query(&#39;rollback&#39;);
    context.db.end();
  }
};

app = express();
app.use(connectDomain());
app.use(domainContext.middleware(lifecycle));

// Your applicaiton&#39;s middleware goes here
//
// Note that because of connect/express design you are required to place two
// middlewares around your application — domainContext.middleware() and
// domainContext.middlewareOnError().

app.use(domainContext.middlewareOnError(lifecycle));

// Now you can use domainContext.get() to query data from the currently active domain:

var domainContext = require(&#39;connect-reqcontext&#39;);

function getUserById(id, cb) {
  domainContext.get(&#39;db&#39;).query(&quot;select ...&quot;, cb);
}</code></pre>
<p>I feel that this is pretty self-explanatory here. Being able to get request context outside of the <code>express</code> handlers and not having to pass so much context around to API is pretty great.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-13-domain-context</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-13-domain-context</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 13 Feb 2014 21:20:38 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JSONStream]]></title>
            <description><![CDATA[<p><a href="https://github.com/dominictarr/JSONStream">JSONStream</a> is a module by <a href="https://github.com/dominictarr">Dominic Tarr</a> for streaming <code>JSON.parse</code> and <code>JSON.stringify</code>.</p>
<pre><code>npm install jsonstream</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>var request = require(&#39;request&#39;),
    JSONStream = require(&#39;JSONStream&#39;),
    es = require(&#39;event-stream&#39;)
    ;

var parser = JSONStream.parse([&#39;rows&#39;, true]),
    req = request({url: &#39;http://isaacs.couchone.com/registry/_all_docs&#39;}),
    logger = es.mapSync(function (data) {
      console.error(data);
      return data;
    })

request({url: &#39;http://isaacs.couchone.com/registry/_all_docs&#39;})
  .pipe(JSONStream.parse(&#39;rows.*&#39;))
  .pipe(es.mapSync(function (data) {
    console.error(data);
    return data;
  }));</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/json.svg" style="float: right; width: 100px; margin-left: 1em"/>
I like the idea behind streaming JSON alot because you don&#39;t have to wait for the whole document to come down the pipe, especially if it&#39;s very large. It can also integrate with <a href="http://gulpjs.com">gulp.js</a> very nicely. The really cool thing for me is that you can react to specific nodes in the data structure vs having to seek them out and loop over them manually.</p>
<p>Are you dealing with large JSON structures on your project?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-12-jsonstream</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-12-jsonstream</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 12 Feb 2014 18:07:44 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[peer.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/peerjs.png" style="float: right; margin-left: 1em"/>
<a href="https://github.com/peers/peerjs">peer.js</a> provides a complete, configurable, and easy-to-use peer-to-peer API built on top of WebRTC, supporting both data channels and media streams. <a href="https://github.com/peers/peerjs">peer.js</a> wraps the browser&#39;s WebRTC implementation to provide a complete, configurable, and easy-to-use peer-to-peer connection API. Equipped with nothing but an ID, a peer can create a P2P data or media stream connection to a remote peer.</p>
<pre><code>npm install peerjs</code></pre>
<p>To broker connections, <a href="https://github.com/peers/peerjs">peer.js</a> connects to a PeerServer (<a href="http://peerjs.com/peerserver">free hosted</a> or <a href="https://github.com/peers/peerjs-server">host your own</a>). Note that <strong>no peer-to-peer data goes through the server</strong> - the server acts only as connection broker.</p>
<h2 id="usage">Usage</h2>
<pre><code>var Peer = require(&#39;peerjs&#39;).Peer;

// You can pick your own id or omit the id if you want to get a random one from the server.
var peer = new Peer(&#39;pick-an-id&#39;, { key: &#39;myapikey&#39; });</code></pre>
<p>Connect</p>
<pre><code>var conn = peer.connect(&#39;another-peers-id&#39;);
conn.on(&#39;open&#39;, function() {
  conn.send(&#39;hi!&#39;);
});</code></pre>
<p>Receive</p>
<pre><code>peer.on(&#39;connection&#39;, function(conn) {
  conn.on(&#39;data&#39;, function(data) {
    // Will print &#39;hi!&#39;
    console.log(data);
  });
});</code></pre>
<p>Checkout the <a href="http://peerjs.com/docs/#api">awesome API docs</a> and take it out for a spin. You can create a video chat with just a few lines of code. Have you done any peer-to-peer stuff?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-11-peer-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-11-peer-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 11 Feb 2014 17:59:37 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[node-dependencies]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/91ab609100e96dd5ccb270399e1acab6" style="float: right; margin-left: 1em"/>
<a href="https://github.com/FogCreek/node-dependencies">node-dependencies</a> is a very basic but incredibly useful command line utility written by <a href="https://github.com/dpatti">Doug Patti</a> of <a href="https://www.fogcreek.com/">Fog Creek</a> that checks and prints out out-of-date dependencies for your Node.js app.</p>
<pre><code>npm install node-dependencies</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>$ node-dependencies --sort=urgency

Package                   Local      Major      Minor      Patch
tedious                   0.1.4        ---        ---      0.1.5
mongoose                 3.6.11        ---        ---   3.6.0rc1
optimist                  0.5.0        ---      0.6.0      0.5.2
redis                     0.8.1        ---        ---      0.8.3
underscore                1.4.3        ---        ---      1.4.4
less-middleware          0.1.11        ---        ---     0.1.12
express                   3.2.4        ---        ---      3.2.6
grunt                     0.4.1        ---        ---   0.4.0rc8
coffee-script             1.6.2        ---        ---      1.6.3
bcrypt                    0.7.5        ---        ---      0.7.6
knox                      0.8.2        ---        ---      0.8.3
coffee-backtrace          0.2.0        ---      0.3.4      0.2.1
socket.io                0.9.14        ---        ---    0.9.1-1
async                    0.1.22        ---      0.2.9        ---
mocha                     1.9.0        ---     1.11.0        ---
less                      1.3.3        ---   1.4.0-b4        ---
hbs                       2.1.0        ---      2.3.0        ---
grunt-ember-handleba      0.4.0        ---      0.6.0        ---
js-yaml                   1.0.3      2.1.0        ---        ---
ent                       0.0.5        ---        ---        ---
date-utils               1.2.13        ---        ---        ---
jquery                    1.8.3        ---        ---        ---</code></pre>
<p>I came about  trying to update dependencies for a whole bunch of NPM modules. It would be even more useful if it could update <code>package.json</code> for me.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-10-node-dependencies</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-10-node-dependencies</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 10 Feb 2014 18:57:16 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[cucumber.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/cucumber-logo.png" style="width: 100%; margin-bottom: 1em"/></p>
<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/cbc1acceddbfaceee4cf3cae24d7c912" style="float: right; margin-left: 1em"/>
<a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> is a port of the famous Ruby <a href="http://cukes.info/">Cucumber testing framework</a> by <a href="https://github.com/jbpros">Julien Biezemans</a> that lets software development teams describe how software should behave in plain text. The text is written in a business-readable domain-specific language and serves as documentation, automated tests and development-aid - all rolled into one format.</p>
<pre><code>npm install cucumber</code></pre>
<h2 id="features">Features</h2>
<p><a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> implements most of the Ruby counterpart&#39;s feature for feature and has baked in support for CoffeeScript.</p>
<h2 id="usage">Usage</h2>
<p>Features are written with the <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin syntax</a></p>
<pre><code># features/myFeature.feature

Feature: Example feature
  As a user of cucumber.js
  I want to have documentation on cucumber
  So that I can concentrate on building awesome applications

  Scenario: Reading documentation
    Given I am on the Cucumber.js GitHub repository
    When I go to the README file
    Then I should see &quot;Usage&quot; as the page title</code></pre>
<p>Then</p>
<pre><code>@Then &quot;I should see \&quot;$title\&quot; as the page title&quot;, (title, callback) -&gt;
  # the above string is converted to the following Regexp by Cucumber:
  # /^I should see &quot;([^&quot;]*)&quot; as the page title$/
  pageTitle = @browser.text(&quot;title&quot;)

  if title is pageTitle
    callback()
  else
    callback.fail new Error(&quot;Expected to be on page with title &quot; + title)</code></pre>
<p>or in JavaScript</p>
<pre><code>this.Then(&#39;I should see &quot;$title&quot; as the page title&#39;, function(title, callback) {
  // the above string is converted to the following Regexp by Cucumber:
  // /^I should see &quot;([^&quot;]*)&quot; as the page title$/

  var pageTitle = this.browser.text(&#39;title&#39;);
  if (title === pageTitle) {
    callback();
  } else {
    callback.fail(new Error(&quot;Expected to be on page with title &quot; + title));
  }
});</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/cucumber-meme.jpg" style="float: right; margin-left: 1em"/>
Writing <a href="https://github.com/cucumber/cucumber/wiki/Feature-Introduction">Cucumber scenarios</a> is pretty straight forward and is very addictive. I currently use <a href="http://visionmedia.github.io/mocha/">Mocha</a> and write <code>describe</code> and <code>it</code> blocks in nearly the same fasion so that they read as a cohesive story. Perhaps I should just use <a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> instead?</p>
<p><a href="http://www.martinfowler.com/bliki/BusinessReadableDSL.html">The pipe dream</a> is to be let business people to write software rules without involving programmers. I&#39;m on the fence if it&#39;s a good idea, or even if it&#39;s possible, but I used to write Cucumber tests back in my Ruby days and loved it!</p>
<p>Check out this <a href="http://flippinawesome.org/2014/01/27/bdd-in-javascript-with-cucumberjs/">awesome write up</a> on <a href="https://github.com/cucumber/cucumber-js">cucumber.js</a>. So, what do you think? Is Cucumber a good idea?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-05-cucumber-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-05-cucumber-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 05 Feb 2014 21:06:18 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[binary.js]]></title>
            <description><![CDATA[<p><a href="https://github.com/binaryjs/binaryjs">binary.js</a> is a lightweight framework by <a href="https://github.com/binaryjs">Eric Zhang</a> that utilizes websockets to send, stream, and pipe binary data bidirectionally between browser javascript.</p>
<pre><code>npm install binaryjs</code></pre>
<p><img class="hide-on-mobile" src="https://pbs.twimg.com/profile_images/1896980487/418999_10151351854540262_653030261_23084074_1065502090_n_bigger.jpg" style="float: right; margin-left: 1em"/></p>
<h2 id="features">Features</h2>
<ul>
<li>BinaryPack serialization format is fast, binary, and JSON-type compatible. Data stays binary end to end</li>
<li>Automatically chunks large binary data buffers for streaming performance</li>
<li>Send multiple streams of data concurrently over multiplexed websocket connection</li>
<li>API implements Node.js read/write Streams. You can pipe any stream into BinaryJS streams (and vice-versa)</li>
<li><code>pause</code>, <code>resume</code>, and <code>end</code> as in the Streams API</li>
<li>Currently supports Chrome 15+ and Firefox 11+, IE10. Fallbacks that will support Safari, mobile iOS and Android, and older FF/Chrome versions are in the works.</li>
</ul>
<h2 id="what-can-you-do-with-this-">What can you do with this?</h2>
<p>You have just as much flexibility as a full TCP socket between client and server. Here are some ideas by <a href="https://github.com/binaryjs">Eric Zhang</a> that are now possible:</p>
<ul>
<li>Realtime multiplayer video games without expensive stringifying</li>
<li>Streaming FLAC into HTML5 WebAudio api</li>
<li>Progressive image loading (for retina displays and high-res photorgraphy)</li>
<li>Streaming file uploads</li>
<li>Live HTML <code>&lt;video&gt;</code> streaming</li>
<li>PJAX (pushState + ajax) with no HTTP requests. Not even for image assets</li>
<li>Video/audio chat over websockets</li>
</ul>
<h2 id="usage">Usage</h2>
<p>Server</p>
<pre><code>var server = BinaryServer({port: 9000});

server.on(&#39;connection&#39;, function(client){
  client.on(&#39;stream&#39;, function(stream, meta){
    var file = fs.createWriteStream(meta.file);
    stream.pipe(file);
  });
});</code></pre>
<p>Browser:</p>
<pre><code>var client = BinaryClient(&#39;ws://localhost:9000&#39;);

client.on(&#39;open&#39;, function(stream){
  var stream = client.createStream({file: &#39;hello.txt&#39;});
  stream.write(&#39;Hello&#39;);
  stream.write(&#39;World!&#39;);
  stream.end();
});</code></pre>
<p>Check out <a href="https://github.com/binaryjs/binaryjs/blob/master/doc/start.md">getting started</a> page and <a href="for extensive documentation">binaryjs.com</a>. Thanks <a href="https://github.com/binaryjs">Eric Zhang</a> for making this happen!</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-04-binary-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-04-binary-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 04 Feb 2014 17:41:51 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[power-assert]]></title>
            <description><![CDATA[<p><a href="https://github.com/twada/power-assert">power-assert</a> is a module written by <a href="https://github.com/twada">Takuto Wada</a> that provides pretty damn descriptive assert messages for your tests.</p>
<pre><code>npm install power-assert</code></pre>
<h2 id="features">Features</h2>
<p><a href="https://github.com/twada/power-assert">power-assert</a> transforms your regular boring asserts to this:</p>
<pre><code>AssertionError: # /path/to/examples/mocha_node.js:10

    assert(this.ary.indexOf(who) === two);
                |   |       |    |   |
                |   |       |    |   2
                |   |       |    false
                |   -1      &quot;ariya&quot;
                [1,2,3]</code></pre>
<h2 id="usages">Usages</h2>
<p>There are two ways to use <a href="https://github.com/twada/power-assert">power-assert</a>.</p>
<ol>
<li><code>power-assert</code> + <code>espower-loader</code> : Only works under Node.</li>
<li><code>power-assert</code> + <a href="http://github.com/twada/grunt-espower"><code>grunt-espower</code></a> or <a href="http://github.com/twada/gulp-espower"><code>gulp-espower</code></a> : Generates instrumented code so works anywhere.</li>
</ol>
<p>To give you an idea what the trasnformed code looks like, for example, it transforms:</p>
<pre><code>assert(this.ary.indexOf(who) === two);</code></pre>
<p>into:</p>
<pre><code>assert(assert._expr(assert._capt(assert._capt(assert._capt(this.ary, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 20
    }
}).indexOf(assert._capt(who, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 32
    }
})), &#39;funcall&#39;, {
    start: {
        line: 9,
        column: 24
    }
}) === assert._capt(two, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 41
    }
}), &#39;binary&#39;, {
    start: {
        line: 9,
        column: 37
    }
}), {
    start: {
        line: 9,
        column: 15
    },
    path: &#39;/Users/alexgorbatchev/1-npmawesome/1/power-assert-demo/test/power_assert/mocha_power_assert_test.js&#39;
}, &#39;        assert(this.ary.indexOf(who) === two);&#39;));</code></pre>
<p><a href="https://github.com/twada/power-assert">power-assert</a> also works with CoffeeScript files to produce output:</p>
<pre><code>AssertionError:

    assert this.ary.indexOf(who) isnt minusOne
                |   |       |    |    |
                |   |       |    |    -1
                |   |       |    false
                |   -1      &quot;ariya&quot;
                [1,2,3]</code></pre>
<p>I&#39;m very tempted to give this a try over my goto <a href="http://chaijs.com/">chai.js</a> library. I&#39;m a little bit worried that it changes number of lines and it might be harder to do certain type of debugging, but the benefit might be worth it!</p>
<p>There&#39;s a full documentation on the <a href="https://github.com/twada/power-assert">power-assert</a> github page and a <a href="https://github.com/twada/power-assert-demo">demo project</a>. What do you think?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-03-power-assert</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-03-power-assert</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 03 Feb 2014 18:59:55 GMT</pubDate>
        </item>
    </channel>
</rss>