<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 27 Dec 2013 18:17:12 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Fri, 27 Dec 2013 18:17:01 GMT</pubDate>
        <item>
            <title><![CDATA[cheerio]]></title>
            <description><![CDATA[<p><a href="https://github.com/MatthewMueller/cheerio">cheerio</a> is a fast, flexible, and lean implementation of core jQuery designed specifically for the server.</p>
<pre><code>npm install cheerio</code></pre>
<h2 id="features">Features</h2>
<p><img src="/images/posts/cheerio.jpg" style="width: 150px; float: right" /></p>
<ul>
<li>Familiar syntax. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> implements a subset of core jQuery. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing its truly gorgeous API.</li>
<li>Blazingly fast. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient. Preliminary end-to-end benchmarks suggest that <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> is about 8x faster than JSDOM.</li>
<li>Insanely flexible. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> wraps around <a href="https://twitter.com/fb55">@FB55</a>&#39;s <a href="https://github.com/fb55/htmlparser2">forgiving htmlparser</a>. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> can parse nearly any HTML or XML document.</li>
</ul>
<h2 id="example">Example</h2>
<pre><code>var cheerio = require(&#39;cheerio&#39;),
    $ = cheerio.load(&#39;&lt;h2 class=&quot;title&quot;&gt;Hello world&lt;/h2&gt;&#39;);

$(&#39;h2.title&#39;).text(&#39;Hello there!&#39;);
$(&#39;h2&#39;).addClass(&#39;welcome&#39;);

$.html();
//=&gt; &lt;h2 class=&quot;title welcome&quot;&gt;Hello there!&lt;/h2&gt;</code></pre>
<h2 id="screencast-introduction">Screencast Introduction</h2>
<iframe src="//player.vimeo.com/video/31950192" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

<p>Are you using jQuery on the server side?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-27-cheerio</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-27-cheerio            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 27 Dec 2013 17:19:30 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[dat]]></title>
            <description><![CDATA[<p><a href="https://github.com/maxogden/dat">dat</a> is a project that seeks providing better tools for data collaboration.</p>
<pre><code>npm install dat</code></pre>
<h2 id="what-is-dat-">What is dat?</h2>
<p><img src="/images/posts/dat.png" style="float: right" /></p>
<p>I like the name, makes for clever titles like this :) Anyways, dat:</p>
<ul>
<li>make data syncable. automatic sync and updates of entire data sets (or subsets)</li>
<li>data sets can be very large (billions of items) or updated frequently (real time data)</li>
<li>sync and transformation plugin API to connect dat to any existing database/format/language</li>
<li>built with automated + decentralized workflows in mind</li>
</ul>
<p>To illustrate the goals of <code>dat</code> consider the GitHub project, which is a great model of this idea working in a different space. GitHub is built on top of an open source tool called <code>git</code> and provides a user-friendly web application that lets software developers find code written by others, use it in their own programs and improve upon it. In a similar fashion <code>dat</code> will be developed as a set of tools to store, synchronize, manipulate and collaborate in a decentralized fashion on sets of data, hopefully enabling platforms analogous to GitHub to be built on top of it.</p>
<p>The concept sounds pretty amazing to me. Currently <code>dat</code> is in pre-alpha stage but with full time support from <a href="http://maxogden.com/gut-hosted-open-data-filets.html">Max Ogden</a> it will evolve very quickly.</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/FX7qSwz3SCk" frameborder="0" allowfullscreen></iframe>

<p>Aside from a truly epic beard, Max also has a <a href="http://www.youtube.com/watch?v=FX7qSwz3SCk">cool talk</a> on YouTube introducing <code>dat</code>. Have you gotten any ideas on how this could be used yet?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-19-dat</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-19-dat            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 19 Dec 2013 18:08:03 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[xregexp]]></title>
            <description><![CDATA[<p><a href="https://github.com/slevithan/xregexp">xregexp</a> provides augmented and extensible JavaScript regular expressions. You get new syntax, flags, and methods beyond what browsers support natively. XRegExp is also a regex utility belt with tools to make your client-side grepping simpler and more powerful, while freeing you from worrying about pesky cross-browser inconsistencies and the dubious lastIndex property.</p>
<pre><code>npm install xregexp</code></pre>
<h2 id="usage-examples">Usage examples</h2>
<p><a href="http://www.bennadel.com/blog/2383-The-5th-Annual-Regular-Expression-Day-And-Prizes-June-1st-2012.htm"><img src="http://www.bennadel.com/resources/regexday/2011/photos/1__original.jpg" style="width: 300px; float: right" /></a></p>
<pre><code>// Using named capture and flag x (free-spacing and line comments)
var date = XRegExp(&#39;(?&lt;year&gt;  [0-9]{4} ) -?  # year  \n\
                    (?&lt;month&gt; [0-9]{2} ) -?  # month \n\
                    (?&lt;day&gt;   [0-9]{2} )     # day   &#39;, &#39;x&#39;);

// XRegExp.exec gives you named backreferences on the match result
var match = XRegExp.exec(&#39;2012-02-22&#39;, date);
match.year; // -&gt; &#39;2012&#39;

// It also includes optional pos and sticky arguments
var pos = 3, result = [];
while (match = XRegExp.exec(&#39;&lt;1&gt;&lt;2&gt;&lt;3&gt;&lt;4&gt;5&lt;6&gt;&#39;, /&lt;(\d+)&gt;/, pos, &#39;sticky&#39;)) {
  result.push(match[1]);
  pos = match.index + match[0].length;
} // result -&gt; [&#39;2&#39;, &#39;3&#39;, &#39;4&#39;]

// XRegExp.replace allows named backreferences in replacements
XRegExp.replace(&#39;2012-02-22&#39;, date, &#39;${month}/${day}/${year}&#39;); // -&gt; &#39;02/22/2012&#39;
XRegExp.replace(&#39;2012-02-22&#39;, date, function(match) {
  return match.month + &#39;/&#39; + match.day + &#39;/&#39; + match.year;
}); // -&gt; &#39;02/22/2012&#39;</code></pre>
<h2 id="addons">Addons</h2>
<p>Addons are one of the more impressive features of <a href="https://github.com/slevithan/xregexp">xregexp</a>. In particular, the <code>matchRecursive</code> addon allows you to match balanced brackets and quotes, which is otherwise impossible with regular regex (.NET had this extension built in for some time now however).</p>
<p>In browsers, first include the script:</p>
<pre><code>&lt;script src=&quot;src/xregexp.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;src/addons/matchrecursive.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>You can then match recursive constructs using XRegExp pattern strings as left and right delimiters:</p>
<pre><code>var str = &#39;(t((e))s)t()(ing)&#39;;
XRegExp.matchRecursive(str, &#39;\\(&#39;, &#39;\\)&#39;, &#39;g&#39;);
// -&gt; [&#39;t((e))s&#39;, &#39;&#39;, &#39;ing&#39;]

// Extended information mode with valueNames
str = &#39;Here is &lt;div&gt; &lt;div&gt;an&lt;/div&gt;&lt;/div&gt; example&#39;;
XRegExp.matchRecursive(str, &#39;&lt;div\\s*&gt;&#39;, &#39;&lt;/div&gt;&#39;, &#39;gi&#39;, {
    valueNames: [&#39;between&#39;, &#39;left&#39;, &#39;match&#39;, &#39;right&#39;]
});
/* -&gt; [
{name: &#39;between&#39;, value: &#39;Here is &#39;,       start: 0,  end: 8},
{name: &#39;left&#39;,    value: &#39;&lt;div&gt;&#39;,          start: 8,  end: 13},
{name: &#39;match&#39;,   value: &#39; &lt;div&gt;an&lt;/div&gt;&#39;, start: 13, end: 27},
{name: &#39;right&#39;,   value: &#39;&lt;/div&gt;&#39;,         start: 27, end: 33},
{name: &#39;between&#39;, value: &#39; example&#39;,       start: 33, end: 41}
] */

// Omitting unneeded parts with null valueNames, and using escapeChar
str = &#39;...{1}\\{{function(x,y){return y+x;}}&#39;;
XRegExp.matchRecursive(str, &#39;{&#39;, &#39;}&#39;, &#39;g&#39;, {
    valueNames: [&#39;literal&#39;, null, &#39;value&#39;, null],
    escapeChar: &#39;\\&#39;
});
/* -&gt; [
{name: &#39;literal&#39;, value: &#39;...&#39;, start: 0, end: 3},
{name: &#39;value&#39;,   value: &#39;1&#39;,   start: 4, end: 5},
{name: &#39;literal&#39;, value: &#39;\\{&#39;, start: 6, end: 8},
{name: &#39;value&#39;,   value: &#39;function(x,y){return y+x;}&#39;, start: 9, end: 35}
] */

// Sticky mode via flag y
str = &#39;&lt;1&gt;&lt;&lt;&lt;2&gt;&gt;&gt;&lt;3&gt;4&lt;5&gt;&#39;;
XRegExp.matchRecursive(str, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;gy&#39;);
// -&gt; [&#39;1&#39;, &#39;&lt;&lt;2&gt;&gt;&#39;, &#39;3&#39;]</code></pre>
<p>XRegExp.matchRecursive throws an error if it scans past an unbalanced delimiter in the target string.</p>
<p>I&#39;ve been using <a href="https://github.com/slevithan/xregexp">xregexp</a> in <a href="https://github.com/alexgorbatchev/SyntaxHighlighter">SyntaxHighlighter</a> for a while now. My favourite feature is named captures, which JavaScript is desperately missing. Have you used <a href="https://github.com/slevithan/xregexp">xregexp</a> already? How?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-18-xregexp</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-18-xregexp            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 19 Dec 2013 01:27:16 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[npm v1.3.18]]></title>
            <description><![CDATA[<p>NPM v1.3.18 release notes:</p>
<ul>
<li><p>Added an <code>--ignore-scripts</code> option, which will prevent package.json scripts from being run. Most notably, this will work on npm install, so e.g. npm install <code>--ignore-scripts</code> will not run preinstall and prepublish scripts. (<a href="https://github.com/isaacs/npm/commit/d7e67bf0d94b085652ec1c87d595afa6f650a8f6">d7e67bf</a>, @sqs)</p>
</li>
<li><p>Fixed a bug introduced in 1.3.16 that would manifest with certain cache configurations, by causing spurious errors saying &quot;Adding a cache directory to the cache will make the world implode.&quot; (<a href="https://github.com/isaacs/npm/commit/966373fad8d741637f9744882bde9f6e94000865">966373f</a>, @domenic)</p>
</li>
<li><p>Re-fixed the multiple download of URL dependencies, whose fix was reverted in 1.3.17. (<a href="https://github.com/isaacs/npm/commit/a362c3f1919987419ed8a37c8defa19d2e6697b0">a362c3f</a>, @spmason)</p>
</li>
</ul>
<p><a href="https://github.com/isaacs/npm/releases/tag/v1.3.18">https://github.com/isaacs/npm/releases/tag/v1.3.18</a></p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-17-npm</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-17-npm            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 17 Dec 2013 18:41:23 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ect]]></title>
            <description><![CDATA[<p><a href="https://github.com/baryshev/ect">ect</a> is a <a href="http://ectjs.com/#benchmark">performance focused</a> JavaScript template engine with embedded CoffeeScript syntax. <a href="http://ectjs.com">Just try demo</a> to check all features.</p>
<pre><code>npm install ect</code></pre>
<p><img src="/images/posts/coffeescript.png" style="float: right" /></p>
<h2 id="features">Features</h2>
<ul>
<li>Excellent performance</li>
<li>Templates caching</li>
<li>Automatic reloading of changed templates</li>
<li>CoffeeScript code in templates</li>
<li>Multi-line expressions support</li>
<li>Tag customization support</li>
<li>Node.JS and client-side support</li>
<li>Powerful but simple syntax</li>
<li>Inheritance, partials, blocks</li>
<li>Compatible with <code>express</code></li>
<li>Compatible with <code>RequireJS</code></li>
<li>Backward compatible with <code>eco</code></li>
<li><a href="https://github.com/TurtlePie/Sublime-ECT">Syntax highlighting for Sublime Text 2</a> by <a href="https://github.com/TurtlePie">TurtlePie</a></li>
</ul>
<h2 id="example">Example</h2>
<p>app.js</p>
<pre><code>express = require(&quot;express&quot;)
app = express()
ECT = require(&quot;ect&quot;)
ectRenderer = ECT watch: true, root: __dirname + &quot;/views&quot;
app.engine &quot;.ect&quot;, ectRenderer.render

app.get &quot;/&quot;, (req, res) -&gt;
  res.render &quot;index.ect&quot;

app.listen 3000
console.log &quot;Listening on port 3000&quot;</code></pre>
<p>views/index.ect</p>
<pre><code>&lt;% extend &#39;layout.ect&#39; %&gt;
&lt;div&gt;Hello, World!&lt;/div&gt;</code></pre>
<p>views/layout.ect</p>
<pre><code>&lt;html&gt;
  &lt;body&gt;
    &lt;% content %&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>There are plenty of examples and information on the <a href="https://github.com/baryshev/ect">ect</a>. Check it out!</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-16-ect</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-16-ect            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 17 Dec 2013 00:57:39 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[chrono]]></title>
            <description><![CDATA[<p><a href="https://github.com/wanasit/chrono">chrono</a> is a natural language date parser in Javascript. It is designed to extract date informations from any given text. Works in node and browser. Check out the <a href="http://wanasit.github.io/pages/chrono/">nifty test page</a>.</p>
<pre><code>npm install chrono</code></pre>
<p><img src="/images/posts/clock.gif" style="float: right; width: 100px; margin-left: 1em" /></p>
<p><a href="https://github.com/wanasit/chrono">chrono</a> supports a number of date and time formats, including:</p>
<ul>
<li>Today, Tomorrow, Yesterday, last Friday, etc</li>
<li>10/13/2013</li>
<li>this Friday from 13:00 - 16.00</li>
<li>Saturday, 17 August 2013 - Monday, 19 August 2013</li>
<li>Sat Aug 17 2013 18:40:39 GMT+0900 (JST)</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>&gt; var chrono = require(&#39;chrono-node&#39;)

&gt; chrono.parseDate(&#39;An appointment on Sep 12-13&#39;)
Thu Sep 12 2013 12:00:00 GMT+0900 (JST)

&gt; chrono.parse(&#39;An appointment on Sep 12-13&#39;)
[ { start:
     { year: 2013,
       month: 8,
       day: 12,
       impliedComponents: [Object],
       isCertain: [Function],
       date: [Function] },
    startDate: Thu Sep 12 2013 12:00:00 GMT+0900 (JST),
    end:
     { year: 2013,
       month: 8,
       day: 13,
       impliedComponents: [Object],
       isCertain: [Function],
       date: [Function] },
    endDate: Fri Sep 13 2013 12:00:00 GMT+0900 (JST),
    referenceDate: Sat Aug 17 2013 17:54:57 GMT+0900 (JST),
    index: 18,
    text: &#39;Sep 12-13&#39;,
    concordance: &#39;An appointment on Sep 12-13&#39; } ]</code></pre>
<p>What&#39;s even more cool, <a href="https://github.com/wanasit/chrono">chrono</a> is designed to work with long text (notes, emails, articles, etc). <code>chrono.parse</code> will return an array of every date mentioned in the story.</p>
<pre><code>&gt; var text = &#39;October 7, 2011, of which details were not revealed out of respect to Jobs\&#39;s family.[239] Apple announced on the same day that they had no plans for a public service, but were encouraging &quot;well-wishers&quot; to send their remembrance messages to an email address created to receive such messages.[240] Sunday, October 16, 2011&#39;
&gt; chrono.parse(text)
[{ start:
    { year: 2011,
      month: 9,
      day: 7,
      ....
 { start:
    { year: 2011,
      month: 9,
      day: 16,
      ....</code></pre>
<p>There are plenty of examples and information on the <a href="https://github.com/wanasit/chrono">chrono</a>. Check it out!</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-13-chrono</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-13-chrono            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Sat, 14 Dec 2013 01:14:45 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[prettyjson]]></title>
            <description><![CDATA[<p><a href="https://github.com/rafeca/prettyjson">prettyjson</a> is package for formatting JSON data in a coloured YAML-style, perfect for CLI output.</p>
<pre><code>npm install prettyjson</code></pre>
<h2 id="cli">CLI</h2>
<pre><code>$ prettyjson package.json
...
$ curl https://api.github.com/users/rafeca | prettyjson
...
$ PRETTYJSON_KEYS=red PRETTYJSON_DASH=blue PRETTYJSON_STRING=yellow prettyjson package.json</code></pre>
<h2 id="api">API</h2>
<p><a href="https://github-camo.global.ssl.fastly.net/84c63f2a817ca95b6ccaff240a75fbf1b11f7b87/687474703a2f2f7261666563612e636f6d2f7072657474796a736f6e2f696d616765732f6578616d706c65332e706e67"><img src="https://github-camo.global.ssl.fastly.net/84c63f2a817ca95b6ccaff240a75fbf1b11f7b87/687474703a2f2f7261666563612e636f6d2f7072657474796a736f6e2f696d616765732f6578616d706c65332e706e67" style="float: right; width: 300px; margin-left: 1em" /></a></p>
<pre><code>var prettyjson = require(&#39;prettyjson&#39;);

var data = {
  username: &#39;rafeca&#39;,
  url: &#39;https://github.com/rafeca&#39;,
  twitter_account: &#39;https://twitter.com/rafeca&#39;,
  projects: [&#39;prettyprint&#39;, &#39;connfu&#39;]
};

console.log(prettyjson.render(data));</code></pre>
<p>There are plenty of examples and information on the <a href="https://github.com/rafeca/prettyjson">prettyjson</a>. Check it out!</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-11-prettyjson</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-11-prettyjson            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 12 Dec 2013 01:27:02 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[state]]></title>
            <description><![CDATA[<p><a href="https://github.com/nickfargo/state">state</a> is a library for implementing <a href="http://statejs.org/docs/#concepts--states">first-class states</a> on arbitrary owner objects.</p>
<pre><code>npm install state</code></pre>
<p>There&#39;s an incredible amount of funtionality described in the <a href="http://statejs.org/docs/">very extensive documentation</a>.</p>
<p><img src="http://statejs.org/img/dodecagem-640px.png" style="float: right; width: 200px; margin-left: 1em;" /></p>
<h2 id="minimal-footprint">Minimal footprint</h2>
<p>All functionality of State is to be instigated through the exported state function. It should be able both to generate state expressions and to implement expressed states into an existing JavaScript object, depending on the arguments provided. In the latter case, the newly implemented system of states should be accessible from a single object. <code>state()</code> method on the affected object.</p>
<h2 id="expressive-power">Expressive power</h2>
<p>As much as possible, State should aim to look and feel like a feature of the language. The interpreted shorthand syntax, simple keyword attributes, and limited interface should allow for production code that is terse, declarative, and easy to write and understand.</p>
<h2 id="opacity">Opacity</h2>
<p>Apart from the addition of the <code>object.state()</code> method, a call to <code>state()</code> must make no other modifications to a State–affected object&#39;s interface. Methods are replaced with delegators, which forward method calls to the current state. This is to be implemented opaquely and non-destructively: consumers of the object need not be aware of which states are active in the object, or even that a concept of state exists at all, and a call to <code>object.state(&#39;&#39;).destroy()</code> must restore the object to its original form.</p>
<h2 id="example">Example</h2>
<pre><code>var flavors = [
  &#39;vanilla&#39;,
  &#39;chocolate&#39;,
  &#39;strawberry&#39;,
  &#39;AmeriCone Dream&#39;
];

function Kid () {}

state( Kid.prototype, &#39;mutable&#39;, {
  data: {
    favorite: &#39;chocolate&#39;
  },

  waver: state.bind( function () {
    var i = Math.random() * flavors.length &lt;&lt; 0;
    this.data({ favorite: flavors[i] });
  }),

  whine: function ( complaint ) {
    if ( typeof console !== &#39;undefined&#39; ) {
      console.log( complaint );
    }
  },

  mutate: function ( mutation, replaced ) {
    this.owner().whine(
      &quot;I hate &quot; + replaced.favorite + &quot;, &quot; +
      &quot;I want &quot; + mutation.favorite + &quot;!&quot;
    );
  }
});

var jr = new Kid;

jr.waver();  // log &lt;&lt;&lt; &quot;I hate chocolate, I want strawberry!&quot;
jr.waver();  // log &lt;&lt;&lt; &quot;I hate strawberry, I want chocolate!&quot;
jr.waver();  // nothing
jr.waver();  // log &lt;&lt;&lt; &quot;I hate chocolate, I want AmeriCone Dream!&quot;</code></pre>
<p>There are plenty of examples and information on the <a href="http://statejs.org">documentation site</a>. Check it out!</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-10-state</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-10-state            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 11 Dec 2013 00:08:10 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[blessed]]></title>
            <description><![CDATA[<p><a href="https://github.com/chjj/blessed">blessed</a> is a terminal control library for Unix-like systems, enabling the construction of text user interface (TUI) applications. In other words it&#39;s a curses-like library for node.js</p>
<pre><code>npm install blessed</code></pre>
<h2 id="example">Example</h2>
<p>This will render a box with line borders containing the text &#39;Hello world!&#39;, perfectly centered horizontally and vertically.</p>
<p><img src="/images/posts/blessed.png" style="float: right; margin-left: 1em;" /></p>
<pre><code>var blessed = require(&#39;blessed&#39;);

// Create a screen object.
var screen = blessed.screen();

// Create a box perfectly centered horizontally and vertically.
var box = blessed.box({
  top: &#39;center&#39;,
  left: &#39;center&#39;,
  width: &#39;50%&#39;,
  height: &#39;50%&#39;,
  content: &#39;Hello {bold}world{/bold}!&#39;,
  tags: true,
  border: {
    type: &#39;line&#39;
  },
  style: {
    fg: &#39;white&#39;,
    bg: &#39;magenta&#39;,
    border: {
      fg: &#39;#ffffff&#39;
    },
    hover: {
      bg: &#39;green&#39;
    }
  }
});

// Append our box to the screen.
screen.append(box);

// If our box is clicked, change the content.
box.on(&#39;click&#39;, function(data) {
  box.setContent(&#39;{center}Some different {red-fg}content{/red-fg}.{/center}&#39;);
  screen.render();
});

// If box is focused, handle `enter`/`return` and give us some more content.
box.key(&#39;enter&#39;, function(ch, key) {
  box.setContent(&#39;{right}Even different {black-fg}content{/black-fg}.{/right}\n&#39;);
  box.setLine(1, &#39;bar&#39;);
  box.insertLine(1, &#39;foo&#39;);
  screen.render();
});

// Quit on Escape, q, or Control-C.
screen.key([&#39;escape&#39;, &#39;q&#39;, &#39;C-c&#39;], function(ch, key) {
  return process.exit(0);
});

// Focus our element.
box.focus();

// Render the screen.
screen.render();</code></pre>
<p>There are plenty of examples and information on the <a href="https://github.com/chjj/blessed">blessed</a>. Check it out!</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-09-blessed</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-09-blessed            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 09 Dec 2013 22:17:51 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[gm]]></title>
            <description><![CDATA[<p><a href="https://github.com/aheckmann/gm">gm</a> is <a href="http://www.imagemagick.org">ImageMagick</a> for node, what else is there to say?</p>
<pre><code>npm install gm</code></pre>
<p><img src="/images/posts/imagemagick.png" style="float: right; width: 100px; margin-left: 1em;" /></p>
<blockquote>
<p>ImageMagick is a software suite to create, edit, compose, or convert bitmap images. It can read and write images in a variety of formats (over 100) including DPX, EXR, GIF, JPEG, JPEG-2000, PDF, PNG, Postscript, SVG, and TIFF. Use ImageMagick to resize, flip, mirror, rotate, distort, shear and transform images, adjust image colors, apply various special effects, or draw text, lines, polygons, ellipses and Bézier curves.</p>
</blockquote>
<p>The <a href="http://aheckmann.github.io/gm/">demo</a> page has an interactive playground that shows a tiny fraction of what <a href="https://github.com/aheckmann/gm">gm</a> can do.</p>
<pre><code>var gm = require(&#39;./gm&#39;);

// resize and remove EXIF profile data
gm(&#39;/path/to/my/img.jpg&#39;)
  .resize(240, 240)
  .noProfile()
  .write(&#39;/path/to/resize.png&#39;, function (err) {
    if (!err) console.log(&#39;done&#39;);
  });

// annotate an image
gm(&#39;/path/to/my/img.jpg&#39;)
  .stroke(&quot;#ffffff&quot;)
  .drawCircle(10, 10, 20, 10)
  .font(&quot;Helvetica.ttf&quot;, 12)
  .drawText(30, 20, &quot;GMagick!&quot;)
  .write(&quot;/path/to/drawing.png&quot;, function (err) {
    if (!err) console.log(&#39;done&#39;);
  });</code></pre>
<p>There are plenty of examples and information on the <a href="https://github.com/aheckmann/gm">gm</a>. Check it out!</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-05-gm</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-05-gm            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 05 Dec 2013 17:44:35 GMT</pubDate>
        </item>
    </channel>
</rss>