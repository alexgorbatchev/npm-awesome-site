<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Wed, 05 Feb 2014 21:28:16 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Wed, 05 Feb 2014 21:27:45 GMT</pubDate>
        <item>
            <title><![CDATA[cucumber.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/cucumber-logo.png" style="width: 100%; margin-bottom: 1em"/></p>
<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/cbc1acceddbfaceee4cf3cae24d7c912" style="float: right; margin-left: 1em"/>
<a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> is a port of the famous Ruby <a href="http://cukes.info/">Cucumber testing framework</a> by <a href="https://github.com/jbpros">Julien Biezemans</a> that lets software development teams describe how software should behave in plain text. The text is written in a business-readable domain-specific language and serves as documentation, automated tests and development-aid - all rolled into one format.</p>
<pre><code>npm install cucumber</code></pre>
<h2 id="features">Features</h2>
<p><a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> implements most of the Ruby counterpart&#39;s feature for feature and has baked in support for CoffeeScript.</p>
<h2 id="usage">Usage</h2>
<p>Features are written with the <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin syntax</a></p>
<pre><code># features/myFeature.feature

Feature: Example feature
  As a user of cucumber.js
  I want to have documentation on cucumber
  So that I can concentrate on building awesome applications

  Scenario: Reading documentation
    Given I am on the Cucumber.js GitHub repository
    When I go to the README file
    Then I should see &quot;Usage&quot; as the page title</code></pre>
<p>Then</p>
<pre><code>@Then &quot;I should see \&quot;$title\&quot; as the page title&quot;, (title, callback) -&gt;
  # the above string is converted to the following Regexp by Cucumber:
  # /^I should see &quot;([^&quot;]*)&quot; as the page title$/
  pageTitle = @browser.text(&quot;title&quot;)

  if title is pageTitle
    callback()
  else
    callback.fail new Error(&quot;Expected to be on page with title &quot; + title)</code></pre>
<p>or in JavaScript</p>
<pre><code>this.Then(&#39;I should see &quot;$title&quot; as the page title&#39;, function(title, callback) {
  // the above string is converted to the following Regexp by Cucumber:
  // /^I should see &quot;([^&quot;]*)&quot; as the page title$/

  var pageTitle = this.browser.text(&#39;title&#39;);
  if (title === pageTitle) {
    callback();
  } else {
    callback.fail(new Error(&quot;Expected to be on page with title &quot; + title));
  }
});</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/cucumber-meme.jpg" style="float: right; margin-left: 1em"/>
Writing <a href="https://github.com/cucumber/cucumber/wiki/Feature-Introduction">Cucumber scenarios</a> is pretty straight forward and is very addictive. I currently use <a href="http://visionmedia.github.io/mocha/">Mocha</a> and write <code>describe</code> and <code>it</code> blocks in nearly the same fasion so that they read as a cohesive story. Perhaps I should just use <a href="https://github.com/cucumber/cucumber-js">cucumber.js</a> instead?</p>
<p><a href="http://www.martinfowler.com/bliki/BusinessReadableDSL.html">The pipe dream</a> is to be let business people to write software rules without involving programmers. I&#39;m on the fence if it&#39;s a good idea, or even if it&#39;s possible, but I used to write Cucumber tests back in my Ruby days and loved it!</p>
<p>Check out this <a href="http://flippinawesome.org/2014/01/27/bdd-in-javascript-with-cucumberjs/">awesome write up</a> on <a href="https://github.com/cucumber/cucumber-js">cucumber.js</a>. So, what do you think? Is Cucumber a good idea?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-05-cucumber-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-05-cucumber-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 05 Feb 2014 21:06:18 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[binary.js]]></title>
            <description><![CDATA[<p><a href="https://github.com/binaryjs/binaryjs">binary.js</a> is a lightweight framework by <a href="https://github.com/binaryjs">Eric Zhang</a> that utilizes websockets to send, stream, and pipe binary data bidirectionally between browser javascript.</p>
<pre><code>npm install binaryjs</code></pre>
<p><img class="hide-on-mobile" src="https://pbs.twimg.com/profile_images/1896980487/418999_10151351854540262_653030261_23084074_1065502090_n_bigger.jpg" style="float: right; margin-left: 1em"/></p>
<h2 id="features">Features</h2>
<ul>
<li>BinaryPack serialization format is fast, binary, and JSON-type compatible. Data stays binary end to end</li>
<li>Automatically chunks large binary data buffers for streaming performance</li>
<li>Send multiple streams of data concurrently over multiplexed websocket connection</li>
<li>API implements Node.js read/write Streams. You can pipe any stream into BinaryJS streams (and vice-versa)</li>
<li><code>pause</code>, <code>resume</code>, and <code>end</code> as in the Streams API</li>
<li>Currently supports Chrome 15+ and Firefox 11+, IE10. Fallbacks that will support Safari, mobile iOS and Android, and older FF/Chrome versions are in the works.</li>
</ul>
<h2 id="what-can-you-do-with-this-">What can you do with this?</h2>
<p>You have just as much flexibility as a full TCP socket between client and server. Here are some ideas by <a href="https://github.com/binaryjs">Eric Zhang</a> that are now possible:</p>
<ul>
<li>Realtime multiplayer video games without expensive stringifying</li>
<li>Streaming FLAC into HTML5 WebAudio api</li>
<li>Progressive image loading (for retina displays and high-res photorgraphy)</li>
<li>Streaming file uploads</li>
<li>Live HTML <code>&lt;video&gt;</code> streaming</li>
<li>PJAX (pushState + ajax) with no HTTP requests. Not even for image assets</li>
<li>Video/audio chat over websockets</li>
</ul>
<h2 id="usage">Usage</h2>
<p>Server</p>
<pre><code>var server = BinaryServer({port: 9000});

server.on(&#39;connection&#39;, function(client){
  client.on(&#39;stream&#39;, function(stream, meta){
    var file = fs.createWriteStream(meta.file);
    stream.pipe(file);
  });
});</code></pre>
<p>Browser:</p>
<pre><code>var client = BinaryClient(&#39;ws://localhost:9000&#39;);

client.on(&#39;open&#39;, function(stream){
  var stream = client.createStream({file: &#39;hello.txt&#39;});
  stream.write(&#39;Hello&#39;);
  stream.write(&#39;World!&#39;);
  stream.end();
});</code></pre>
<p>Check out <a href="https://github.com/binaryjs/binaryjs/blob/master/doc/start.md">getting started</a> page and <a href="for extensive documentation">binaryjs.com</a>. Thanks <a href="https://github.com/binaryjs">Eric Zhang</a> for making this happen!</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-04-binary-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-04-binary-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 04 Feb 2014 17:41:51 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[power-assert]]></title>
            <description><![CDATA[<p><a href="https://github.com/twada/power-assert">power-assert</a> is a module written by <a href="https://github.com/twada">Takuto Wada</a> that provides pretty damn descriptive assert messages for your tests.</p>
<pre><code>npm install power-assert</code></pre>
<h2 id="features">Features</h2>
<p><a href="https://github.com/twada/power-assert">power-assert</a> transforms your regular boring asserts to this:</p>
<pre><code>AssertionError: # /path/to/examples/mocha_node.js:10

    assert(this.ary.indexOf(who) === two);
                |   |       |    |   |
                |   |       |    |   2
                |   |       |    false
                |   -1      &quot;ariya&quot;
                [1,2,3]</code></pre>
<h2 id="usages">Usages</h2>
<p>There are two ways to use <a href="https://github.com/twada/power-assert">power-assert</a>.</p>
<ol>
<li><code>power-assert</code> + <code>espower-loader</code> : Only works under Node.</li>
<li><code>power-assert</code> + <a href="http://github.com/twada/grunt-espower"><code>grunt-espower</code></a> or <a href="http://github.com/twada/gulp-espower"><code>gulp-espower</code></a> : Generates instrumented code so works anywhere.</li>
</ol>
<p>To give you an idea what the trasnformed code looks like, for example, it transforms:</p>
<pre><code>assert(this.ary.indexOf(who) === two);</code></pre>
<p>into:</p>
<pre><code>assert(assert._expr(assert._capt(assert._capt(assert._capt(this.ary, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 20
    }
}).indexOf(assert._capt(who, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 32
    }
})), &#39;funcall&#39;, {
    start: {
        line: 9,
        column: 24
    }
}) === assert._capt(two, &#39;ident&#39;, {
    start: {
        line: 9,
        column: 41
    }
}), &#39;binary&#39;, {
    start: {
        line: 9,
        column: 37
    }
}), {
    start: {
        line: 9,
        column: 15
    },
    path: &#39;/Users/alexgorbatchev/1-npmawesome/1/power-assert-demo/test/power_assert/mocha_power_assert_test.js&#39;
}, &#39;        assert(this.ary.indexOf(who) === two);&#39;));</code></pre>
<p><a href="https://github.com/twada/power-assert">power-assert</a> also works with CoffeeScript files to produce output:</p>
<pre><code>AssertionError:

    assert this.ary.indexOf(who) isnt minusOne
                |   |       |    |    |
                |   |       |    |    -1
                |   |       |    false
                |   -1      &quot;ariya&quot;
                [1,2,3]</code></pre>
<p>I&#39;m very tempted to give this a try over my goto <a href="http://chaijs.com/">chai.js</a> library. I&#39;m a little bit worried that it changes number of lines and it might be harder to do certain type of debugging, but the benefit might be worth it!</p>
<p>There&#39;s a full documentation on the <a href="https://github.com/twada/power-assert">power-assert</a> github page and a <a href="https://github.com/twada/power-assert-demo">demo project</a>. What do you think?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-02-03-power-assert</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-02-03-power-assert</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 03 Feb 2014 18:59:55 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[coupon-code]]></title>
            <description><![CDATA[<p><a href="https://github.com/appsattic/node-coupon-code">coupon-code</a> implementation of Perl&#39;s <a href="https://github.com/grantm/Algorithm-CouponCode">Algorithm::CouponCode</a> written by <a href="https://github.com/appsattic">Andrew Chilton</a>. It is meant to solve a what appears on the surface very simple problem - coupon code validation. You would imagine printing codes on paper cups and then having user enter them - pretty straight forward. What happens however when user confuses zero for letter O, or five for S? Should you tell them their code is invalid?</p>
<pre><code>npm install coupon-code</code></pre>
<h2 id="usage">Usage</h2>
<p>Lets say you issue a code and print it on a coffee cup.</p>
<pre><code>var cc = require(&#39;coupon-code&#39;);

var code = cc.generate();
// 55G2-DHM0-50NN</code></pre>
<p>Somebody enjoyed their coffee and decided to enter the code, which now, upon inspection, is a little bit wet and fuzzy. They enter:</p>
<pre><code>cc.validate(&#39;s5g2-dhmo-50nn&#39;);
// true</code></pre>
<p>You can also specify size of the desired code:</p>
<pre><code>cc.generate();
// 55G2-DHM0-50NN

cc.generate({ parts : 4 });
// U5H9-HKDH-8RNX-1EX7

cc.generate({ partLen : 6 });
// WYLKQM-U35V40-9N84DA</code></pre>
<p>Pretty cool, eh? Until finding this package, I haven&#39;t given this problem a second thought. Have you dealt with coupon codes in your app?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-31-coupon-code</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-31-coupon-code</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 31 Jan 2014 17:35:42 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[rewire]]></title>
            <description><![CDATA[<p><a href="https://github.com/jhnns/rewire">rewire</a> is a dependency injection module for node.js applications written by <a href="https://github.com/jhnns">Johannes Ewald</a>. It adds a special setter and getter to modules so you can modify their behaviour for better unit testing.</p>
<pre><code>npm install rewire</code></pre>
<h2 id="features">Features</h2>
<ul>
<li>Inject mocks for other modules or globals like process</li>
<li>Leak private variables</li>
<li>Override variables within the module</li>
<li>Works with CoffeeScript</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>var rewire = require(&quot;rewire&quot;);

// rewire acts exactly like require.
var myModule = rewire(&quot;./myModule.js&quot;);

// Just with one difference:
// Your module will now export a special setter and getter for private variables.
myModule.__set__(&quot;myPrivateVar&quot;, 123);
myModule.__get__(&quot;myPrivateVar&quot;); // = 123

// This allows you to mock almost everything within the module e.g. the fs-module.
// Just pass the variable name as first parameter and your mock as second.
myModule.__set__(&quot;fs&quot;, {
  readFile: function (path, encoding, cb) {
    cb(null, &quot;Success!&quot;);
  }
});

myModule.readSomethingFromFileSystem(function (err, data) {
  console.log(data); // = Success!
});

// You can set different variables with one call.
myModule.__set__({
  fs: fsMock,
  http: httpMock,
  someOtherVar: &quot;hello&quot;
});

// You may also override globals. These changes are only within the module, so
// you don&#39;t have to be concerned that other modules are influenced by your mock.
myModule.__set__({
  console: {
    log: function () { /* be quiet */ }
  }
});</code></pre>
<p>The biggest difference between <code>rewire</code> and <code>require</code> is that calling <code>rewire</code> multiple times gives you a new module instance every time. Something to keep in mind.</p>
<p>This seems like a good and bad idea at the same time. The power to change and introspect private variables might lead to code that isn&#39;t exactly very suitable for tests. I find that writing code to be testable leads to much better code structure and I spend alot more time considering my API.</p>
<p>What do you think?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-30-rewire</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-30-rewire</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 30 Jan 2014 17:49:19 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[yarm]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/b928accd038cf24ef3f14cb5dd758b04" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/njoyard/yarm">yarm</a> is Yet Another REST Middleware for node.js and Express written by <a href="https://github.com/njoyard">Nicolas Joyard</a>. It has no dependencies, however it is intended to be used with <a href="http://expressjs.com/">Express</a> and will have additional features if <a href="http://mongoosejs.com/">Mongoose</a> is present.</p>
<pre><code>npm install yarm</code></pre>
<h2 id="features">Features</h2>
<p>The list of features is very extensive. <a href="https://github.com/njoyard/yarm">yarm</a> creates REST style APIs for native objects, <a href="http://mongoosejs.com/">Mongoose</a> and allows you to have pretty tight control over what&#39;s happening. There&#39;s a long list of customization options that let you specify output format, what&#39;s included, how MongoDB collection are fetched, permissions and so.</p>
<h2 id="usage">Usage</h2>
<pre><code>var app = require(&quot;express&quot;)();
var yarm = require(&quot;yarm&quot;);
var mongoose = require(&quot;mongoose&quot;);

app.use(&quot;/rest&quot;, yarm());

var postSchema = new mongoose.Schema({
  title: String,
  text: String,
  comments: [{
    author: String,
    text: String
  }]
});

var Post = mongoose.model(&quot;post&quot;, postSchema);

yarm.mongoose(&quot;posts&quot;, Post);

app.listen(80);

$ curl http://localhost/rest/posts?skip=10&amp;limit=1
{
  &quot;_count&quot;: 42,
  &quot;_items&quot;: [
    {
      &quot;_id&quot;: &quot;507f191e810c19729de860ea&quot;,
      &quot;title&quot;: &quot;My 11th post&quot;,
      &quot;text&quot;: &quot;Hello, World&quot;,
      &quot;comments&quot;: [
        {
          &quot;author&quot;: &quot;Bob&quot;,
          &quot;text&quot;: &quot;First !&quot;
        }
      ]
    }
  ]
}

$ curl http://localhost/rest/posts/507f191e810c19729de860ea
{
  &quot;_id&quot;: &quot;507f191e810c19729de860ea&quot;,
  &quot;title&quot;: &quot;My 11th post&quot;,
  &quot;text&quot;: &quot;Hello, World&quot;,
  &quot;comments&quot;: [
    {
      &quot;author&quot;: &quot;Bob&quot;,
      &quot;text&quot;: &quot;First !&quot;
    }
  ]
}

$ curl http://localhost/rest/posts/507f191e810c19729de860ea/comments/0/text
First !</code></pre>
<p>You can roll your own:</p>
<pre><code>resource
  .get(function(req, cb) {
    // GET handler
  })
  .put(function(req, isPatch, cb) {
    // PUT and PATCH handler
  })
  .post(function(req, cb) {
    // POST handler
  })
  .del(function(req, cb) {
    // DELETE handler
  });</code></pre>
<p>Of course, you can have nested resources.</p>
<pre><code>yarm.resource(&quot;/posts/:pid&quot;).sub(&quot;comments/:cid/*&quot;).get(function(req, cb) {
  cb(null, { ... });
});

$ curl http://localhost/rest/posts/first-post/comments/3/foo/bar
...</code></pre>
<p>Check out <a href="https://github.com/njoyard/yarm">yarm</a> github page for complete documentation. How do you handle your APIs?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-29-yarm</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-29-yarm</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 29 Jan 2014 17:37:23 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[modella]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/824b41e6108a22c4c96f50ee23419369" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/modella/modella">modella</a> is a bare bones model framework written by <a href="https://github.com/matthewmueller">Matthew Mueller</a> of the <a href="/posts/2013-12-27-cheerio/">cheerio</a> fame. It exposes a few APIs on which plugins can be built to enhance functionality. The core module and select plugins work on the client and server.</p>
<pre><code>npm install modella</code></pre>
<h2 id="plugins">Plugins</h2>
<p>Most of functionality comes bundles as plugins:</p>
<ul>
<li><p>Adapter (Sync Layer) Plugins</p>
<ul>
<li><a href="https://github.com/modella/ajax">ajax</a> - RESTful AJAX HTTP adapter.</li>
<li><a href="https://github.com/modella/ejdb">ejdb</a> - Ejdb database adapter.</li>
<li><a href="https://github.com/modella/leveldb">leveldb</a> - LevelDB adapter.</li>
<li><a href="https://github.com/modella/mongo">mongo</a> - MongoDB adapter.</li>
<li><a href="https://github.com/alexmingoia/modella-mysql">modella-mysql</a> - MySQL adapter.</li>
<li><a href="https://github.com/alexmingoia/modella-memory">modella-memory</a> - In-memory adapter.</li>
</ul>
</li>
<li><p>Attribute Utilities</p>
<ul>
<li><a href="https://github.com/modella/validators">validators</a> - Validations for attributes</li>
<li><a href="https://github.com/modella/slug">slug</a> - Slug generation on attributes</li>
<li><a href="https://github.com/ramitos/modella-level-relations">modella-level-relations</a> - LevelUP based modella relations</li>
</ul>
</li>
<li><p>Security Plugins</p>
<ul>
<li><a href="https://github.com/modella/auth">auth</a> - Authorization plugin.</li>
<li><a href="https://github.com/modella/filter">filter</a> - Filter sensitive fields from a JSON blob.</li>
<li><a href="https://github.com/modella/protection">protection</a> - Mass-assignment protection.</li>
</ul>
</li>
<li><p>Misc</p>
<ul>
<li><a href="https://github.com/alexmingoia/modella-resource">modella-resource</a> - Expose <a href="https://github.com/modella/modella">modella</a> models via RESTful resource middleware (for use with Express).</li>
<li><a href="https://github.com/modella/friendly-errors">friendly-errors</a> - add friendly error messages to attributes.</li>
<li><a href="https://github.com/modella/save-invalid">save-invalid</a> - Save invalid models and mark them as dirty in the database.</li>
</ul>
</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>var modella = require(&#39;modella&#39;);
var validators = require(&#39;modella-validators&#39;);
var mongo = require(&#39;modella-mongo&#39;)(&#39;localhost/db&#39;)
var User = modella(&#39;User&#39;);

User.use(validators);
User.use(mongo);

User
  .attr(&#39;_id&#39;)
  .attr(&#39;username&#39;, { required: true })
  .attr(&#39;email&#39;, { required: true, format: &#39;email&#39; });

User.index(&#39;email&#39;, { unique : true });

var user = new User({ name: &#39;Charley&#39; });

user.save(function(err) {
  User.find(user._id, function(err, u) {
    console.log(u.username());
  });
});</code></pre>
<p>If you feel disgrundled with Mongoose or just tired of using the raw driver, give <a href="https://github.com/modella/modella">modella</a> a try!</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-28-modella</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-28-modella</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 28 Jan 2014 17:56:33 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[mversion]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/c1ad8925b70df4f6665315865511eafc" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/mikaelbr/mversion">mversion</a> is an NPM, Bower, Jam, Ender module version handler. It imitates <a href="https://npmjs.org/doc/version.html"><code>npm version</code></a> to also work on other packaging files. For those times you have either have multiple packaging files (like <code>bower.json</code>, <code>component.json</code>, <code>manifest.json</code>) or just not a <code>package.json</code> file. <code>mversion</code> can easily bump your version and optionally commit and create a tag.</p>
<pre><code>npm install mversion</code></pre>
<h2 id="features">Features</h2>
<ul>
<li>Update version by defining new semver valid version or a release string (major, minor, patch, build).</li>
<li><p>Use <code>-m</code> to auto commit and tag in Git. Apply optional message and use <code>%s</code> as placeholder for the updated version. Default message is <code>v%s</code> where <code>%s</code> is replaced with new version. For example:</p>
<pre><code>$ mversion minor -m
$ mversion minor -m &#39;Bumped to v%s&#39;</code></pre>
</li>
</ul>
<h2 id="cli-usage">CLI Usage</h2>
<pre><code>$ mversion 0.0.5 -m
New Version: 0.0.5
Updated package.json
Updated component.json
Updated manifest.json
Commited to git and created tag v0.0.5</code></pre>
<h2 id="api-usage">API Usage</h2>
<pre><code>var mversion = require(&#39;mversion&#39;);

mversion.get(function (err, data) {
  /*
    data = {
      &#39;package.json&#39;: VERSION,
      &#39;component.json&#39;: VERSION
    }
  */
});

mversion.update(&#39;minor&#39;, function (err, data) { })
mversion.update(&#39;major&#39;, function (err, data) { })
mversion.update(&#39;major&#39;, &#39;Some commit message for version %s&#39;, function (err, data) { }) // Will commit/tag
mversion.update(&#39;patch&#39;, function (err, data) { })
mversion.update(&#39;build&#39;, function (err, data) { })
mversion.update(&#39;0.0.1&#39;, &#39;Bumping version&#39;, function (err, data) { }) // Will commit/tag
mversion.update(&#39;v1.0.1&#39;, function (err, data) { })
mversion.update(&#39;v1.0.1-beta&#39;, function (err, data) { })
mversion.update(&#39;v1.0.1-010988&#39;, function (err, data) { })</code></pre>
<h2 id="gulp">Gulp</h2>
<p>Of course, <a href="https://github.com/mikaelbr">Mikael Brevik</a> has <a href="https://github.com/mikaelbr/gulp-mversion">gulp.js plugin</a> to help you with automate build and deploy process.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-27-mversion</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-27-mversion</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 28 Jan 2014 01:47:14 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[schema-inspector]]></title>
            <description><![CDATA[<div style="text-align: center"><img class="hide-on-mobile" src="/images/posts/schema-inspector.png" style="margin-bottom: 1em" /></div>

<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/16c362a6f8dbbedbc3bf13d001c6b286" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/Atinux/schema-inspector">schema-inspector</a> is a powerful tool to sanitize and validate JS objects written by <a href="https://github.com/Atinux">Sébastien Chopin</a>. It&#39;s disigned to work both client-side and server-side and to be scalable with allowing asynchronous and synchronous calls. There&#39;s support for object validation and sanitazation with a very simple schema definition.</p>
<pre><code>npm install schema-inspector</code></pre>
<h2 id="usage">Usage</h2>
<pre><code>var inspector = require(&#39;schema-inspector&#39;);

var schema = {
  type: &#39;object&#39;,
  properties: {
    lorem: { type: &#39;string&#39;, eq: &#39;ipsum&#39; },
    dolor: {
      type: &#39;array&#39;,
      items: { type: &#39;number&#39; }
    }
  }
};

var candidate = {
  lorem: &#39;not_ipsum&#39;,
  dolor: [ 12, 34, &#39;ERROR&#39;, 45, &#39;INVALID&#39; ]
};
var result = inspector.validate(schema, candidate); // Candidate is not valid
console.log(result.format());

/*
  Property @.lorem: must be equal to &quot;ipsum&quot;, but is equal to &quot;not_ipsum&quot;
  Property @.dolor[2]: must be number, but is string
  Property @.dolor[4]: must be number, but is string
*/</code></pre>
<h2 id="more">More</h2>
<p>Object validation can come in extremely handy when you are writing APIs. On one end you can validate user input:</p>
<pre><code>var express = require(&#39;express&#39;);
var inspector = require(&#39;schema-inspector&#39;);
var app = express();

var schema = {
  type: &#39;object&#39;,
  properties: {
    title: { type: &#39;string&#39;, ne: &#39;&#39; },
    message: { type: &#39;string&#39;, ne: &#39;&#39; }
  }
};

app.post(&#39;/api&#39;, function(req, res, next) {
  var post = req.body;
  var validation = inspector.validate(schema, post);

  if(!validation.valid) {
    return res.send(validation.errors, 400);
  }

  res.send({status: &#39;ok&#39;});
});</code></pre>
<p>On the flip side, you can use the <a href="https://github.com/Atinux/schema-inspector">schema-inspector</a> to validate API response in your tests:</p>
<pre><code>var request = require(&#39;request&#39;);
var inspector = require(&#39;schema-inspector&#39;);

var schema = {
  type: &#39;object&#39;,
  properties: {
    statusCode: { type: &#39;number&#39;, eq: 200 },
    body: { type: &#39;object&#39;, properties: {
      status: { type: &#39;string&#39;, eq: &#39;ok&#39; }
    }}
  }
};

describe(&#39;POST /api&#39;, function()
{
  var response;

  before(function(done) {
    request(
      {
        url: &#39;/api&#39;,
        json: { title: &#39;Hello!&#39;, message: &#39;First Post&#39; }
        method: &#39;POST&#39;
      },
      function(err, r) {
        response = {
          statusCode: r.statusCode,
          body: r.body
        };
        done()
      }
    );
  });

  it(&#39;validates&#39;, function() {
    var validation = inspector.validate(schema, response);

    if(!validation.valid) {
      throw new Error(validation.format());
    }
  });
});</code></pre>
<p>In the end, you have a strong contract between your APIs, consumer and your tests with just a few lines of code. I&#39;m loving this! The <a href="http://atinux.github.io/schema-inspector/">documentation</a> site is very good and I strongly recommend checking it out.</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-24-schema-inspector</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-24-schema-inspector</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 24 Jan 2014 17:17:24 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[oboe.js]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/a26d7792bcf2ccd16be185627ce8e37d" style="float: right; margin-left: 1em"/></p>
<p><a href="https://github.com/jimhigson/oboe.js">oboe.js</a> is written by <a href="https://github.com/jimhigson">Jim Higson</a> and helps web applications respond quicker by wrapping HTTP&#39;s request-response model with a progressively streamed interface. It glues a transport that sits somewhere between streaming and downloading to a JSON parser. It doesn&#39;t have any external dependencies.</p>
<pre><code>npm install oboe</code></pre>
<h2 id="features">Features</h2>
<p>The library is extremely feature rich for its 13KB size. I will try to summarize them here and you can get full details with examples on the <a href="https://github.com/jimhigson/oboe.js">oboe.js</a> github page.</p>
<ul>
<li>Can hanging up when everything that&#39;s needed was processed</li>
<li>Can react to field and node names</li>
<li>Can react to partial arrays</li>
<li>Can react to specific nodes or to fields located anywhere</li>
<li>Can use CSS4 style matching patterns</li>
</ul>
<blockquote>
<p>Asynchronous parsing is better if the data is written out progressively from the server side because we&#39;re sending and parsing everything at the earliest possible opportunity. If you can, send small bits of the output asynchronously as soon as it is ready instead of waiting before everything is ready to start sending.</p>
</blockquote>
<div style="text-align: center"><img class="hide-on-mobile" src="/images/posts/oboe.png" style="width: 400px; margin: 1em 0" /></div>

<h2 id="usage">Usage</h2>
<p>Here&#39;s a very <strong>basic</strong> use case:</p>
<pre><code>{
   &quot;foods&quot;: [
      {&quot;colour&quot;:&quot;purple&quot;},
      {&quot;colour&quot;:&quot;red&quot;},
      {&quot;colour&quot;:&quot;brown&quot;}
   ],
   &quot;badThings&quot;: [
      {&quot;name&quot;:&quot;poison&quot;},
      {&quot;name&quot;:&quot;broken_glass&quot;}
   ]
}

var oboe = require(&#39;oboe&#39;);

oboe(&#39;http://localhost/myapp/things.json&#39;)
  .node(&#39;foods.*&#39;, function(foodThing) {
    // This callback will be called everytime a new object is found in the
    // foods array. Oboe won&#39;t wait for the download to finish first.
    console.log(foodThing.name);
  })
  .node(&#39;badThings.*&#39;, function(badThing) {
    console.log(&#39;Danger! stay away from &#39; + badThings.name);
  })
  .done(function(things) {
    console.log(&#39;there are &#39; + things.foods.length + &#39; things you can eat &#39; +
      &#39;and &#39; + things.badThings.length + &#39; that you shouldn\&#39;t.&#39;);
  });</code></pre>
<p>Have you used streaming JSON parser before?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-23-oboe-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2014-01-23-oboe-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 23 Jan 2014 17:46:38 GMT</pubDate>
        </item>
    </channel>
</rss>