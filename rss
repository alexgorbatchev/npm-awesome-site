<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sat, 18 Jan 2014 02:21:53 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Sat, 18 Jan 2014 02:21:35 GMT</pubDate>
        <item>
            <title><![CDATA[gaze]]></title>
            <description><![CDATA[<p><a href="https://github.com/shama/gaze">gaze</a> a globbing <code>fs.watch</code> wrapper written by <a href="https://github.com/shama">Kyle Robinson Young</a> and built from the best parts of other fine watch libs. Compatible with Node.js 0.10/0.8, Windows, OSX and Linux. There&#39;s a <a href="https://npmjs.org/browse/depended/gaze">pretty long list</a> of other great modules that are built on top of <a href="https://github.com/shama/gaze">gaze</a>.</p>
<p><img src="https://github-camo.global.ssl.fastly.net/4b73eecb09b0400ba274ed9aa205da664ee5538e/687474703a2f2f646f6e746b72792e636f6d2f696d616765732f7265706f732f67617a652e706e67" style="width: 100%"/></p>
<h2 id="usage">Usage</h2>
<pre><code>var gaze = require(&#39;gaze&#39;);

// Watch all .js files/dirs in process.cwd()
gaze(&#39;**/*.js&#39;, function(err, watcher) {
  // Files have all started watching
  // watcher === this

  // Get all watched files
  console.log(this.watched());

  // On file changed
  this.on(&#39;changed&#39;, function(filepath) {
    console.log(filepath + &#39; was changed&#39;);
  });

  // On file added
  this.on(&#39;added&#39;, function(filepath) {
    console.log(filepath + &#39; was added&#39;);
  });

  // On file deleted
  this.on(&#39;deleted&#39;, function(filepath) {
    console.log(filepath + &#39; was deleted&#39;);
  });

  // On changed/added/deleted
  this.on(&#39;all&#39;, function(event, filepath) {
    console.log(filepath + &#39; was &#39; + event);
  });

  // Get watched files with relative paths
  console.log(this.relative());
});

// Also accepts an array of patterns
gaze([&#39;stylesheets/*.css&#39;, &#39;images/**/*.png&#39;], function() {
  // Add more patterns later to be watched
  this.add([&#39;js/*.js&#39;]);
});</code></pre>
<p>I&#39;ve been getting my feet wet with <a href="http://gulpjs.com">gulp.js</a> and specifically <a href="https://github.com/floatdrop/gulp-watch">gulp-watch</a> plugin which helps you process only the files that were changed. This helps to speed up asset building quite a bit.</p>
<p>Are you using any file watchers in your project?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-17-gaze</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2014-01-17-gaze            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Sat, 18 Jan 2014 01:50:40 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[shortId]]></title>
            <description><![CDATA[<p><a href="https://github.com/dylang/shortid">shortId</a> creates amazingly short non-sequential url-friendly unique IDs. Perfect for url shorteners, MongoDB and Redis as well as any other ID users might see.</p>
<h2 id="features">Features</h2>
<ul>
<li>By default 7-12 url-friendly characters: <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>_-</code></li>
<li>Non-sequential so they are not predictable</li>
<li>Supports cluster (automatically), custom seeds, custom alphabet</li>
</ul>
<h2 id="example">Example</h2>
<pre><code>var shortId = require(&#39;shortid&#39;);

console.log(shortId.generate());
// PPBqWA9</code></pre>
<h2 id="more">More</h2>
<p>What really caught my eye was the <a href="https://github.com/dylang/shortid/blob/master/lib/random.js">custom implementation</a> of <code>random</code>.</p>
<pre><code>var seed = 1;

function random() {
  seed = (seed * 9301 + 49297) % 233280;
  return seed/(233280.0);
};</code></pre>
<p>Here&#39;s a JSFiddle to play around with it. It works...</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/alexgorbatchev/8yxC2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>It got me very curious as to what it actually does as it&#39;s not obvious to me at first glance. I found a <a href="http://indiegamr.com/generate-repeatable-random-numbers-in-js/">decent article</a> talking about this function. Turns out this function is meant to generate predictable &quot;random&quot; numbers based on the seed.</p>
<p>Digging a little bit further, I found <a href="https://gist.github.com/alexgorbatchev/8428967">this post</a> from the past days:</p>
<blockquote>
<p>... horrible random (sic) number generators are used by people who don&#39;t know better, while very good ones take less than 20 lines of Pascal! Amoung the horrid generators are some that come with certain systems or are presented in textbooks!</p>
<p>...</p>
<p>Simple (bad) Psuedo Random Number Generator (Sic)
The low bit typically just toggles between calls.</p>
<pre><code>random() {
   seed = ( seed * mulitiplier + increment ) % modulus;
   return seed;
}</code></pre>
</blockquote>
<p>and then later</p>
<blockquote>
<pre><code>/*
** Dr. Park&#39;s algorithm published in the Oct. &#39;88 ACM
** &quot;Random Number Generators: Good Ones Are Hard To Find&quot;
** His version available at ftp://cs.wm.edu/pub/rngs.tar
** This is called a   Lehmer Generator
*/

static long Seed = 1;       /* This is required to be 32 bits long */

long random()
/*
**    Random number between  0  and  2147483647 (2**31 - 1)  inclusive
**/
{
  a = 48271
  m = 2147483647
  r = 3399    /* r = m mod a */
  q = 44488   /* q = m div a */
  if ((Seed = Seed % q * a - Seed / q * r) &lt; 0)
    Seed += m;
  return Seed - 1;
}</code></pre>
</blockquote>
<p>Here&#39;s a JavaScript implementation:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/alexgorbatchev/g6aRe/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>Should the function in <a href="https://github.com/dylang/shortid">shortId</a> be patched? Thoughts?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-14-shortid</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2014-01-14-shortid            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 15 Jan 2014 00:33:38 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[testium]]></title>
            <description><![CDATA[<p><a href="https://github.com/groupon/testium">testium</a> is a testing platform focused on providing a simple, but effective, platform for testing your code in different browsers (via Selenium) and headlessly (via PhantomJS). It uses <a href="https://github.com/groupon/webdriver-http-sync">webdriver-http-sync</a>
which Groupon wrote in order to communicate using the WebDriver protocol to a Selenium server.</p>
<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/f07c4699fa2274d2ad44323331ee8161?d=https%3A%2F%2Fidenticons.github.com%2Fa25772e176c9744a17818d2be63b2c20.png&r=x&s=400" style="width: 150px; float: right" /></p>
<p><blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p><a href="https://twitter.com/Groupon">@Groupon</a>&#39;s Browser Integration Testing platform <a href="https://twitter.com/search?q=%23Testium&amp;src=hash">#Testium</a> is now open source! <a href="https://twitter.com/search?q=%23nodejs&amp;src=hash">#nodejs</a> + Mocha + Selenium = Happy! <a href="https://t.co/lgXiRjflx0"><a href="https://t.co/lgXiRjflx0">https://t.co/lgXiRjflx0</a></a></p>&mdash; Jess Telford (@jesstelford) <a href="https://twitter.com/jesstelford/statuses/413382587348811776">December 18, 2013</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>From <a href="https://engineering.groupon.com/2014/misc/i-tier-testium/">the introductory article</a>:</p>
<blockquote>
<p>We wanted to write tests in JavaScript and Mocha with a synchronous API that takes advantage of our existing Selenium infrastructure. WD.js came close, but the challenge for full adoption came with the syntax, which is callback-based or promise-based. These are typical patterns in JavaScript projects, but for an integration testing tool, we only want to execute serial actions. A synchronous API made the most sense.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Further, there are existing technical limitations due to WebDriver being a common standard across all browsers. Some aspects canâ€™t be implemented in a specific browser and therefore these features are not implemented at all.</p>
<p>There are four specific issues with WebDriver we wanted to resolve:</p>
<ul>
<li>response status codes unavailable</li>
<li>response headers unavailable</li>
<li>request headers not modifiable</li>
<li>page must be loaded to set cookies</li>
</ul>
</blockquote>
<h2 id="example">Example</h2>
<p>A simple test using <a href="https://github.com/groupon/assertive">assertive</a>.</p>
<pre><code>{getBrowser} = require &#39;testium&#39;
assert = require &#39;assertive&#39; # or whatever assert library you prefer

describe &#39;browse&#39;, -&gt;
  before -&gt;
    @browser = getBrowser()
    @browser.navigateTo &#39;/my-account&#39;
    assert.equal 200, @browser.getStatusCode()

  it &#39;is serving up gzipped content&#39;, -&gt;
    assert.equal &#39;gzip&#39;, @browser.getHeader(&#39;Content-Encoding&#39;)</code></pre>
<h2 id="more">More</h2>
<p>One of the more exciting and unique features is ability to diff screenshots and fail based on the difference. This isn&#39;t a new idea, but shipping it as part of a testing framework can increase its adopatation. Finally, check out the demo video and don&#39;t forget to read <a href="https://engineering.groupon.com/2014/misc/i-tier-testium/">the introductory article</a>.</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/qmPlM_SqZes" frameborder="0" allowfullscreen></iframe>

<p>On the side note, super excited to find out that Groupon is using CoffeeScript! Are you?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-13-testium</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2014-01-13-testium            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 13 Jan 2014 20:49:41 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[messageformat.js]]></title>
            <description><![CDATA[<p><a href="https://github.com/SlexAxton/messageformat.js">messageformat.js</a> is a module by <a href="https://github.com/SlexAxton">Alex Sexton</a> (<a href="https://twitter.com/SlexAxton">@SlexAxton</a>) for handling both <em>pluralization</em> and <em>gender</em> in your applications. It can also lead to much better translations, as it was built by <a href="http://icu-project.org/apiref/icu4j/com/ibm/icu/text/MessageFormat.html">ICU</a> to help solve those two problems for all known <a href="http://cldr.unicode.org/">CLDR</a> languages - likely all the ones you care about.</p>
<h2 id="features">Features</h2>
<p><img class="hide-on-mobile" src="/images/posts/messageformat.png" style="width: 150px; float: right" /></p>
<p>MessageFormat in Java-land technically incorporates all other type formatting (and the older ChoiceFormat) directly into its messages, however, in the name of filesize, messageformat.js only strives to implement <strong>SelectFormat</strong> and <strong>PluralFormat</strong>. There are plans to pull in locale-aware <strong>NumberFormat</strong> parsing as a &quot;plugin&quot; to this library, but as of right now, it&#39;s best to pass things in preformatted (as suggested in the ICU docs).</p>
<ul>
<li>Handles arbitrary nesting of pluralization and select rules.</li>
<li>Works on the server and the client.</li>
<li>No i18n necessary - you can use it for just well-formed english sentences. <code>UX++;</code></li>
<li>Speed: Compiles messages to JavaScript code.<ul>
<li>This is great for speed. Message formatting is just string concatenation.</li>
<li>Run a precompiler at build time and remove the need for most of the library. <code>filesize--;</code></li>
</ul>
</li>
<li>Compatible with other languages that support MessageFormat</li>
<li>Very whitespace tolerant.</li>
<li>Supports unicode characters</li>
<li>Most translation companies are beginning to be exposed to translations like this, even if it&#39;s not their core business.</li>
</ul>
<h2 id="example">Example</h2>
<pre><code>var mf = new MessageFormat(&#39;en&#39;);
var message = mf.compile(&#39;This is a message.&#39;); // returns a function

message();
// &quot;This is a message.&quot;

message = mf.compile(&#39;His name is {NAME}.&#39;);
message({ &quot;NAME&quot; : &quot;Jed&quot; });
// &quot;His name is Jed.&quot;</code></pre>
<p>Have you ever had to localize an application? What was your eperience like?</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-10-messageformat</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2014-01-10-messageformat            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 10 Jan 2014 18:24:37 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[gulp]]></title>
            <description><![CDATA[<p><a href="https://github.com/gulpjs/gulp">gulp</a> is a streaming build and task runner system. It&#39;s an alternative to the ever prelific <a href="http://gruntjs.com/">grunt.js</a>. There&#39;s been quite <a href="https://twitter.com/search?q=gulp%20grunt&amp;src=typd">a bit of buzz on the twitters</a>.</p>
<h2 id="example">Example</h2>
<p>This file is just a quick sample to give you a taste of what gulp does.</p>
<pre><code>var gulp = require(&#39;gulp&#39;);
var uglify = require(&#39;gulp-uglify&#39;);
var imagemin = require(&#39;gulp-imagemin&#39;);

gulp.task(&#39;scripts&#39;, function() {
  // Minify and copy all JavaScript (except vendor scripts)
  return gulp.src([&#39;client/js/**/*.js&#39;, &#39;!client/js/vendor/**&#39;])
    .pipe(uglify())
    .pipe(gulp.dest(&#39;build/js&#39;));
});

// Copy all static images
gulp.task(&#39;images&#39;, function() {
 return gulp.src(&#39;client/img/**&#39;)
    .pipe(imagemin())
    .pipe(gulp.dest(&#39;build/img&#39;));
});

// The default task (called when you run `gulp`)
gulp.task(&#39;default&#39;, function() {
  gulp.run(&#39;scripts&#39;, &#39;images&#39;);

  // Watch files and run tasks if they change
  gulp.watch(&#39;client/js/**&#39;, function() {
    gulp.run(&#39;scripts&#39;);
  });

  gulp.watch(&#39;client/img/**&#39;, function() {
    gulp.run(&#39;images&#39;);
  });
});</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/gulp.png" style="width: 150px; float: right" /></p>
<h2 id="opinion">Opinion</h2>
<p>There&#39;s always a lot of excitement when a new thing comes out that promises to be better than the current thing. It seems to be especially true when the current thing is already pretty solid and just works. What gets to people are the edge cases and they feel annoyed and frustrated easily forgetting how smoothly the rest of the system works.</p>
<p><a href="https://github.com/bevacqua">Nicolas Bevacqua</a> has written a <a href="http://blog.ponyfoo.com/2014/01/09/gulp-grunt-whatever">very interesting article</a> on the subject. My favorite quote:</p>
<blockquote>
<p>Make a choice by yourself, don&#39;t just pick something <em>because XYZ said so</em>. Pick the tool which works for you. The one you understand, are comfortable with. Above all, <strong>the one that fits your needs</strong>. Don&#39;t go blindly chasing the latest fad because someone else tells you to. Similarly, don&#39;t get stuck with monolithic jQuery applications (just to give out an example), try something else. Innovate. Be the change you want to see in the world.</p>
</blockquote>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-09-gulp</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2014-01-09-gulp            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 09 Jan 2014 17:57:52 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[chalk]]></title>
            <description><![CDATA[<p><a href="https://github.com/sindresorhus/chalk">chalk</a> is a clean and focused alternative to <a href="https://github.com/Marak/colors.js">colors.js</a>, which is currently the most popular string styling module, but it has serious deficiencies like extending String.prototype which causes all kinds of <a href="https://github.com/yeoman/yo/issues/68">problems</a>. Although there are other ones, they either do too much or not enough.</p>
<pre><code>npm install chalk</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/chalk.png" style="width: 250px; float: right" /></p>
<h2 id="why">Why</h2>
<ul>
<li><strong>Doesn&#39;t extend String.prototype</strong></li>
<li>Expressive API</li>
<li>Clean and focused</li>
<li>Auto-detects color support</li>
<li>Actively maintained</li>
<li><a href="https://npmjs.org/browse/depended/chalk">Used by 150+ modules</a></li>
</ul>
<h2 id="example">Example</h2>
<pre><code>var chalk = require(&#39;chalk&#39;);

// style a string
console.log(  chalk.blue(&#39;Hello world!&#39;)  );

// combine styled and normal strings
console.log(  chalk.blue(&#39;Hello&#39;), &#39;World&#39; + chalk.red(&#39;!&#39;)  );

// compose multiple styles using the chainable API
console.log(  chalk.blue.bgRed.bold(&#39;Hello world!&#39;)  );

// nest styles
console.log(  chalk.red(&#39;Hello&#39;, chalk.underline.bgBlue(&#39;world&#39;) + &#39;!&#39;)  );

// pass in multiple arguments
console.log(  chalk.blue(&#39;Hello&#39;, &#39;World!&#39;, &#39;Foo&#39;, &#39;bar&#39;, &#39;biz&#39;, &#39;baz&#39;)  );</code></pre>
<p><a href="https://github.com/sindresorhus/chalk">chalk</a> was written by <a href="https://github.com/sindresorhus">Sindre Sorhus</a> <a href="https://twitter.com/sindresorhus">@sindresorhus</a> who&#39;s got a ton of other opensource work. Thank you!</p>
]]></description>
            <link>http://npmawesome.com/posts/2014-01-06-chalk</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2014-01-06-chalk            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 07 Jan 2014 00:17:02 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[recluster]]></title>
            <description><![CDATA[<p><a href="https://github.com/doxout/recluster">recluster</a> is a clustering library with support for zero-downtime reloading.</p>
<pre><code>npm install recluster</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/recluster.jpg" style="width: 250px; float: right" /></p>
<p>Delivering that 100% uptime for web apps can be a tricky business. Errors and new code rollouts are the things we have to deal with on a daily basis and if you run continuous integration, your app is probably restarting many times a day. What kind of experience this might be creating for your users?</p>
<p><a href="https://github.com/doxout/recluster">recluster</a> is among a <a href="https://github.com/nodejitsu/forever">few</a> <a href="https://github.com/superjoe30/naught">other</a> libraries that try to address this issue. It is:</p>
<ul>
<li>Cluster aware.</li>
<li>Zero downtime errors and deploys.</li>
<li>Does not run as daemon.</li>
<li>Log agnostic.</li>
<li>Simple, relatively easy to reason about.</li>
</ul>
<h2 id="example">Example</h2>
<p>If <code>server.js</code> is your regular http server (e.g. express), create <code>cluster.js</code> and add:</p>
<pre><code>var recluster = require(&#39;recluster&#39;),
    path = require(&#39;path&#39;);

var cluster = recluster(path.join(__dirname, &#39;server.js&#39;));
cluster.run();

process.on(&#39;SIGUSR2&#39;, function() {
    console.log(&#39;Got SIGUSR2, reloading cluster...&#39;);
    cluster.reload();
});

console.log(&quot;spawned cluster, kill -s SIGUSR2&quot;, process.pid, &quot;to reload&quot;);</code></pre>
<p>then run it</p>
<pre><code>node cluster.js</code></pre>
<p>To hot-reload the server, simply run</p>
<pre><code>kill -s SIGUSR2 &lt;cluster_pid&gt;</code></pre>
<p>A server worker can gracefully exit by cleaning up in the &#39;close&#39; event of its server:</p>
<pre><code>server.on(&#39;close&#39;, function() {
    // cleanup
});</code></pre>
<p>Non-server workers can listen for the disconnect command and shut down gracefully before the kill timeout:</p>
<pre><code>process.on(&#39;message&#39;, function(m) {
    if (m.cmd == &#39;disconnect&#39;) {
        // cleanup
    }
})</code></pre>
<p>For some fantastic insights on the subject, checkout <a href="http://sandinmyjoints.github.io/towards-100-pct-uptime">Towards 100% Uptime with Node.js</a> slides by <a href="https://github.com/sandinmyjoints">William Bert</a> <a href="https://twitter.com/williamjohnbert">@williamjohnbert</a> and <a href="http://qzaidi.github.io/2013/05/14/node-in-production/">10 steps to nodejs nirvana in production</a> by <a href="http://github.com/qzaidi">Qasim Zaidi</a> <a href="http://twitter.com/#!/kernelhacker">@kernelhacker</a>.</p>
<p>Curious, how do you manage your node process?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-31-recluster</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-31-recluster            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 31 Dec 2013 18:45:13 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[rework]]></title>
            <description><![CDATA[<p><a href="https://github.com/reworkcss/rework">rework</a> is a tool for CSS manipulations built on css, allowing you to automate vendor prefixing, create your own properties, inline images, anything you can imagine! Also works in the browser.</p>
<pre><code>npm install rework</code></pre>
<p><img class="hide-on-mobile" src="/images/posts/rework.gif" style="width: 250px; float: right" /></p>
<p>Originally written by TJ Holowaychuk, <a href="https://github.com/reworkcss/rework">rework</a> is a module for working with CSS. Just like <a href="https://github.com/ariya/esprima">esprima</a> for JavaScript, <a href="https://github.com/reworkcss/rework">rework</a> allows you to change and extend CSS, basically take it to a whole new level.</p>
<h2 id="example">Example</h2>
<p>To get an idea of how to use <a href="https://github.com/reworkcss/rework">rework</a>, take a look at one of the many plugins. A good example would be <a href="https://github.com/simme/rework-imagesize">rework-imagesize</a> plugin.</p>
<pre><code>var rework = require(&#39;rework&#39;);
var size   = require(&#39;rework-imagesize&#39;);

var css = rework(str)
  .use(size(&#39;path/to/images/folder&#39;))
  .toString();</code></pre>
<p>Using the above JavaScript. This:</p>
<pre><code>h1 {
  background: url(&#39;myimage.png&#39;);
  imgsize: myimage.png;
  text-indent: 100%;
}</code></pre>
<p>Would produce something like:</p>
<pre><code>h1 {
  background: url(&#39;myimage.png&#39;);
  text-indent: 100%;
  height: 201px;
  width: 300px;
}</code></pre>
<p><a href="https://github.com/reworkcss">Rework Github</a> account has a good number of modules to do various things to your CSS. I also like the idea of using <a href="https://github.com/reworkcss/rework">rework</a> as a post processor for your favourite dynamic CSS language, such as <a href="http://lesscss.org/">LESS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> or <a href="https://github.com/andrew/node-sass">SASS</a>.</p>
<p>Curious what is your favourite dynamic CSS framework?</p>
<p><em>Image borrowed from <a href="http://www.horriblelogos.com/rework-digital/">horrible logos</a> and isn&#39;t the official logo :)</em></p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-30-rework</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-30-rework            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 30 Dec 2013 18:27:29 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[cheerio]]></title>
            <description><![CDATA[<p><a href="https://github.com/MatthewMueller/cheerio">cheerio</a> is a fast, flexible, and lean implementation of core jQuery designed specifically for the server.</p>
<pre><code>npm install cheerio</code></pre>
<h2 id="features">Features</h2>
<p><img class="hide-on-mobile" src="/images/posts/cheerio.jpg" style="width: 150px; float: right" /></p>
<ul>
<li>Familiar syntax. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> implements a subset of core jQuery. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing its truly gorgeous API.</li>
<li>Blazingly fast. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient. Preliminary end-to-end benchmarks suggest that <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> is about 8x faster than JSDOM.</li>
<li>Insanely flexible. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> wraps around <a href="https://twitter.com/fb55">@FB55</a>&#39;s <a href="https://github.com/fb55/htmlparser2">forgiving htmlparser</a>. <a href="https://github.com/MatthewMueller/cheerio">cheerio</a> can parse nearly any HTML or XML document.</li>
</ul>
<h2 id="example">Example</h2>
<pre><code>var cheerio = require(&#39;cheerio&#39;),
    $ = cheerio.load(&#39;&lt;h2 class=&quot;title&quot;&gt;Hello world&lt;/h2&gt;&#39;);

$(&#39;h2.title&#39;).text(&#39;Hello there!&#39;);
$(&#39;h2&#39;).addClass(&#39;welcome&#39;);

$.html();
//=&gt; &lt;h2 class=&quot;title welcome&quot;&gt;Hello there!&lt;/h2&gt;</code></pre>
<h2 id="screencast-introduction">Screencast Introduction</h2>
<iframe src="//player.vimeo.com/video/31950192" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

<p>Are you using jQuery on the server side?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-27-cheerio</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-27-cheerio            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 27 Dec 2013 17:19:30 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[dat]]></title>
            <description><![CDATA[<p><a href="https://github.com/maxogden/dat">dat</a> is a project that seeks providing better tools for data collaboration.</p>
<pre><code>npm install dat</code></pre>
<h2 id="what-is-dat-">What is dat?</h2>
<p><img class="hide-on-mobile" src="/images/posts/dat.png" style="float: right" /></p>
<p>I like the name, makes for clever titles like this :) Anyways, dat:</p>
<ul>
<li>make data syncable. automatic sync and updates of entire data sets (or subsets)</li>
<li>data sets can be very large (billions of items) or updated frequently (real time data)</li>
<li>sync and transformation plugin API to connect dat to any existing database/format/language</li>
<li>built with automated + decentralized workflows in mind</li>
</ul>
<p>To illustrate the goals of <code>dat</code> consider the GitHub project, which is a great model of this idea working in a different space. GitHub is built on top of an open source tool called <code>git</code> and provides a user-friendly web application that lets software developers find code written by others, use it in their own programs and improve upon it. In a similar fashion <code>dat</code> will be developed as a set of tools to store, synchronize, manipulate and collaborate in a decentralized fashion on sets of data, hopefully enabling platforms analogous to GitHub to be built on top of it.</p>
<p>The concept sounds pretty amazing to me. Currently <code>dat</code> is in pre-alpha stage but with full time support from <a href="http://maxogden.com/gut-hosted-open-data-filets.html">Max Ogden</a> it will evolve very quickly.</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/FX7qSwz3SCk" frameborder="0" allowfullscreen></iframe>

<p>Aside from a truly epic beard, Max also has a <a href="http://www.youtube.com/watch?v=FX7qSwz3SCk">cool talk</a> on YouTube introducing <code>dat</code>. Have you gotten any ideas on how this could be used yet?</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-12-19-dat</link>
            <guid isPermaLink="true">
                http://npmawesome.com/posts/2013-12-19-dat            </guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 19 Dec 2013 18:08:03 GMT</pubDate>
        </item>
    </channel>
</rss>