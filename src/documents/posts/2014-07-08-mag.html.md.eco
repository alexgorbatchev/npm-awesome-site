---
date: 2014-07-08T10:02:58-0700
author: evlasenko
layout: post
tags: npm, logging

npm:
  repo: &repo mahnunchik/mag
  name: &name mag
  license: MIT

  author:
    name: Eugeny Vlasenko
    github: mahnunchik

slug: *name
title: *name
description: Mag is the streaming logger for Node.js
---
<img src="https://avatars0.githubusercontent.com/u/780935?s=400" width="100" align="right"/>
My name is <%- @author() %> and I want to introduce my logging module called <%- @reference() %>. There are lots of full-featured logging frameworks such as [Bunyan](http://browsenpm.org/package/bunyan) [GitHub: [trentm/node-bunyan](https://github.com/trentm/node-bunyan), License: MIT) [Winston](http://browsenpm.org/package/node-bunyan) (GitHub: [flatiron/winston](https://github.com/flatiron/winston), License: MIT) or [log4js](http://browsenpm.org/package/log4js) (GitHub: [nomiddlename/log4js-node](https://github.com/nomiddlename/log4js-node, License: MIT). Why write another one? Personally, I subscribe to the [twelve-factor app methodology](http://12factor.net) and more specifically [the part about logs](http://12factor.net/logs). Another cool thing about `mag` is that it’s fully built on [Streams3](https://www.npmjs.org/package/readable-stream).

<%- @readMore() %>

## Installation

    <%- @install() %>

## Twelve-factor app logging

* Logs are the stream of time-ordered events.
* App never concerns itself with routing or storage of its output stream.
* App should not attempt to write to or manage logfiles.
* App should write its event stream, unbuffered, to stdout.

## Here’s how to use Mag

### Step 1

When you start developing an application you do not want to spend time configuring the logger, you just want be building features. You can just require `mag` (one line more than console usage =) and use it:

    var logger = require('mag')();
    logger.info('my great application is running!');

    // 01:27:36.427 <INFORMATIONAL> my great application is running!

You get a well formatted message with a timestamp. Done!

### Step 2

When your application begins to grow and you want to visually separate messages from different parts of application, you can start using the namespaces feature of `mag`.

    var mag = require('mag');

    var logger = mag('my-app');
    var libLogger = mag('my-lib');

    logger.info('my great application is running');
    libLogger.debug('my library is running too');

    // 22:36:24.245 [my-app] <INFORMATIONAL> my great application is running
    // 22:36:24.246 [my-lib] <DEBUG> my library is running too

### Step 3

When your application is finally ready for production, it is time to think about the logging format. Should it be text line by line? Maybe JSON?. Should entire error stack be printed or only a few lines? At this time you can require `mag-hub` module and configure the message format once in your application:

    var hub = require('mag-hub');

    // Formatters
    var info = require('mag-process-info');
    var format = require('mag-format-message');
    var colored = require('mag-colored-output');

    var myCustomFormatter = require('./my-custom-formatter.js');

    hub.pipe(info())
      .pipe(format())
      .pipe(myCustomFormatter())
      .pipe(colored())
      .pipe(process.stdout);

## How it works

1. `mag` requires `mag-stream` module as a output for its log objects
1. `mag-stream` tries to require top level `mag-hub` module
1. if it fails then `mag-stream` requires `mag-fallback`
1. `mag-fallback` is the fallback formatter which is essentially the same as using a `console` with a timestamp.

Mag does not come bundled with any transports, even formatters are in separate modules. You could potentially make log management based on mag, but I recommend sticking with the [twelve-factor app](http://12factor.net/logs) methodology again and keep it simple. Use a log collector from Splunk or Loggly to drain the syslog instead.

## Related Modules

* [mag-logger-facade](http://browsenpm.org/package/mag-logger-facade) (GitHub: [mahnunchik/mag-logger-facade](https://github.com/manhunchik/mag-logger-facade), License: MIT)
* [mag-stream](http://browsenpm.org/package/mag-stream) (GitHub: [mahnunchik/mag-stream](https://github.com/manhunchik/mag-stream), License: MIT)
* [mag-hub](http://browsenpm.org/package/mag-hub) (GitHub: [mahnunchik/mag-hub](https://github.com/manhunchik/mag-hub), License: MIT)
* [mag-fallback](http://browsenpm.org/package/mag-fallback) (GitHub: [mahnunchik/mag-fallback](https://github.com/manhunchik/mag-fallback), License: MIT)
