---
layout: post
date: 2014-02-25T09:07:16-0800
tags: npm, webdriver, selenium, testing

npm:
  repo: &repo camme/webdriverjs
  name: &name webdriverjs
  install: webdriverjs
  displayName: webdriver.js
  license: MIT

  author:
    name: Camilo Tapia
    github: camme

slug: *name
title: *name
description: webdriver.js is a webdriver module for node.js that makes it possible to write super easy selenium tests in your favorite BDD or TDD test framework.
---
<img class="hide-on-mobile" src="https://2.gravatar.com/avatar/2c405e9d55507036d6cc2aff250c3146" style="float: right; margin-left: 1em"/>
<%- @reference() %> is a module by <%- @author() %> that makes it possible to write super easy selenium tests in your favorite BDD or TDD test framework. <%- @browsenpm() %> is not the "official webdriverjs driver" says [Christian Bromann](https://github.com/christian-bromann) in [this thread](https://github.com/camme/webdriverjs/issues/138#issuecomment-32051980):

> We're trying to provide a selenium runner which is easy to use, highly extendable and compatible with all common JavaScript test frameworks. It uses an own chain API to execute all async commands in right order. The specialty of this library is that we wrap all JSONWire protocol commands in useful actions commands. So you don't have to care about to get an element first and then call the click command; you just execute the click with a selector as parameter.

<%- @readMore() %>

    <%- @install() %>

## Usage

    var webdriverjs = require('webdriverjs');

    var options = {
      desiredCapabilities: {
        browserName: 'chrome'
      }
    };

    webdriverjs
      .remote(options)
      .init()
      .url('http://www.google.com')
      .title(function(err, res) {
        console.log('Title was: ' + res.value);
      })
      .end();

## Selector API

The `JsonWireProtocol` provides several strategies to query an element. <%- @browsenpm() %> simplifies these to make it more familiar with the common existing selector libraries like Sizzle. The following selector types are supported:

* CSS query selector
* link text
* partial link text
* tag name
* name attribute
* xPath

## More

Here is a simplified example of differences between the drivers:

[selenium-webdriverjs]:

    driver.get('http://www.google.com');
    driver.findElement(webdriver.By.id('q')).sendKeys('webdriver');
    driver.findElement(webdriver.By.id('btnG')).click();

[WD.js]:

    browser
      .get("http://www.google.com")
      .elementById('q')
      .sendKeys('webdriver')
      .elementById('btnG')
      .click()

<%- @browsenpm() %>:

    client
        .url('http://google.com')
        .setValue('#q','webdriver')
        .click('#btnG')

<%- @browsenpm() %> has also almost all protocol commands implemented, so you can do the same with the standard JSONWire protocol commands.

    client
        .url('http://google.com')
        .element('#q', function(err,res) {
            client.elementIdValue(res.value.ELEMENT, 'webdriver');
        })
        .element('#btnG', function(err,res) {
            client.elementIdClick(res.value.ELEMENT);
        });

[selenium-webdriverjs]: https://code.google.com/p/selenium/wiki/WebDriverJs
[WD.js]: https://github.com/admc/wd