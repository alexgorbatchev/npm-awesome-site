---
layout: post
date: 2014-01-14T16:33:38-0800
tags: npm, random, javascript
npm:
  repo: &repo dylang/shortid
  name: &name shortId
  license: MIT
slug: *name
title: *name
description: ShortId creates amazingly short non-sequential url-friendly unique ids.
---
<%- @reference() %> creates amazingly short non-sequential url-friendly unique IDs. Perfect for url shorteners, MongoDB and Redis as well as any other ID users might see.

    npm install <%= @document.npm.name %>

## Features

* By default 7-12 url-friendly characters: `A-Z`, `a-z`, `0-9`, `_-`
* Non-sequential so they are not predictable
* Supports cluster (automatically), custom seeds, custom alphabet

## Example

    var shortId = require('shortid');

    console.log(shortId.generate());
    // PPBqWA9

## More

What really caught my eye was the [custom implementation](https://github.com/dylang/shortid/blob/master/lib/random.js) of `random`.

    var seed = 1;

    function random() {
      seed = (seed * 9301 + 49297) % 233280;
      return seed/(233280.0);
    };

Here's a JSFiddle to play around with it. It works...

<iframe width="100%" height="300" src="http://jsfiddle.net/alexgorbatchev/8yxC2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

It got me very curious as to what it actually does as it's not obvious to me at first glance. I found a [decent article](http://indiegamr.com/generate-repeatable-random-numbers-in-js/) talking about this function. Turns out this function is meant to generate predictable "random" numbers based on the seed.

Digging a little bit further, I found [this post](https://gist.github.com/alexgorbatchev/8428967) from the past days:

> ... horrible random (sic) number generators are used by people who don't know better, while very good ones take less than 20 lines of Pascal! Amoung the horrid generators are some that come with certain systems or are presented in textbooks!
>
> ...
>
> Simple (bad) Psuedo Random Number Generator (Sic)
> The low bit typically just toggles between calls.
>
>     random() {
>        seed = ( seed * mulitiplier + increment ) % modulus;
>        return seed;
>     }

and then later

>     /*
>     ** Dr. Park's algorithm published in the Oct. '88 ACM
>     ** "Random Number Generators: Good Ones Are Hard To Find"
>     ** His version available at ftp://cs.wm.edu/pub/rngs.tar
>     ** This is called a   Lehmer Generator
>     */
>
>     static long Seed = 1;       /* This is required to be 32 bits long */
>
>     long random()
>     /*
>     **    Random number between  0  and  2147483647 (2**31 - 1)  inclusive
>     **/
>     {
>       a = 48271
>       m = 2147483647
>       r = 3399    /* r = m mod a */
>       q = 44488   /* q = m div a */
>       if ((Seed = Seed % q * a - Seed / q * r) < 0)
>         Seed += m;
>       return Seed - 1;
>     }

Here's a JavaScript implementation:

<iframe width="100%" height="300" src="http://jsfiddle.net/alexgorbatchev/g6aRe/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Should the function in <%- @browsenpm() %> be patched? Thoughts?