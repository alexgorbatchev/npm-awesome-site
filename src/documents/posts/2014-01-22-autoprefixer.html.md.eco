---
layout: post
date: 2014-01-22T09:35:00-0800
tags: npm, css, build
npm:
  repo: &repo ai/autoprefixer
  name: &name autoprefixer
  license: MIT
slug: *name
title: *name
description: Autoprefixer parses CSS and adds vendor prefixes to rules using `Can I Use`.
---
<%- @reference() %> parses CSS and adds vendor prefixes to rules based on information from the glorious [Can I Use](http://caniuse.com).

    npm install <%= @document.npm.name %>

<img class="hide-on-mobile" src="<%- @image '/autoprefixer.svg' %>" style="width: 200px; float: right" />

The best tool is a tool you can't see and one that does the work for you. This is the main idea behind <%- @browsenpm() %>. The interface is simple: just forget about vendor prefixes and write normal CSS according to latest W3C specs. You donâ€™t need a special language (like Sass) or special mixins. Of course, you can still use something like [SASS](http://sass-lang.com/), [Stylus](http://learnboost.github.io/stylus/) or [LESS](http://www.lesscss.org/) because <%- @browsenpm() %> is a postprocessor for CSS.

## Features

* Because <%- @browsenpm() %> uses actual data from [Can I Use](http://caniuse.com), it can also clean up your CSS and remove prefixes that are no longer needed.
* Flexbox or gradients have different syntaxes in different browsers (sometimes you need to recalculate angles, sometimes you need 2 old properties instead of new one), but <%- @browsenpm() %> hides this from you. Just code by latest W3C specs and Autoprefixer will produce the code for old browsers.
* You can specify the browsers you want to target
* Source map support

## Usage

There's an incredible amount of ways you can use <%- @browsenpm() %>:

* as a grunt task using <%- @reference({ name: 'grunt-autoprefixer', repo: 'nDmitry/grunt-autoprefixer', license: 'MIT' }) %>
* with Compass
* with Stylus
* with Rails
* with Mincer
* with Middleman
* with Node
* with PHP

There are plenty of examples and information on <%- @github() %>. Check it out!

I'm completely in love with CSS preprocessors, they make life so much easier. I still go between [LESS](http://www.lesscss.org/) and [Stylus](http://learnboost.github.io/stylus/), but more often lean towards LESS because it makes using [Bootstrap](http://getbootstrap.com/) framework so much easier and so much more modular.

Do you use a CSS preprocessor? Which one?