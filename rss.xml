<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[npm awesome]]></title>
        <description><![CDATA[Daily dose of awesome NPM modules for Node.js, old and new!]]></description>
        <link>http://npmawesome.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 08 Apr 2014 00:20:37 GMT</lastBuildDate>
        <atom:link href="http://npmawesome.com/rss.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Alex Gorbatchev]]></author>
        <pubDate>Tue, 08 Apr 2014 00:19:58 GMT</pubDate>
        <item>
            <title><![CDATA[No title]]></title>
            <description><![CDATA[<article><header><h2><a href="/posts/2014-04-07-links">Links for Apr 7, 2014</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on April 7th 2014</span><a href="http://npmawesome.com/posts/2014-04-07-links#disqus_thread" class="comments"></a></div></header><div class="content"><h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><p><a href="http://bjk5.com/post/71887196490/email-transparency-at-khan-academy">Email transparency at Khan Academy</a></p>
<blockquote>
<p>Whenever we mention that almost all Khan Academy email is visible to everybody on the team, people always wanna know more... Here’s the how and why of “radical email transparency” at Khan.</p>
</blockquote>
</li>
<li><p><a href="http://www.sfgate.com/bayarea/article/S-F-cracks-down-on-Airbnb-rentals-5381237.php">S.F. cracks down on Airbnb rentals</a></p>
<blockquote>
<p>As Katz discovered, San Francisco&#39;s ban on short-term rentals is turning out to have teeth. People who rent out space on Airbnb, VRBO and other markets for temporary housing are facing fines by the City Planning Department and eviction on the grounds of illegally operating hotels.</p>
</blockquote>
</li>
<li><p><a href="http://www.glintech.com/blog/link-tablet-your-meeting-room-calendar">Link a tablet to your meeting room calendar</a></p>
<blockquote>
<p>They reasoned that by linking our online calendars to a tablet mounted neatly next to the door, it’d be much easier to see, at a glance, whether the room was being used - without poking your head in and possibly interrupting someone.</p>
</blockquote>
</li>
<li><p><a href="http://behindthescenesrecruiter.com/post/82005145232/the-single-most-sure-fire-hiring-desion-you-will-ever">The Single Most Sure-Fire Hiring Decision You Will Ever Make</a></p>
<blockquote>
<p>“One good way to snag the great people who are never in the job market is to get them before they even realize there is a job market: when they’re in college.” All the way back in 2006, Joel Spolsky knew that a competitive and rewarding internship program was the best way to acquire top engineering talent. Yet even in 2014, in the midst of a talent crunch, surprisingly few technical companies have internship programs.</p>
</blockquote>
</li>
<li><p><a href="http://brianmcd.com/2014/03/27/a-tip-for-angular-unit-tests-with-promises.html">A Tip for Angular Unit Tests with Promises</a></p>
<blockquote>
<p>tl;dr: Don&#39;t put assertions inside promise callbacks.</p>
</blockquote>
</li>
</ul>
<h2 id="github">GitHub</h2>
<ul>
<li><a href="https://github.com/OpenRA/OpenRA">Open Red Alert</a> - I played this game to death when it came out originally. Crazy that somebody&#39;s rewriting it in C# (mono).</li>
<li><a href="https://github.com/ZoneMinder/ZoneMinder">ZoneMinder</a> is a free, open source Closed-circuit television software application developed for Linux which supports IP, USB and Analog cameras.</li>
<li><a href="https://github.com/GitbookIO/javascript">JavaScript GitBook</a> - teaching programming basics with JavaScript.</li>
<li><a href="http://gudh.github.io/ihover/dist/index.html">iHover</a> is an impressive hover effects collection, powered by pure CSS3, no dependency, work well with Bootstrap 3!</li>
</ul>
<h2 id="services">Services</h2>
<ul>
<li><a href="https://keybase.io">Keybase</a> will be a public directory of publicly auditable public keys. All paired, for convenience, with unique usernames.</li>
<li><a href="https://asciinema.org/">ASCIInema</a> - record and share your terminal sessions, the right way.</li>
</ul>
<h2 id="misc">Misc</h2>
<ul>
<li><a href="http://allrecipes.com/recipe/how-to-make-cronuts-part-i/">How to Make Cronuts</a> - I&#39;m kind of obsessed with these.</li>
<li><a href="http://www.raspberrypi.org/raspberry-pi-compute-module-new-product/">Raspberry Pi compute module: new product!</a></li>
<li><a href="http://www.instructables.com/id/Colorful-Countdown-Clock-for-tight-timeline-manage/">Colorful Countdown Clock for tight timeline management</a></li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p><a href="https://twitter.com/search?q=%23Trello&amp;src=hash">#Trello</a> is written in <a href="https://twitter.com/search?q=%23CoffeeScript&amp;src=hash">#CoffeeScript</a>!! Holy Fuck! That&#39;s amazing!!</p>&mdash; Juan Jose Ramirez U. (@whoisjuan) <a href="https://twitter.com/whoisjuan/statuses/453308127036047360">April 7, 2014</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>CoffeeScript has “unless”? SOLD</p>&mdash; David R. Poindexter (@mtheoryx) <a href="https://twitter.com/mtheoryx/statuses/453260810731548672">April 7, 2014</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></article><article><header><h2><a href="/posts/2014-04-04-links">Links for Apr 5, 2014</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on April 4th 2014</span><a href="http://npmawesome.com/posts/2014-04-04-links#disqus_thread" class="comments"></a></div></header><div class="content"><h2 id="apps">Apps</h2>
<ul>
<li><a href="https://ghost.org">Ghost</a> is an Open Source application which allows you to write and publish your own blog, giving you the tools to make it easy and even fun to do. It&#39;s simple, elegant, and designed so that you can spend less time making your blog work and more time blogging.</li>
</ul>
<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><a href="http://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/">Practical Examples of the New Node.js Streams API</a></li>
<li><a href="http://strongloop.com/strongblog/how-to-compose-node-js-promises-with-q/">How-to Compose Node.js Promises with Q</a></li>
</ul>
<h2 id="github">GitHub</h2>
<ul>
<li><a href="http://kdzwinel.github.io/JS-OCR-demo/">JavaScript OCR demo</a></li>
</ul>
<h2 id="startups">Startups</h2>
<ul>
<li><a href="http://www.shyp.com/">Shyp</a> is the easiest way to ship anything.</li>
<li><a href="https://www.spoonrocket.com/">Spoon Rocket</a> is the most convinient meal ever.</li>
</ul>
<h2 id="misc">Misc</h2>
<ul>
<li><a href="https://www.codeschool.com/courses#all">Code School Courses</a></li>
<li><a href="https://www.kickstarter.com/projects/guardyen/metawear-production-ready-wearables-in-30-minutes">MetaWear: Production Ready Wearables in 30 Minutes or Less!</a></li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>New <a href="https://twitter.com/search?q=%23npmawesome&amp;src=hash">#npmawesome</a> from <a href="https://twitter.com/alexgorbatchev">@alexgorbatchev</a>: &quot;Progress reporting in CLI applications&quot; || <a href="http://t.co/FymiGMBy3F">http://t.co/FymiGMBy3F</a></p>&mdash; Nodejitsu (@nodejitsu) <a href="https://twitter.com/nodejitsu/statuses/452163004638179328">April 4, 2014</a></blockquote>

<blockquote class="twitter-tweet" data-cards="hidden" data-partner="tweetdeck"><p>If you want a super pimped VM with linux kernel upgraded and easy <a href="https://twitter.com/search?q=%23docker&amp;src=hash">#docker</a> install, you are welcome:&#10;<a href="https://t.co/53GaGshUXs">https://t.co/53GaGshUXs</a></p>&mdash; Thorsten Lorenz (@thlorenz) <a href="https://twitter.com/thlorenz/statuses/452149651723264001">April 4, 2014</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Never thought I&#39;d say this, but CoffeeScript is quite nice</p>&mdash; David Tang (@skaterdav85) <a href="https://twitter.com/skaterdav85/statuses/452121943496347648">April 4, 2014</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></article><article><header><h2><a href="/posts/2014-04-04-progress">progress</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on April 4th 2014</span><a href="http://npmawesome.com/posts/2014-04-04-progress#disqus_thread" class="comments"></a><div data-github-repo="visionmedia/node-progress" class="github-stars"></div></div></header><div class="content"><div class="highlight nodejitsu"><img src="/images/posts/nodejitsu.png" style="height: 80px" class="hide-on-mobile"/><span>This post was written for <a href="http://nodejitsu.com">Nodejitsu</a> blog and is crossposted here.
<a href="http://nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a>
and is now supporting the project.</span></div><p>Lets talk about long running CLI (command line interface) applications. When you have a finite process that is expected to take some time, the best thing to do is to let your users know about it. A typical application that for example downloads a file might look like this</p>
<pre><code>var
  request = require(&#39;request&#39;),
  fs = require(&#39;fs&#39;)
  ;

process.stdout.write(&#39;Downloading... &#39;);

request(&#39;http://nodejs.org/dist/node-0.0.1.tar.gz&#39;)
  .pipe(fs.createWriteStream(__dirname + &#39;/node.tar.gz&#39;))
  .on(&#39;close&#39;, function (err) {
    process.stdout.write(&#39;done!\n&#39;);
  });
</code></pre><p>The user experience is hardly a great one. It&#39;s clear that something is happening, or at least expected to be happening.</p>
<div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="/images/posts/progress/progress01.gif"/></div>

<p>It&#39;s not really clear if it&#39;s still happening. Is it time for <code>ctrl+c</code> yet? How about an indicator that something is actually going on?</p>
<pre><code>process.stdout.write(&#39;Downloading...&#39;);
intervalId = setInterval(function() { process.stdout.write(&#39;.&#39;); }, 1000);

request(&#39;http://nodejs.org/dist/node-0.0.1.tar.gz&#39;)
  .pipe(fs.createWriteStream(__dirname + &#39;/node.tar.gz&#39;))
  .on(&#39;close&#39;, function (err) {
    process.stdout.write(&#39; done!\n&#39;);
    clearInterval(intervalId);
  });
</code></pre><div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="/images/posts/progress/progress02.gif"/></div>

<p><img class="hide-on-mobile" src="https://avatars2.githubusercontent.com/u/25254" style="float: right; margin-left: 1em; width: 100px"/>
A little better. But still, there&#39;s no way of telling how long the process will actually take. Lets just do a real progress bar, shall we? This is where <a href="https://github.com/visionmedia/node-progress">progress</a> module that was originally started by <a href="https://github.com/visionmedia">TJ Holowaychuk</a> comes into play! Due to the awesomeness of open source, <a href="https://github.com/visionmedia/node-progress">progress</a> is now pretty much a community effort.</p>
<pre><code>npm install progress
</code></pre><h2 id="features">Features</h2>
<p><a href="https://github.com/visionmedia/node-progress">progress</a> supports a wide range of options via the format string and options. In the end will get a good looking ASCII progress bar and that will let everyone know about the true progress in your CLI application.</p>
<p>These are the tokens you can use to format your progress bar:</p>
<ul>
<li><code>:bar</code> the progress bar itself</li>
<li><code>:current</code> current tick number</li>
<li><code>:total</code> total ticks</li>
<li><code>:elapsed</code> time elapsed in seconds</li>
<li><code>:percent</code> completion percentage</li>
<li><code>:eta</code> estimated completion time in seconds</li>
</ul>
<h2 id="usage">Usage</h2>
<p>Lets modify our original example and put <a href="https://github.com/visionmedia/node-progress">progress</a> to a good use:</p>
<pre><code>var
  request = require(&#39;request&#39;),
  ProgressBar = require(&#39;progress&#39;),
  fs = require(&#39;fs&#39;)
  ;

var
  req = request(&#39;http://nodejs.org/dist/node-0.0.1.tar.gz&#39;),
  bar
  ;

req
  .on(&#39;data&#39;, function (chunk) {
    bar = bar || new ProgressBar(&#39;Downloading... [:bar] :percent :etas&#39;, {
      complete: &#39;=&#39;,
      incomplete: &#39; &#39;,
      width: 25,
      total: parseInt(req.response.headers[&#39;content-length&#39;])
    });

    bar.tick(chunk.length);
  })
  .pipe(fs.createWriteStream(__dirname + &#39;/node.tar.gz&#39;))
  .on(&#39;close&#39;, function (err) {
    bar.tick(bar.total - bar.curr);
  })
  ;
</code></pre><div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="/images/posts/progress/progress03.gif"/></div>

<p>We even get ETA estimate for free. That&#39;s what I&#39;m talking about!</p>
<h2 id="other-modules-to-checkout">Other modules to checkout</h2>
<p>Here are a few other modules to check out:</p>
<ul>
<li><a href="https://github.com/jclulow/node-progbar">progbar</a> by <a href="https://github.com/jclulow">Joshua M. Clulow</a> is a straight up alternative.</li>
<li><a href="https://github.com/bevry/progressbar">progressbar</a> by <a href="https://github.com/balupton">Benjamin Arthur Lupton</a> extends <a href="https://github.com/visionmedia/node-progress">progress</a> with chaining, domains, and steps.</li>
<li><a href="https://github.com/Unitech/node-multimeter">pm2-multimeter</a> originally by <a href="https://github.com/substack">James Halliday</a> and now up kept by <a href="https://github.com/Unitech">Alexandre Strzelewicz</a> can display multiple progress bars at the same time.</li>
</ul>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>It&#39;s really cool to see a CLI application giving meaningful progress feedback. Please don&#39;t forget about user experience when building tools.</p>
</div></article><article><header><h2><a href="/posts/2014-04-04-slate-irc">slate-irc</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on April 4th 2014</span><a href="http://npmawesome.com/posts/2014-04-04-slate-irc#disqus_thread" class="comments"></a><div data-github-repo="slate/slate-irc" class="github-stars"></div></div></header><div class="content"><p><img class="hide-on-mobile" src="https://avatars2.githubusercontent.com/u/25254" style="float: right; margin-left: 1em; width: 100px"/>
<a href="https://github.com/slate/slate-irc">slate-irc</a> is a module by <a href="https://github.com/visionmedia">TJ Holowaychuk</a> that part of the recently released open source IRC client called <a href="https://github.com/slate/slate">Slate</a> and is a general purpose IRC client with simple plugin system.</p>
<pre><code>npm install slate-irc
</code></pre><h2 id="usage">Usage</h2>
<pre><code>var irc = require(&#39;slate-irc&#39;);
var net = require(&#39;net&#39;);

var stream = net.connect({
  port: 6667,
  host: &#39;irc.freenode.org&#39;
});

var client = irc(stream);

client.on(&#39;notice&#39;, function(notice) {
  console.log(notice.message);
});

client.nick(&#39;npmawesome-test&#39;);
client.user(&#39;npmawesome-test&#39;, &#39;Alex Gorbatchev&#39;);
client.join(&#39;#flood&#39;);

client.names(&#39;#flood&#39;, function(err, names) {
  if (err) throw err;

  names.sort();
  console.log(names.join(&#39;\n&#39;));

  client.quit();
});
</code></pre><h2 id="plugins">Plugins</h2>
<p>Plugins are simply functions that accept the IRC client as an argument. With this you can define methods, listen on events and interact with the client. For example here&#39;s a logger plugin that outputs to stdout:</p>
<pre><code>function logger() {
  return function(irc) {
    irc.stream.pipe(process.stdout);
  }
}

client.use(logger());
</code></pre><p>Here&#39;s a slightly more complex example of a PONG plugin responding to PING messages:</p>
<pre><code>function pong() {
  return function(irc) {
    irc.on(&#39;data&#39;, function(msg) {
      if (&#39;PING&#39; === msg.command)
        irc.write(&#39;PONG :&#39; + msg.trailing);
    });
  }
}
</code></pre><h2 id="closing-thoughts">Closing Thoughts</h2>
<p><a href="https://github.com/slate/slate-irc">slate-irc</a> can serve as a core of a regular IRC client or you can write an IRC bot for your team chat. Checkout the <a href="https://github.com/slate/slate-irc">github page</a> for full documentation.</p>
</div></article><article><header><h2><a href="/posts/2014-04-03-links">Links for Apr 4, 2014</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on April 3rd 2014</span><a href="http://npmawesome.com/posts/2014-04-03-links#disqus_thread" class="comments"></a></div></header><div class="content"><h2 id="npm-inc">NPM Inc</h2>
<ul>
<li><a href="http://blog.npmjs.org/post/80997676347/nebulous-profit-meditations">Nebulous Profit Meditations</a></li>
<li><a href="http://blog.modulus.io/isaac-interview">Meet the face behind NPM</a></li>
</ul>
<h2 id="apps">Apps</h2>
<ul>
<li><a href="http://koala-app.com/">Koala</a> is a GUI application for Less, Sass, Compass and CoffeeScript compilation, to help web developers to use them more efficiently. Koala can run in windows, linux and mac.</li>
<li><a href="http://zedapp.org/">Zed</a> is a fully offline-capable, open source, keyboard-focused, Chrome-based text and code editor you can use to edit local files as well as remote files on any server.</li>
</ul>
<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications">Top Overlooked Security Threats to Node.js Web Applications</a></li>
<li><a href="http://www.sitepoint.com/testing-across-node-js-versions-using-docker/">Testing Across Node.js Versions Using Docker</a></li>
<li><a href="https://www.codefellows.org/blogs/complete-list-of-javascript-tools">A List of Foundational JavaScript Tools</a></li>
</ul>
<h2 id="github">GitHub</h2>
<ul>
<li><a href="https://github.com/ShiftForward/mucuchies">mucuchies</a> - A neat looking pluggable client-side dashboard.</li>
<li><a href="https://github.com/wagerfield/parallax">parallax</a> - Parallax Engine that reacts to the orientation of a smart device.</li>
<li><a href="https://github.com/soygul/koan">KOAN</a> stack (Koa, Angular, Node, Mongo, WebSockets) for real-time full-stack JavaScript web development.</li>
</ul>
<h2 id="misc">Misc</h2>
<ul>
<li><a href="https://developer.forecast.io/docs/v2">forecast.io weather API</a> is open and has a pretty high free rate limit.</li>
<li><a href="https://www.crypto101.io/">Crypto 101</a> is an introductory course on cryptography, freely available for programmers of all ages and skill levels.</li>
<li><a href="http://www.gitbook.io/">GitBook</a> is a webapp to build beautiful programming books and exercises using GitHub/Git and Markdown.</li>
</ul>
</div></article><article><header><h2><a href="/posts/package.json"></a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on April 3rd 2014</span><a href="http://npmawesome.com/posts/package.json#disqus_thread" class="comments"></a></div></header><div class="content"></div></article><article><header><h2><a href="/posts/2014-03-28-cli-table">cli-table</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on March 28th 2014</span><a href="http://npmawesome.com/posts/2014-03-28-cli-table#disqus_thread" class="comments"></a><div data-github-repo="LearnBoost/cli-table" class="github-stars"></div></div></header><div class="content"><div class="highlight nodejitsu"><img src="/images/posts/nodejitsu.png" style="height: 80px" class="hide-on-mobile"/><span>This post was written for <a href="http://nodejitsu.com">Nodejitsu</a> blog and is crossposted here.
<a href="http://nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a>
and is now supporting the project.</span></div><p>In this post we continue the small mini-series of posts about modules for writing CLI (command line interface) tools in Node.js. In the <a href="/npmawesome-parsing-command-line-options-with-yargs/">first post</a> we talked about parsing arguments supplied via the command line.</p>
<p><img class="hide-on-mobile" src="https://avatars3.githubusercontent.com/u/13041" style="float: right; margin-left: 1em; width: 100px"/>
One of the more interesting subject when it comes to writing CLI tools is how do you present data back to your users. Assuming you need to spit out bunch of tabular data, the standard way of doing that would be in a CSV format (comma separated values). This generates output that other programs can easily parse, but most of the time it&#39;s pretty incomprehensible for humans. It&#39;s a good idea to be nice to your users and give them an option for a pretty format, eg with <code>--pretty</code> flag.</p>
<p>Getting pretty tabular data to STDOUT isn&#39;t a trivial matter if you want to tackle it all by yourself. After all, there isn&#39;t a <code>table</code> tag. Luckily there are modules in NPM to help you with that. One of those modules is <a href="https://github.com/LearnBoost/cli-table">cli-table</a> written by <a href="https://github.com/guille">Guillermo Rauch</a> of the <a href="https://github.com/LearnBoost">LearnBoost</a> fame.</p>
<pre><code>npm install cli-table
</code></pre><h2 id="features">Features</h2>
<p>The feature set of <a href="https://github.com/LearnBoost/cli-table">cli-table</a> is nearly comparable with HTML tables, which is pretty damn impressive:</p>
<ul>
<li>Customizable characters that constitute the table.</li>
<li>Color/background styling in the header through <a href="http://github.com/marak/colors.js">colors.js</a></li>
<li>Column width customization</li>
<li>Text truncation based on predefined widths</li>
<li>Text alignment (left, right, center)</li>
<li>Padding (left, right)</li>
<li>Easy-to-use API</li>
</ul>
<h2 id="usage">Usage</h2>
<p>Lets get us some CSV data and spit it out in a table:</p>
<pre><code>var
  csv = require(&#39;csv&#39;),
  Table = require(&#39;cli-table&#39;)
  ;

var data =
  &#39;Year,Make,Model,Description,Price\n&#39; +
  &#39;1997,Ford,E350,&quot;ac, abs, moon&quot;,3000.00\n&#39; +
  &#39;1999,Chevy,&quot;Venture &quot;&quot;Extended Edition&quot;&quot;&quot;,&quot;&quot;,4900.00\n&#39; +
  &#39;1999,Chevy,&quot;Venture &quot;&quot;Extended Edition, Very Large&quot;&quot;&quot;,,5000.00\n&#39; +
  &#39;1996,Jeep,Grand Cherokee,&quot;MUST SELL!\nair,moon roof,loaded&quot;,4799.00&#39;
  ;

csv().from.string(data).to.array(function(data) {
  var
    headers = data[0],
    values = data.slice(1),
    table = new Table({ head: headers })
    ;

  table.push.apply(table, values);
  console.log(table.toString());
});
</code></pre><div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="/images/posts/cli-tables/usage01.png"/></div>

<p>Pretty cool, right? We can get a little fancy with custom borders and alignments:</p>
<pre><code>var
  csv = require(&#39;csv&#39;),
  Table = require(&#39;cli-table&#39;)
  ;

var data =
  &#39;Year,Make,Model,Description,Price\n&#39; +
  &#39;1997,Ford,E350,&quot;ac, abs, moon&quot;,3000.00\n&#39; +
  &#39;1999,Chevy,&quot;Venture &quot;&quot;Extended Edition&quot;&quot;&quot;,&quot;&quot;,4900.00\n&#39; +
  &#39;1999,Chevy,&quot;Venture &quot;&quot;Extended Edition, Very Large&quot;&quot;&quot;,,5000.00\n&#39; +
  &#39;1996,Jeep,Grand Cherokee,&quot;MUST SELL!\nair,moon roof,loaded&quot;,4799.00\n&#39; +
  &#39;2014,Rolls-Royce,Phantom,&quot;Easy Sell&quot;,474990.00&#39;
  ;

var chars = {
  &#39;top&#39;: &#39;═&#39;, &#39;top-mid&#39;: &#39;╤&#39;, &#39;top-left&#39;: &#39;╔&#39;, &#39;top-right&#39;: &#39;╗&#39;,
  &#39;bottom&#39;: &#39;═&#39;, &#39;bottom-mid&#39;: &#39;╧&#39;, &#39;bottom-left&#39;: &#39;╚&#39;,
  &#39;bottom-right&#39;: &#39;╝&#39;, &#39;left&#39;: &#39;║&#39;, &#39;left-mid&#39;: &#39;╟&#39;, &#39;mid&#39;: &#39;─&#39;,
  &#39;mid-mid&#39;: &#39;┼&#39;, &#39;right&#39;: &#39;║&#39;, &#39;right-mid&#39;: &#39;╢&#39;, &#39;middle&#39;: &#39;│&#39;
  };

csv().from.string(data).to.array(function(data) {
  var
    headers = data[0],
    values = data.slice(1),
    aligns = [null, null, null, null, &#39;right&#39;],
    table = new Table({ head: headers, chars: chars, colAligns: aligns })
    ;

  table.push.apply(table, values);
  console.log(table.toString());
});
</code></pre><div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="/images/posts/cli-tables/usage02.png"/></div>

<h2 id="other-modules-to-checkout">Other modules to checkout</h2>
<p><a href="https://github.com/LearnBoost/cli-table">cli-table</a> of course isn&#39;t the only module that can print out pretty tables in the console. Here are a few alternatives:</p>
<ul>
<li><a href="https://github.com/flatiron/cliff">cliff</a>, Nodejitsu&#39;s own module does quite a bit more than just tabular data printing.</li>
<li><a href="https://github.com/substack/text-table">text-table</a> by James Halliday aka substack can pretty print tabular data with alignment.</li>
<li><a href="https://github.com/eldargab/easy-table">easy-table</a> by Eldar Gabdullin has some interesting formatting options and can print data with alignment.</li>
</ul>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>User experience doesn&#39;t have to suffer just because the target platform is STDOUT. Put a little bit more effort into it and your users will love you that much more. Checkout <a href="https://github.com/LearnBoost/cli-table">cli-table</a> github page for more examples and view the source for the full list of options.</p>
</div></article><article><header><h2><a href="/posts/2014-03-21-yargs">yargs</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on March 21st 2014</span><a href="http://npmawesome.com/posts/2014-03-21-yargs#disqus_thread" class="comments"></a><div data-github-repo="chevex/yargs" class="github-stars"></div></div></header><div class="content"><div class="highlight nodejitsu"><img src="/images/posts/nodejitsu.png" style="height: 80px" class="hide-on-mobile"/><span>This post was written for <a href="http://nodejitsu.com">Nodejitsu</a> blog and is crossposted here.
<a href="http://nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a>
and is now supporting the project.</span></div><p><img class="hide-on-mobile" src="https://avatars3.githubusercontent.com/u/874394" style="float: right; margin-left: 1em; width: 100px"/>
This post kicks off a small mini-series of posts about modules which making writing CLI (command line interface) tools in Node.js easier. Typically, when starting a new CLI tool, the first problem that you would encounter is how to read arguments that users pass via command line. Standard library gives us <code>process.argv</code> but if you want something a little bit more structured than an array, you have to look elsewhere.</p>
<p>This is where <a href="https://github.com/chevex/yargs">yargs</a> comes in handy. This module was originally written by <a href="https://github.com/substack">James Halliday</a> and called <a href="(https://github.com/substack/node-optimist)">optimist</a>. It is now called <a href="https://github.com/chevex/yargs">yargs</a> and the work is continued by <a href="https://github.com/chevex">Alex Ford</a>. Lets get it installed:</p>
<pre><code>npm install yargs
</code></pre><h2 id="features">Features</h2>
<p><a href="https://github.com/chevex/yargs">yargs</a> covers most of the features you would need to parse out options from command line.</p>
<ul>
<li>Named options: <code>--foo=1 --bar=2</code>, <code>--foo 1 --bar 2</code> or even <code>-foo 1 -bar 2</code></li>
<li>Groupped options tarball style: <code>-x</code>, <code>-xz</code>, <code>-xzvf</code></li>
<li>Count options: <code>-v</code>, <code>-vv</code>, <code>-vvv</code></li>
<li>Non-hyphenated options.</li>
<li>Usage / requirements.</li>
<li>Defaults.</li>
<li>Typing (boolean, string, etc).</li>
</ul>
<p>Lets look at each one:</p>
<h3 id="named-options">Named options</h3>
<p>named-options.js</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;).argv;

if (argv.a &gt; argv.b) {
  console.log(&#39;a seems bigger than b&#39;);
} else {
  console.log(&#39;a is not bigger than b&#39;);
}
</code></pre><hr>
<pre><code>$ ./named-options.js --a=55 --b=9.52
a seems bigger than b

$ ./named-options.js --a 1 --b 8.1
a is not bigger than b
</code></pre><h3 id="groupped-options-tarball-style">Groupped Options <code>tarball</code> Style</h3>
<p>tar.js</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;).argv;

if (argv.x) console.log(&#39;Will extract to disk from the archive&#39;);
if (argv.z) console.log(&#39;Will compress the resulting archive with gzip&#39;);
if (argv.f) console.log(&#39;Will read the archive from the archive file&#39;);
</code></pre><hr>
<pre><code>$ ./tar.js -z
Will compress the resulting archive with gzip

$ ./tar.js -zf
Will compress the resulting archive with gzip
Will read the archive from the archive file

$ ./tar.js -zfx
Will extract to disk from the archive
Will compress the resulting archive with gzip
Will read the archive from the archive file
</code></pre><h3 id="count-options">Count Options</h3>
<p>count.js</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;)
    .count(&#39;verbose&#39;)
    .alias(&#39;v&#39;, &#39;verbose&#39;)
    .argv;

VERBOSE_LEVEL = argv.verbose;

function WARN()  { VERBOSE_LEVEL &gt;= 0 &amp;&amp; console.log.apply(console, arguments); }
function INFO()  { VERBOSE_LEVEL &gt;= 1 &amp;&amp; console.log.apply(console, arguments); }
function DEBUG() { VERBOSE_LEVEL &gt;= 2 &amp;&amp; console.log.apply(console, arguments); }

WARN(&quot;Showing only important stuff&quot;);
INFO(&quot;Showing semi-mportant stuff too&quot;);
DEBUG(&quot;Extra chatty mode&quot;);
</code></pre><hr>
<pre><code>$ ./count.js
Showing only important stuff

$ ./count.js -v
Showing only important stuff
Showing semi-important stuff too

$ ./count.js -vv
Showing only important stuff
Showing semi-important stuff too
Extra chatty mode

$ ./count.js -v --verbose
Showing only important stuff
Showing semi-important stuff too
Extra chatty mode
</code></pre><h3 id="non-hyphenated-options">Non-hyphenated Options</h3>
<p>nonopt.js:</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;).argv;

console.log(&#39;(%d,%d)&#39;, argv.x, argv.y);
console.log(argv._);
</code></pre><hr>
<pre><code>$ ./nonopt.js -x 6.82 -y 3.35 rum
(6.82,3.35)
[ &#39;rum&#39; ]

$ ./nonopt.js &quot;me hearties&quot; -x 0.54 yo -y 1.12 ho
(0.54,1.12)
[ &#39;me hearties&#39;, &#39;yo&#39;, &#39;ho&#39; ]
</code></pre><h3 id="usage-requirements">Usage / Requirements</h3>
<p>divide.js:</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;)
  .usage(&#39;Usage: $0 -x [num] -y [num]&#39;)
  .demand([&#39;x&#39;,&#39;y&#39;])
  .argv;

console.log(argv.x / argv.y);
</code></pre><hr>
<pre><code>$ ./divide.js -x 55 -y 11
5

$ ./divide.js -x 4.91 -z 2.51
Usage: node ./divide.js -x [num] -y [num]

Options:
  -x  [required]
  -y  [required]

Missing required arguments: y
</code></pre><p>demand_count.js:</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;)
  .demand(2)
  .argv;

console.dir(argv)
</code></pre><hr>
<pre><code>$ ./demand_count.js a
Not enough arguments, expected 2, but only found 1

$ ./demand_count.js a b
{ _: [ &#39;a&#39;, &#39;b&#39; ], &#39;$0&#39;: &#39;./demand_count.js&#39; }

$ ./demand_count.js a b c
{ _: [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ], &#39;$0&#39;: &#39;./demand_count.js&#39; }
</code></pre><h3 id="defaults">Defaults</h3>
<p>default_singles.js:</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;)
  .default(&#39;x&#39;, 10)
  .default(&#39;y&#39;, 10)
  .argv;

console.log(argv.x + argv.y);
</code></pre><hr>
<pre><code>$ ./default_singles.js -x 5
15
</code></pre><p>default_hash.js:</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;)
  .default({ x : 10, y : 10 })
  .argv;

console.log(argv.x + argv.y);
</code></pre><hr>
<pre><code>$ ./default_hash.js -y 7
17
</code></pre><h3 id="typing-boolean-string-etc-">Typing (boolean, string, etc)</h3>
<p>boolean_single.js</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;)
  .boolean(&#39;v&#39;)
  .argv;

console.dir(argv.v);
console.dir(argv._);
</code></pre><hr>
<pre><code>$ ./boolean_single.js -v &quot;me hearties&quot; yo ho
true
[ &#39;me hearties&#39;, &#39;yo&#39;, &#39;ho&#39; ]
</code></pre><p>boolean_double.js</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;)
  .boolean([&#39;x&#39;,&#39;y&#39;,&#39;z&#39;])
  .argv;

console.dir([ argv.x, argv.y, argv.z ]);
console.dir(argv._);
</code></pre><hr>
<pre><code>$ ./boolean_double.js -x -z one two three
[ true, false, true ]
[ &#39;one&#39;, &#39;two&#39;, &#39;three&#39; ]
</code></pre><h2 id="putting-it-all-together">Putting it all together</h2>
<p>Finally, all together this makes a fully functional options parser.</p>
<pre><code>#!/usr/bin/env node
var argv = require(&#39;yargs&#39;)
  .usage(&#39;Count the lines in a file.\nUsage: $0&#39;)
  .example(&#39;$0 -f&#39;, &#39;count the lines in the given file&#39;)
  .demand(&#39;f&#39;)
  .alias(&#39;f&#39;, &#39;file&#39;)
  .describe(&#39;f&#39;, &#39;Load a file&#39;)
  .argv;
</code></pre><h2 id="other-modules-to-checkout">Other modules to checkout</h2>
<p>There are many other modules that can help you figure out CLI arguments, some do more, others do less.</p>
<ul>
<li><a href="https://github.com/substack/minimist">minimist</a> by James Halliday aka substack is a light weight module without or usage functionality. James has moved on from <a href="(https://github.com/substack/node-optimist)">optimist</a> to <a href="https://github.com/substack/minimist">minimist</a> probably around the time when community started adopting mantra of smaller modules that do one thing well. It&#39;s a personal preference and I&#39;m glad there are options.</li>
<li><a href="https://github.com/chriso/cli">cli</a> by Chris O&#39;Hara is a swiss army knife module for writing CLI applications.</li>
</ul>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>I&#39;ve been using <a href="(https://github.com/substack/node-optimist)">optimist</a> for over a year now and is saddened to see James giving it up, but at the same time it&#39;s exciting that the idea and implementation lives on in <a href="https://github.com/chevex/yargs">yargs</a>. A problem that seems so simple on the surface, such as collecting arguments, can turn out to be a major headache without proper tools. I&#39;m very glad <a href="https://github.com/chevex/yargs">yargs</a> is here to help us deal with it.</p>
</div></article><article><header><h2><a href="/posts/2014-03-12-convict">convict</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on March 12th 2014</span><a href="http://npmawesome.com/posts/2014-03-12-convict#disqus_thread" class="comments"></a><div data-github-repo="mozilla/node-convict" class="github-stars"></div></div></header><div class="content"><div class="highlight nodejitsu"><img src="/images/posts/nodejitsu.png" style="height: 80px" class="hide-on-mobile"/><span>This post was written for <a href="http://nodejitsu.com">Nodejitsu</a> blog and is crossposted here.
<a href="http://nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a>
and is now supporting the project.</span></div><p>Managing application configuration is one of the cornerstones to a reducing stress that comes from deploying Node.js applications to production environment. It&#39;s pretty easy if all you have to worry about is the port that your web server is listening on and database connection. But what do you do when you have a dozen or so external services, local folders, multiple connections and so on to have to keep track? And to top it off, all of this varies across development workstations, staging and production.</p>
<p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/93621c22c5e09b5f980c39e8eedbf68c" style="float: right; margin-left: 1em"/>
To accomplish this for the last couple of years I&#39;ve been using <a href="https://github.com/mozilla/node-convict">convict</a>, written by <a href="https://github.com/lloyd">Lloyd Hilaiel</a> at Mozilla, with great success. Before diving into <a href="https://github.com/mozilla/node-convict">convict</a> lets first take a moment to review a typical setup for configuring Node.js applications:</p>
<ol>
<li>in your application you <code>require</code> some settings file</li>
<li>the settings need to vary based on running environment (eg development, staging, production, etc)</li>
<li>you don&#39;t want to commit your production credentials into git</li>
<li>make use of environment variables to configure environments</li>
</ol>
<p>This is the base line, but there are a few things that make our lives easier, such as:</p>
<ol>
<li>configuration validation prevents app execution if invalid parameters are set or missing all together</li>
<li>exceptions are thrown if trying to read non existing configuration variables (to help combat typos)</li>
</ol>
<p>Lets get started:</p>
<pre><code>npm install convict
</code></pre><h2 id="features">Features</h2>
<ul>
<li><strong>Loading and merging</strong>: configurations are loaded from disk or inline and merged. JSON files are loaded with <code>cjson</code> so comments are welcome.</li>
<li><strong>Environmental variables</strong>: values can be derived from environmental variables</li>
<li><strong>Command-line arguments</strong>: values can also be derived from command-line arguments</li>
<li><strong>Validation</strong>: configurations are validated against your schema, generating an error report with all errors that are found</li>
</ul>
<h2 id="usage">Usage</h2>
<p>First thing we need to do is define our configuration schema. I&#39;m going to provide a bit of an extensive configuration to give you a more realistic example.</p>
<pre><code>var convict = require(&#39;convict&#39;);

var config = convict({
  env: {
    doc: &#39;The applicaton environment.&#39;,
    format: [&#39;production&#39;, &#39;development&#39;, &#39;test&#39;],
    default: &#39;development&#39;,
    env: &#39;NODE_ENV&#39;,
    arg: &#39;env&#39;
  },
  mongo: {
    main: {
      doc: &#39;Main database&#39;,
      format: &#39;url&#39;,
      default: &#39;mongodb://...&#39;,
      env: &#39;MONGO_MAIN&#39;
    },
    sessions: {
      doc: &#39;Sessions database&#39;,
      format: &#39;url&#39;,
      default: &#39;mongodb://...&#39;,
      env: &#39;MONGO_SESSIONS&#39;
    }
  },
  express: {
    ip: {
      doc: &#39;The IP address to bind.&#39;,
      format: &#39;ipaddress&#39;,
      default: &#39;127.0.0.1&#39;,
      env: &#39;IP_ADDRESS&#39;,
    },
    http: {
      port: {
        doc: &#39;HTTP port to bind.&#39;,
        format: &#39;port&#39;,
        default: 3080,
        env: &#39;HTTP_PORT&#39;
      }
    },
    https: {
      port: {
        doc: &#39;HTTPs port to bind.&#39;,
        format: &#39;port&#39;,
        default: 3443,
        env: &#39;HTTPS_PORT&#39;
      }
    }
  }
});

// load environment dependent configuration
config.loadFile(&#39;./config/&#39; + config.get(&#39;env&#39;) + &#39;.json&#39;);

// validate
config.validate();

module.exports = config;
</code></pre><p>Then in your application:</p>
<pre><code>var express = require(&#39;express&#39;);
var config = require(&#39;./config.js&#39;);
var app = express();

if(config.get(&#39;env&#39;) === &#39;production&#39;) {
  app.use(express.logger());
}

app.listen(
  config.get(&#39;express.http.port&#39;),
  config.get(&#39;express.http.ip&#39;)
);
</code></pre><p>With these two files your can start developing. When it comes time to deploying to production, on your server you can set appropriate environment variables like  <code>NODE_ENV</code>, <code>HTTP_PORT</code> and so on.</p>
<pre><code>NODE_ENV=production HTTP_PORT=80 node ./server.js
</code></pre><p>Also, as per our configuration, you can pass <code>--env=production</code> when starting the server.</p>
<pre><code>HTTP_PORT=80 node ./server.js --env=production
</code></pre><h2 id="alternatives">Alternatives</h2>
<p>In the great world of NPM there isn&#39;t one package to rule them all and there are various ways of accomplishing what you need. Here are a few alternatives you might want to checkout:</p>
<ul>
<li><p><a href="https://github.com/flatiron/nconf">nconf</a> - written and maintained by <a href="http://nodejitsu.com">Nodejitsu</a> own <a href="https://github.com/indexzero">Charlie Robbins</a>. Very similiar to [convict], but doesn&#39;t have the validation feature (if that&#39;s important to you) but has better support for overriding and managing order in which settings are pulled in.</p>
</li>
<li><p><a href="https://github.com/dominictarr/rc">rc</a> - written and maintained by <a href="https://github.com/dominictarr">Dominic Tarr</a>. Has support for INI file types and .rc files.</p>
</li>
<li><p><a href="https://github.com/substack/node-figc">figc</a> - written and maintained by <a href="https://github.com/substack">James Halliday</a>. The most minimalist module in the list supports JSON files and argv overrides.</p>
</li>
</ul>
<h2 id="closing-thoughts">Closing Thoughts</h2>
<p>I found this to be the least frictionless way to manage configuration in Node.js to date. Check out <a href="https://github.com/mozilla/node-convict">convict</a> github page for detailed API method description.</p>
<p>What are you using to manage your application settings?</p>
</div></article><article><header><h2><a href="/posts/2014-03-06-lockit">lockit</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on March 6th 2014</span><a href="http://npmawesome.com/posts/2014-03-06-lockit#disqus_thread" class="comments"></a><div data-github-repo="zeMirco/lockit" class="github-stars"></div></div></header><div class="content"><div class="highlight nodejitsu"><img src="/images/posts/nodejitsu.png" style="height: 80px" class="hide-on-mobile"/><span>This post was written for <a href="http://nodejitsu.com">Nodejitsu</a> blog and is crossposted here.
<a href="http://nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a>
and is now supporting the project.</span></div><p>So you got a really cool idea for an app or a service. You get all fired up, talk to your friends about, write down some bullet points and run that exciting <code>git init</code> command in an empty folder. One of the first things you are most likely to in the very near future is begin working on some kind of user login and registration process.</p>
<p><img class="hide-on-mobile" src="https://1.gravatar.com/avatar/5664d023c8ab7b6eb69a93990198432e" style="float: right; margin-left: 1em"/>
Of course, <a href="http://passportjs.org/">passport.js</a> is great when you can leverage external authentication, but otherwise you are stuck rolling your own system… After a while you find yourself doing it over and over again. How boring! Wouldn&#39;t it be nice if somebody finally just wrote a module that you could plugin into your express app that would take care of all this user registration stuff?</p>
<p>Well, look no further than <a href="https://github.com/zeMirco/lockit">lockit</a>, which is a collection of modules written by <a href="https://github.com/zeMirco">Mirco Zeiss</a> that helps you with initial user registraion and password management flow.</p>
<pre><code>npm install lockit
</code></pre><h2 id="features">Features</h2>
<ol>
<li>Supports multiple database adapters (MongoDB, CouchDB, SQL).</li>
<li>Sends confirmation emails.</li>
<li>Manages email address verification with verification link expiration.</li>
<li>Brings own Bootstrap based views which are easy to customize.</li>
<li>Account locking after too many failed login attempts.</li>
<li>Events for <code>login</code>, <code>logout</code>, <code>signup</code> and <code>delete</code>.</li>
<li>Implementation of <a href="https://www.owasp.org/index.php/Guide_to_Authentication">lots of</a> <a href="http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication">best</a> <a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet">pratices</a>.</li>
<li>REST API</li>
<li><a href="http://mircozeiss.com/lockit-050-auth-for-single-page-apps-and-csrf/">Authentication for SPAs and CSRF support</a>.</li>
</ol>
<h2 id="usage">Usage</h2>
<pre><code>var Lockit = require(&#39;lockit&#39;);
var app = express();

// express middleware
// ...
// sessions are required
app.use(express.cookieParser(&#39;your secret here&#39;));
app.use(express.cookieSession());

var config = {
  db: &#39;mongodb://127.0.0.1/test&#39;,
  dbCollection: &#39;users&#39;
};

// use middleware before router so your own routes have access to
// req.session.email and req.session.username
var lockit = new Lockit(app, config);

// you now have all the routes like /login, /signup, etc.
// and you can listen on events. For example &#39;signup&#39;
lockit.on(&#39;signup&#39;, function(user, res) {
  console.log(&#39;a new user signed up&#39;);

  // set signup.handleResponse to &#39;false&#39; for this to work
  res.send(&#39;Welcome!&#39;);
});

app.use(app.router);
// continue with express middleware
// ...
</code></pre><h2 id="emails">Emails</h2>
<p>By default of course emails aren&#39;t being sent. That means that you won&#39;t receive any signup and password reset tokens. To send emails you need an email server and you have pass the right settings:</p>
<p>With <a href="http://www.mailgun.com/pricing">mailgun</a> you can send up to 10,000 emails per month for free. <code>emailSettings</code> - see <a href="https://github.com/andris9/Nodemailer">nodemailer</a> for more information.</p>
<pre><code>config = {
  emailType: &#39;SMTP&#39;,
  emailSettings: {
    service: &#39;Mailgun&#39;,
    auth: {
      user: &#39;postmaster@username.mailgun.org&#39;,
      pass: &#39;secret-password&#39;
    }
  }
}
</code></pre><h2 id="custom-views">Custom views</h2>
<p>Lockit comes with built-in views which are based on Bootstrap. If you want to use your own custom views you can. It is dead simple. Put them into your <code>views</code> folder, for example <code>views/lockit/myLogin.jade</code>.</p>
<pre><code>config = {
  login: {
    route: &#39;/login&#39;,
    logoutRoute: &#39;/logout&#39;,
    views: {
      login: &#39;lockit/myLogin.jade&#39;,
      loggedOut: &#39;lockit/myLogoutSuccess.jade&#39;
    }
  }
}
</code></pre><h2 id="routes-included">Routes included</h2>
<p>From <a href="https://github.com/zeMirco/lockit-signup">lockit-signup</a></p>
<ul>
<li>GET /signup</li>
<li>POST /signup</li>
<li>GET /signup/:token</li>
<li>GET /signup/resend-verification</li>
<li>POST /signup/resend-verification</li>
</ul>
<p>From <a href="https://github.com/zeMirco/lockit-login">lockit-login</a></p>
<ul>
<li>GET /login</li>
<li>POST /login</li>
<li>GET /logout</li>
</ul>
<p>From <a href="https://github.com/zeMirco/lockit-forgot-password">lockit-forgot-password</a></p>
<ul>
<li>GET /forgot-password</li>
<li>POST /forgot-password</li>
<li>GET /forgot-password/:token</li>
<li>POST /forgot-password/:token</li>
</ul>
<p>From <a href="https://github.com/zeMirco/lockit-delete-account">lockit-delete-account</a></p>
<ul>
<li>GET /delete-account</li>
<li>POST /delete-account</li>
</ul>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>I love how customizable <a href="https://github.com/zeMirco/lockit">lockit</a> is and yet comes with very reasonable defaults. It&#39;s has pretty much everything you need to get started with basic user registration and password management flow. Checkout <a href="https://github.com/zeMirco/lockit">lockit</a> github page for full set of options as well as its associated modules.</p>
</div></article><article><header><h2><a href="/posts/2014-02-27-qr-image">qr-image</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 27th 2014</span><a href="http://npmawesome.com/posts/2014-02-27-qr-image#disqus_thread" class="comments"></a><div data-github-repo="alexeyten/qr-image" class="github-stars"></div></div></header><div class="content"><div class="highlight nodejitsu"><img src="/images/posts/nodejitsu.png" style="height: 80px" class="hide-on-mobile"/><span>This post was written for <a href="http://nodejitsu.com">Nodejitsu</a> blog and is crossposted here.
<a href="http://nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a>
and is now supporting the project.</span></div><svg width="150" height="150" viewBox="0 0 27 27" style="float: right; margin-left: 1em;"><path d="M1 1h7v7h-7zM10 1h2v1h-1v1h-1zM13 1h4v1h1v2h-2v1h-1v-2h1v-1h-2v1h-1zM19 1h7v7h-7zM2 2v5h5v-5zM20 2v5h5v-5zM3 3h3v3h-3zM11 3h1v1h-1zM21 3h3v3h-3zM10 4h1v2h-1zM13 4h1v1h1v2h-1v-1h-1v1h-1v-2h1zM16 5h2v3h-1v-1h-1zM9 6h1v2h-1zM11 7h1v1h-1zM13 7h1v1h-1zM15 7h1v1h-1zM12 8h1v2h-1v1h-2v-1h-1v-1h3zM16 8h1v1h-1zM1 9h1v1h-1zM4 9h1v1h-1zM6 9h2v1h-1v1h-2v-1h1zM14 9h2v3h-1v-1h-2v-1h1zM17 9h2v1h1v1h-1v1h1v2h1v1h-1v1h1v1h1v-1h1v1h1v2h-2v1h2v1h-2v2h1v-1h1v2h-1v1h-1v-1h-1v-1h-1v-1h-1v1h-1v1h2v1h-2v1h-2v-2h-1v-1h1v-1h1v-2h-1v-1h-1v-2h-1v1h-2v-1h1v-2h-1v-2h2v-1h1v2h-1v2h1v-2h1v3h1v-1h1v1h1v-2h-1v-1h-1v-1h-1v-1h2v-1h-1zM20 9h1v1h-1zM2 10h2v1h-2zM25 10h1v2h-2v-1h1zM4 11h1v1h1v1h-1v1h1v1h3v1h2v-1h1v2h-1v3h-1v-1h-1v-1h1v-1h-1v1h-8v-1h1v-1h2v1h1v-1h-1v-1h-1v-1h1zM7 11h1v1h-1zM20 11h2v1h-2zM1 12h1v1h1v1h-2zM8 12h1v1h-1zM11 12h1v1h-1zM7 13h1v1h-1zM9 13h1v1h1v1h-2zM22 13h1v1h1v2h-1v-1h-1zM24 13h2v3h-1v-2h-1zM1 15h1v1h-1zM21 15h1v1h-1zM6 16v1h2v-1zM24 16h1v1h-1zM18 18v3h3v-3zM25 18h1v2h-2v-1h1zM1 19h7v7h-7zM14 19h1v1h-1zM19 19h1v1h-1zM2 20v5h5v-5zM9 20h1v1h-1zM12 20h2v1h2v1h-1v1h-2v-2h-1zM3 21h3v3h-3zM10 21h2v1h-1v4h-2v-1h1v-2h-1v-1h1zM24 21h1v1h-1zM25 23h1v1h-1zM12 24h3v2h-3zM20 25h1v1h-1zM24 25h2v1h-2z"/></svg>

<p><a href="http://en.wikipedia.org/wiki/QR_code">QR code</a> is this super cool thing you probably have been seeing all over the place lately. It started appearing in North America a few years ago but the actual standard is close to two decades old. It allows you to embed any small amount of data that could be decoded with a basic camera equipped phone. Most common use case here is embedding URLs in printed adverising so that those who are interested could simply point their phone at the add and go to the site instead of having to type in URLs.</p>
<p><a href="https://github.com/alexeyten/qr-image">qr-image</a> is a module by <a href="https://github.com/alexeyten">Alexey Ten</a> to render <a href="http://en.wikipedia.org/wiki/QR_code">QR code</a> with node.js and no external dependencies.</p>
<pre><code>npm install qr-image
</code></pre><h2 id="overview">Overview</h2>
<ul>
<li>No dependecies. This is a really cool bit, if you look at <a href="https://github.com/alexeyten/qr-image/blob/master/package.json"><code>package.json</code></a> there are literally no dependencies there.</li>
<li>Generate image in <code>png</code>, <code>svg</code>, <code>eps</code> and <code>pdf</code> formats.</li>
<li>Support UTF-8.</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>var qr = require(&#39;qr-image&#39;);
var fs = require(&#39;fs&#39;);

var code = qr.image(&#39;http://blog.nodejitsu.com&#39;, { type: &#39;svg&#39; });
var output = fs.createWriteStream(&#39;nodejitsu.svg&#39;)

code.pipe(output);
</code></pre><p>Because we are dealing with streams here, hooking this up to HTTP server is super easy.</p>
<pre><code>var qr = require(&#39;qr-image&#39;);
var express = require(&#39;express&#39;);

var app = express();

app.get(&#39;/&#39;, function(req, res) {
  var code = qr.image(new Date().toString(), { type: &#39;svg&#39; });
  res.type(&#39;svg&#39;);
  code.pipe(res);
});

app.listen(3000);
</code></pre><p>Now, going to <code>http://localhost:3000</code> will spit out a QR code with current time. Wicked!</p>
<h2 id="metadata">Metadata</h2>
<p><a href="http://en.wikipedia.org/wiki/QR_code">QR code</a> allows you embed pretty much any text, but with some additional formatting you can tell scanning applications about the data and what you want them to do with it. Here are a few most common formats:</p>
<div class="overflow"><table width="100%" border="0" cellspacing="0px" cellpadding="10px">
  <thead>
    <tr>
      <th>Data Type</th>
      <th>Data Format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Website URL</th>
      <td><a href="http://www.websitename.com">http://www.websitename.com</a> (include the “http://” so it recognizes the data as a website URL)</td>
    </tr>
    <tr>
      <th>Pre-populated email address</th>
      <td>mailto:name@email.com (include “mailto” so it recognizes the data as an email address)</td>
    </tr>
    <tr>
      <th>Pre-Populated Telephone Number</th>
      <td>+16365553344 (URI should include the country code to support users outside the country of origin)</td>
    </tr>
    <tr>
      <th>Contact Information</th>
      <td>LastName,FirstName;ADR:(insert address), (second address line), City, ST (Insert 5-digit zip code);TEL:+16365553344;EMAIL:name@email.com;;<strong>DO NOT</strong> use parenthesis or line breaks in code.<p></p>
        <p>*For QR Codes, the MECARD standard format shown above is more standard than vCard standard format</p>
      </td>
    </tr>
    <tr>
      <th>Pre-populated SMS Message</th>
      <td>smsto:number:message</td>
    </tr>
    <tr>
      <th>Pre-populated MMS Message</th>
      <td>mms:number:subject</td>
    </tr>
    <tr>
      <th>Map or Location Coordinates</th>
      <td>latitude, longitude, altitude in meters (a minus sign denotes a South latitude and a West longitude)code for Google offices: 40.71872,-73.98905, 100</td>
    </tr>
    <tr>
      <th>Android Market URI for Android Devices</th>
      <td>For a QR code you must replace all punctuation with code. For example,market://search?q=pub:”Search Query” becomes:<p></p>
      <p>market://search?q=pub%3A%22Search%20Query%22</p></td>
    </tr>
    <tr>
      <th>YouTube Video</th>
      <td>youtube://ID (may work on iPhone, untested, unreleased, not standardized)</td>
    </tr>
    <tr>
      <th>iCal Appointment</th>
      <td>BEGIN:VEVENT<br>
          SUMMARY:Test Meeting<br>
          DTSTART:20110713T190000Z<br>
          DTEND:20110713T200000Z<br>
          END:VEVENT<br>
          (untested, unreleased, not standardized)
      </td>
    </tr>
  </tbody>
</table></div>

</div></article><article><header><h2><a href="/posts/2014-02-25-webdriverjs">webdriver.js</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 25th 2014</span><a href="http://npmawesome.com/posts/2014-02-25-webdriverjs#disqus_thread" class="comments"></a><div data-github-repo="camme/webdriverjs" class="github-stars"></div></div></header><div class="content"><p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/2c405e9d55507036d6cc2aff250c3146" style="float: right; margin-left: 1em"/>
<a href="https://github.com/camme/webdriverjs">webdriver.js</a> is a module by <a href="https://github.com/camme">Camilo Tapia</a> that makes it possible to write super easy selenium tests in your favorite BDD or TDD test framework. <a href="https://github.com/camme/webdriverjs">webdriver.js</a> is not the &quot;official webdriverjs driver&quot; says <a href="https://github.com/christian-bromann">Christian Bromann</a> in <a href="https://github.com/camme/webdriverjs/issues/138#issuecomment-32051980">this thread</a>:</p>
<blockquote>
<p>We&#39;re trying to provide a selenium runner which is easy to use, highly extendable and compatible with all common JavaScript test frameworks. It uses an own chain API to execute all async commands in right order. The specialty of this library is that we wrap all JSONWire protocol commands in useful actions commands. So you don&#39;t have to care about to get an element first and then call the click command; you just execute the click with a selector as parameter.</p>
</blockquote>
<pre><code>npm install webdriverjs
</code></pre><h2 id="usage">Usage</h2>
<pre><code>var webdriverjs = require(&#39;webdriverjs&#39;);

var options = {
  desiredCapabilities: {
    browserName: &#39;chrome&#39;
  }
};

webdriverjs
  .remote(options)
  .init()
  .url(&#39;http://www.google.com&#39;)
  .title(function(err, res) {
    console.log(&#39;Title was: &#39; + res.value);
  })
  .end();
</code></pre><h2 id="selector-api">Selector API</h2>
<p>The <code>JsonWireProtocol</code> provides several strategies to query an element. <a href="https://github.com/camme/webdriverjs">webdriver.js</a> simplifies these to make it more familiar with the common existing selector libraries like Sizzle. The following selector types are supported:</p>
<ul>
<li>CSS query selector</li>
<li>link text</li>
<li>partial link text</li>
<li>tag name</li>
<li>name attribute</li>
<li>xPath</li>
</ul>
<h2 id="more">More</h2>
<p>Here is a simplified example of differences between the drivers:</p>
<p><a href="https://code.google.com/p/selenium/wiki/WebDriverJs">selenium-webdriverjs</a>:</p>
<pre><code>driver.get(&#39;http://www.google.com&#39;);
driver.findElement(webdriver.By.id(&#39;q&#39;)).sendKeys(&#39;webdriver&#39;);
driver.findElement(webdriver.By.id(&#39;btnG&#39;)).click();
</code></pre><p><a href="https://github.com/admc/wd">WD.js</a>:</p>
<pre><code>browser
  .get(&quot;http://www.google.com&quot;)
  .elementById(&#39;q&#39;)
  .sendKeys(&#39;webdriver&#39;)
  .elementById(&#39;btnG&#39;)
  .click()
</code></pre><p><a href="https://github.com/camme/webdriverjs">webdriver.js</a>:</p>
<pre><code>client
    .url(&#39;http://google.com&#39;)
    .setValue(&#39;#q&#39;,&#39;webdriver&#39;)
    .click(&#39;#btnG&#39;)
</code></pre><p><a href="https://github.com/camme/webdriverjs">webdriver.js</a> has also almost all protocol commands implemented, so you can do the same with the standard JSONWire protocol commands.</p>
<pre><code>client
    .url(&#39;http://google.com&#39;)
    .element(&#39;#q&#39;, function(err,res) {
        client.elementIdValue(res.value.ELEMENT, &#39;webdriver&#39;);
    })
    .element(&#39;#btnG&#39;, function(err,res) {
        client.elementIdClick(res.value.ELEMENT);
    });
</code></pre></div></article><article><header><h2><a href="/posts/2014-02-24-pretty-error">pretty-error</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 24th 2014</span><a href="http://npmawesome.com/posts/2014-02-24-pretty-error#disqus_thread" class="comments"></a><div data-github-repo="AriaMinaei/pretty-error" class="github-stars"></div></div></header><div class="content"><p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/8db4bf4bbef66bb91a4f2a0ba3b26e68" style="float: right; margin-left: 1em"/>
<a href="https://github.com/AriaMinaei/pretty-error">pretty-error</a> is a module by <a href="https://github.com/AriaMinaei">Aria Minaei</a> to render node.js error stack in a much more digestable way. This seems like it might a good module to add to your infrastracture if you, like me, constantly having to weed through the ugly stack messages to find relavant lines.</p>
<pre><code>npm install pretty-error
</code></pre><p><img class="hide-on-mobile" src="https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/pretty-error-screenshot.png" style="width: 100%; margin: 1em 0"/></p>
<h2 id="usage">Usage</h2>
<pre><code>require(&#39;pretty-error&#39;).start(function() {
  startTheApp();
});
</code></pre><h2 id="how-it-works">How it Works</h2>
<p><a href="https://github.com/AriaMinaei/pretty-error">pretty-error</a> turns error objects into something similar to an HTML document, and then uses the upcoming <a href="https://github.com/AriaMinaei/renderkid">RenderKid</a> to render the document using simple HTML/CSS-like commands for the console. This allows <a href="https://github.com/AriaMinaei/pretty-error">pretty-error</a> to be themed using simple CSS-like declarations.</p>
<h2 id="the-cool-bits">The cool bits</h2>
<h3 id="shortening-paths">Shortening paths</h3>
<p>You might want to substitute long paths with shorter, more readable aliases:</p>
<pre><code>pe.alias(&#39;E:/open-source/theatrejs/scripts/js&#39;, &#39;(Theare.js)&#39;);

// to remove the alias:
pe.removeAlias(&#39;E:/open-source/theatrejs/scripts/js&#39;);

// or:
pe.removeAllAliases();
</code></pre><h3 id="skipping-packages">Skipping packages</h3>
<p>You might want to skip trace lines that belong to specific packages (chai, when, socket.io):</p>
<pre><code>pe.skipPackage(&#39;chai&#39;, &#39;when&#39;, &#39;socket.io&#39;);

// to unskip:
pe.unskipPackage(&#39;socket.io&#39;);
pe.unskipAllPackages();
</code></pre><h3 id="skipping-node-files">Skipping node files</h3>
<pre><code>// this will skip node.js, path.js, event.js, etc.
pe.skipNodeFiles();

// also:
pe.unskipNodeFiles();
</code></pre><h3 id="skipping-paths">Skipping paths</h3>
<pre><code>pe.skipPath(&#39;/home/dir/someFile.js&#39;);

// also:
pe.unskipPath(&#39;/home/dir/someFile.js&#39;);
pe.unskipAllPaths();
</code></pre></div></article><article><header><h2><a href="/posts/2014-02-21-supertest">supertest</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 21st 2014</span><a href="http://npmawesome.com/posts/2014-02-21-supertest#disqus_thread" class="comments"></a><div data-github-repo="visionmedia/supertest" class="github-stars"></div></div></header><div class="content"><p><img class="hide-on-mobile" src="https://2.gravatar.com/avatar/f1e3ab214a976a39cfd713bc93deb10f" style="float: right; margin-left: 1em"/>
<a href="https://github.com/visionmedia/supertest">supertest</a> is a module by <a href="https://github.com/visionmedia">TJ Holowaychuk</a> that takes testing HTTP easier via <a href="http://github.com/visionmedia/superagent">superagent</a>. The motivation with this module is to provide a high-level abstraction for testing HTTP, while still allowing you to drop down to the lower-level API provided by superagent.</p>
<pre><code>npm install supertest
</code></pre><p>You may pass an <code>http.Server</code>, or a <code>Function</code> to <code>request()</code> - if the server is not already listening for connections then it is bound to an ephemeral port for you so there is no need to keep track of ports.</p>
<h2 id="usage">Usage</h2>
<p>Here&#39;s a basic GET request to an end point.</p>
<pre><code>var request = require(&#39;supertest&#39;)
  , express = require(&#39;express&#39;);

var app = express();

app.get(&#39;/user&#39;, function(req, res) {
  res.send(200, { name: &#39;tobi&#39; });
});

request(app)
  .get(&#39;/user&#39;)
  .expect(&#39;Content-Type&#39;, /json/)
  .expect(&#39;Content-Length&#39;, &#39;20&#39;)
  .expect(200)
  .end(function(err, res) {
    if (err) throw err;
  });
</code></pre><p>You can also get all fancy and upload files:</p>
<pre><code>request(app)
  .post(&#39;/&#39;)
  .attach(&#39;avatar&#39;, &#39;test/fixtures/homeboy.jpg&#39;)
</code></pre><p>Passing the app or url each time is not necessary, if you&#39;re testing the same host you may simply re-assign the request variable with the initialization app or url:</p>
<pre><code>request = request(&#39;http://localhost:5555&#39;);

request.get(&#39;/&#39;).expect(200, function(err) {
  console.log(err);
});

request.get(&#39;/&#39;).expect(&#39;heya&#39;, function(err) {
  console.log(err);
});
</code></pre><p>Anything you can do with <a href="http://github.com/visionmedia/superagent">superagent</a>, you can do with <a href="https://github.com/visionmedia/supertest">supertest</a>. For some strange reason I love testing HTTP end points, this is my goto library for this. Thanks TJ!</p>
</div></article><article><header><h2><a href="/posts/2014-02-20-spritesmith">spritesmith</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 20th 2014</span><a href="http://npmawesome.com/posts/2014-02-20-spritesmith#disqus_thread" class="comments"></a><div data-github-repo="Ensighten/spritesmith" class="github-stars"></div></div></header><div class="content"><p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/15927fc52919e9223adc7ed99e125d4d" style="float: right; margin-left: 1em"/>
<a href="https://github.com/Ensighten/spritesmith">spritesmith</a> is a module by <a href="https://github.com/twolfson">Todd Wolfson</a> that takes image files and generates <a href="http://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29#Sprites_by_CSS">spritesheets</a> and coordinate maps. By itself <a href="https://github.com/Ensighten/spritesmith">spritesmith</a> would be somewhat difficult to utilize in your workflow, that&#39;s why nice people have created <a href="https://github.com/twolfson/gulp.spritesmith">gulp.spritesmith</a> and <a href="https://github.com/Ensighten/grunt-spritesmith">grunt-spritesmith</a> tasks to make build sprites for you with just a few lines of code.</p>
<pre><code>npm install spritesmith
</code></pre><h2 id="usage">Usage</h2>
<p><img class="hide-on-mobile" src="http://upload.wikimedia.org/wikipedia/commons/0/03/Sprite-example.gif" style="float: right; width: 150px; margin-left: 1em; background: white; padding: 1em"/></p>
<pre><code>var sprites = [
  &#39;sprite1.png&#39;,
  &#39;sprite2.jpg&#39;,
  &#39;sprite3.png&#39;
];

spritesmith({&#39;src&#39;: sprites}, function (err, result) {
  // Binary string representation of image
  result.image;

  // Object mapping filename to {x, y, width, height} of image
  result.coordinates;

  // Object with metadata about spritesheet {width, height}
  result.properties;
});
</code></pre><p>Converting this structure to image files and CSS now seems like a pretty straightforward task.</p>
</div></article><article><header><h2><a href="/posts/2014-02-19-9-gulp-js-plugins-for-a-great-build-system">9 gulp.js plugins for a great build system</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 19th 2014</span><a href="http://npmawesome.com/posts/2014-02-19-9-gulp-js-plugins-for-a-great-build-system#disqus_thread" class="comments"></a></div></header><div class="content"><div class="highlight nodejitsu"><img src="/images/posts/nodejitsu.png" style="height: 80px" class="hide-on-mobile"/><span>This post was written for <a href="http://nodejitsu.com">Nodejitsu</a> blog and is crossposted here.
<a href="http://nodejitsu.com">Nodejitsu</a> loved what I was doing at <a href="http://npmawesome.com">npmawesome.com</a>
and is now supporting the project.</span></div><p>This article assumes you have experience with node.js, npm and you are pretty familiar with the concept of task runners and command-line interface. It will walk through general steps required to get up and running with <a href="http://gulpjs.com">gulp.js</a>.</p>
<p>Not unlike all the other build systems, it all starts by installing the task runner itself, e.g. <code>npm install gulp</code> and creating the main file in the root of your project called <code>gulpfile.js</code>. For those people like myself, who immediately want to know if <a href="http://gulpjs.com">gulp.js</a> supports CoffeeScript - the answer is yes - just <code>require(&#39;./gulpfile.coffee&#39;)</code> from <code>gulpfile.js</code>.</p>
<p>Now that we have everything sorted out, lets get cracking and make a task runner to support our HTML5 node.js project.</p>
<h2 id="-gulp-util-"><a href="https://github.com/gulpjs/gulp-util">gulp-util</a></h2>
<p>This is the official tool belt for <a href="http://gulpjs.com">gulp.js</a>. The authors decided to split up helpers into a separate module which you basically end up requiring every time. This module brings in functionality for logging, coloring console output, and so on. Check out the <a href="https://github.com/gulpjs/gulp-util">gulp-util</a> github page for the full list.</p>
<p>Since this is a utility module, there isn&#39;t a specific place to get started with it, so we will use it throughout instead.</p>
<h2 id="-gulp-clean-"><a href="https://github.com/peter-vilja/gulp-clean">gulp-clean</a></h2>
<p>The first thing any self-respecting build system should do is clean the space and remove everything that&#39;s in the way.</p>
<pre><code>var gulp = require(&#39;gulp&#39;);
var clean = require(&#39;gulp-clean&#39;);

gulp.task(&#39;clean&#39;, function () {
  return gulp.src(&#39;build&#39;, {read: false})
    .pipe(clean());
});
</code></pre><p>You can now run <code>gulp clean</code> and the <code>build</code> folder in the root of your project will be obliterated.</p>
<h2 id="-gulp-concat-"><a href="https://github.com/wearefractal/gulp-concat">gulp-concat</a></h2>
<p>It&#39;s probably safe to assume that your HTML5 project has a few external dependencies like <a href="http://jquery.com">jQuery</a>, maybe <a href="http://modernizr.com/">Modernizr</a> and such. Instead of having a separate <code>&lt;script&gt;</code> tag for each one of them, it would be nice to concat them together into one file. That&#39;s where <a href="https://github.com/wearefractal/gulp-concat">gulp-concat</a> comes in:</p>
<pre><code>var concat = require(&#39;gulp-concat&#39;);

gulp.task(&#39;vendor&#39;, function() {
  return gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
});
</code></pre><p>Now, running <code>gulp vendor</code> will take all <code>*.js</code> files from the local <code>vendor</code> folder and concat them into <code>build/vendor.js</code>.</p>
<h2 id="-gulp-uglify-"><a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a></h2>
<p>The next thing to do is to minify our <code>vendor.js</code>. Lets add this to our <code>vendor</code> task.</p>
<pre><code>var uglify = require(&#39;gulp-uglify&#39;);

gulp.task(&#39;vendor&#39;, function() {
  return gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(uglify())
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
});
</code></pre><p>Notice, that instead of creating a separate task for minifying, we simply added another <code>pipe</code> call. This is essentially what <a href="http://gulpjs.com">gulp.js</a> is all about - applying the right tools!</p>
<p>This is also where things might start going wrong, because <a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a> will throw an error if you have invalid JavaScript syntax. To deal with that lets add a basic error:</p>
<pre><code>var gutil = require(&#39;gulp-util&#39;);

gulp.task(&#39;vendor&#39;, function() {
  return gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(uglify())
    .pipe(gulp.dest(&#39;build/vendor.js&#39;))
    .on(&#39;error&#39;, gutil.log)
});
</code></pre><h2 id="-gulp-rename-"><a href="https://github.com/hparra/gulp-rename">gulp-rename</a></h2>
<p>Do you want to keep both, minified and source files around? That&#39;s not a problem! Lets extend our <code>vendor</code> task to write out <code>vendor.js</code> and <code>vendor.min.js</code> at the same time.</p>
<pre><code>var rename = require(&#39;gulp-rename&#39;);

gulp.task(&#39;vendor&#39;, function() {
  return gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .on(&#39;error&#39;, gutil.log)
});
</code></pre><p>Notice that <code>gulp.dest</code> is used twice here. This is the cool thing about <a href="http://gulpjs.com">gulp.js</a> - everything is just streams. Adding <code>gulp.dest</code> merely dumps whatever we currently have in the stream to disk, we can then mutate it further and save the new state again. Cool, eh?</p>
<h2 id="-gulp-filesize-"><a href="https://github.com/Metrime/gulp-filesize">gulp-filesize</a></h2>
<p>Don&#39;t know about you, but after minifying JavaScript I always want to know the file size. Guess what - I&#39;m not the only one and there&#39;s a plugin for that.</p>
<pre><code>var filesize = require(&#39;gulp-filesize&#39;);

gulp.task(&#39;vendor&#39;, function() {
  return gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .on(&#39;error&#39;, gutil.log)
});
</code></pre><p>Again, see how <code>filesize</code> is used twice? It will first print out the size of our source file and then the minified size.</p>
<h2 id="-gulp-less-"><a href="https://github.com/plus3network/gulp-less">gulp-less</a></h2>
<p>Lets assume you used the amazing <a href="http://lesscss.org/">LESS</a> preprocessor for your generating your CSS files and now want to generate them. <a href="https://github.com/plus3network/gulp-less">gulp-less</a> to the rescue!</p>
<pre><code>var less = require(&#39;gulp-less&#39;);
var path = require(&#39;path&#39;);

gulp.task(&#39;css&#39;, function () {
  return gulp.src(&#39;less/**/*.less&#39;)
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});
</code></pre><p>Running <code>gulp css</code> will compile all <a href="http://lesscss.org/">LESS</a> files from the <code>less</code> folder into <code>build/css</code>.</p>
<h2 id="-gulp-changed-"><a href="https://github.com/sindresorhus/gulp-changed">gulp-changed</a></h2>
<p>I would be forever unhappy if every time I ran <code>gulp css</code> all of my files would be regenerated regardless if the source <a href="http://lesscss.org/">LESS</a> files have changed or not. Lets use <a href="https://github.com/sindresorhus/gulp-changed">gulp-changed</a> to excluded not modified files.</p>
<pre><code>var changed = require(&#39;gulp-changed&#39;);

gulp.task(&#39;css&#39;, function () {
  return gulp.src(&#39;less/**/*.less&#39;)
    .pipe(changed(&#39;build/css&#39;))
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});
</code></pre><h2 id="-gulp-watch-"><a href="https://github.com/floatdrop/gulp-watch">gulp-watch</a></h2>
<p>It would be really cool if you didn&#39;t have to run <code>gulp css</code> every time you make a change, right? Lets set up a task that will monitor our files for changes and and compile them right away.</p>
<p><a href="https://github.com/floatdrop/gulp-watch">gulp-watch</a> is a little bit different from the other plugins and we use it instead of <code>gulp.src</code> as the starting point.</p>
<pre><code>var watch = require(&#39;gulp-watch&#39;);

gulp.task(&#39;css:watch&#39;, function () {
  watch({
    glob: &#39;less/**/*.less&#39;,
    emit: &#39;one&#39;,
    emitOnGlob: false
  }, function(files) {
    return files
      .pipe(less({
        paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
      }))
      .pipe(gulp.dest(&#39;build/css&#39;))
      .on(&#39;error&#39;, gutil.log);
  });
});
</code></pre><p><code>gulp css:watch</code> will being watching all of our LESS files and compile only the changed one.</p>
<h2 id="all-together">All together</h2>
<p>Now lets put it all together into <code>gulpfile.js</code></p>
<pre><code>var path = require(&#39;path&#39;);
var gulp = require(&#39;gulp&#39;);
var gutil = require(&#39;gulp-util&#39;);
var clean = require(&#39;gulp-clean&#39;);
var concat = require(&#39;gulp-concat&#39;);
var uglify = require(&#39;gulp-uglify&#39;);
var rename = require(&#39;gulp-rename&#39;);
var filesize = require(&#39;gulp-filesize&#39;);
var less = require(&#39;gulp-less&#39;);
var changed = require(&#39;gulp-changed&#39;);
var watch = require(&#39;gulp-watch&#39;);

gulp.task(&#39;clean&#39;, function () {
  gulp.src(&#39;build&#39;, {read: false})
    .pipe(clean());
});

gulp.task(&#39;vendor&#39;, function() {
  return gulp.src(&#39;vendor/*.js&#39;)
    .pipe(concat(&#39;vendor.js&#39;))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .pipe(uglify())
    .pipe(rename(&#39;vendor.min.js`))
    .pipe(gulp.dest(&#39;build&#39;))
    .pipe(filesize())
    .on(&#39;error&#39;, gutil.log)
});

gulp.task(&#39;css&#39;, function () {
  return gulp.src(&#39;less/**/*.less&#39;)
    .pipe(changed(&#39;build/css&#39;))
    .pipe(less({
      paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
    }))
    .pipe(gulp.dest(&#39;build/css&#39;))
    .on(&#39;error&#39;, gutil.log);
});

gulp.task(&#39;css:watch&#39;, function () {
  watch({
    glob: &#39;less/**/*.less&#39;,
    emit: &#39;one&#39;,
    emitOnGlob: false
  }, function(files) {
    return files
      .pipe(less({
        paths: [ path.join(__dirname, &#39;less&#39;, &#39;includes&#39;) ]
      }))
      .pipe(gulp.dest(&#39;build/css&#39;))
      .on(&#39;error&#39;, gutil.log);
  });
});
</code></pre><h2 id="summary">Summary</h2>
<p>The thing that I personally really like about <a href="http://gulpjs.com">gulp.js</a> is that it feels to me like a toolbox full of single purpose tools that I can use to assemble almost anything. It&#39;s amazing how in a span of a couple of months community has wrote <a href="http://gulpjs.com/plugins/">over 300 plugins</a>.</p>
</div></article><article><header><h2><a href="/posts/2014-02-18-npm-diff">npm-diff</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 18th 2014</span><a href="http://npmawesome.com/posts/2014-02-18-npm-diff#disqus_thread" class="comments"></a><div data-github-repo="segmentio/npm-diff" class="github-stars"></div></div></header><div class="content"><p><img class="hide-on-mobile" src="https://1.gravatar.com/avatar/a010d5218f2c3d194dbbac9c5d14d0ad" style="float: right; margin-left: 1em"/>
<a href="https://github.com/segmentio/npm-diff">npm-diff</a> is a utility module by <a href="https://github.com/juliangruber">Julian Gruber</a> to diff two versions of NPM module. I&#39;ve been fascinated recently by all the tools being released to help you manage <code>package.json</code> and module publishing. It&#39;s really cool!</p>
<pre><code>npm install npm-diff
</code></pre><h2 id="usage">Usage</h2>
<pre><code>$ npm-diff intersect 0.0.0 0.1.0 | colordiff
</code></pre><p><img class="hide-on-mobile" src="https://github-camo.global.ssl.fastly.net/304bdd7188c9fea08e87e731790aad980877ce7b/68747470733a2f2f692e636c6f756475702e636f6d2f5267694263634b7664742e706e67" style="width: 100%"/></p>
<p>BOOM! <code>brew install colordiff</code> if you haven&#39;t got it.</p>
</div></article><article><header><h2><a href="/posts/2014-02-17-nodepdf">NodePDF</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 17th 2014</span><a href="http://npmawesome.com/posts/2014-02-17-nodepdf#disqus_thread" class="comments"></a><div data-github-repo="TJkrusinski/NodePDF" class="github-stars"></div></div></header><div class="content"><p><img class="hide-on-mobile" src="https://0.gravatar.com/avatar/c0f5a91f71e988a9e2d9c20ffa546f4e" style="float: right; margin-left: 1em"/>
<a href="https://github.com/TJkrusinski/NodePDF">NodePDF</a> is a module by <a href="https://github.com/TJkrusinski">TJ Krusinski</a> for creating PDF files from web pages. It depends on <a href="http://phantomjs.org/">PhantomJS</a> and works by simply taking a screenshot of a page and stuffing it into a PDF. One the plus side, this makes it really easy to do mostly graphics based PDF files from node. On the down side, the content isn&#39;t scalable at all, so printing quality will suffer.</p>
<pre><code>npm install nodepdf
</code></pre><h2 id="usage">Usage</h2>
<p><img class="hide-on-mobile" src="/images/posts/nodepdf.jpg" style="width: 300px; float: right; margin: 1em;"/></p>
<pre><code>var nodepdf = require(&#39;nodepdf&#39;);

// last argument is optional, sets the width and height
// for the viewport to render the pdf from
var pdf = new nodepdf(
  &#39;http://npmawesome.com&#39;,
  &#39;npmawesome.pdf&#39;,
  {
    args: &#39;--debug=true&#39;,
    viewportSize: {
      width: 500,
      height: 300
    }
  }
);

pdf.on(&#39;error&#39;, function(msg){
    console.log(msg);
});

pdf.on(&#39;done&#39;, function(pathToFile){
    console.log(pathToFile);
});
</code></pre><p>I can imagine this being used for something simple, like printing tickets, post cards, photos and so on.</p>
</div></article><article><header><h2><a href="/posts/2014-02-13-domain-context">domain-context</a></h2><div class="meta"><span>posted by <a href="https://github.com/alexgorbatchev">Alex Gorbatchev</a> on February 13th 2014</span><a href="http://npmawesome.com/posts/2014-02-13-domain-context#disqus_thread" class="comments"></a><div data-github-repo="andreypopp/domain-context" class="github-stars"></div></div></header><div class="content"><p><img class="hide-on-mobile" src="/images/posts/domain-context.jpg" style="width: 100%"/></p>
<p><a href="https://github.com/andreypopp/domain-context">domain-context</a> is a module by <a href="https://github.com/andreypopp">Andrey Popp</a> for dealing with globally accessible domain-bound contexts, connect/express middleware included.</p>
<pre><code>npm install domain-context
</code></pre><h2 id="usage">Usage</h2>
<pre><code>var connectDomain = require(&#39;connect-domain&#39;),
    domainContext = require(&#39;domain-context&#39;),
    express = require(&#39;express&#39;);

var lifecycle = {
  context: function() {
    return {db: new pg.Client(...)}
  },
  cleanup: function(context) {
    context.db.query(&#39;commit&#39;);
    context.db.end();
  },
  onError: function(err, context) {
    context.db.query(&#39;rollback&#39;);
    context.db.end();
  }
};

app = express();
app.use(connectDomain());
app.use(domainContext.middleware(lifecycle));

// Your applicaiton&#39;s middleware goes here
//
// Note that because of connect/express design you are required to place two
// middlewares around your application — domainContext.middleware() and
// domainContext.middlewareOnError().

app.use(domainContext.middlewareOnError(lifecycle));

// Now you can use domainContext.get() to query data from the currently active domain:

var domainContext = require(&#39;connect-reqcontext&#39;);

function getUserById(id, cb) {
  domainContext.get(&#39;db&#39;).query(&quot;select ...&quot;, cb);
}
</code></pre><p>I feel that this is pretty self-explanatory here. Being able to get request context outside of the <code>express</code> handlers and not having to pass so much context around to API is pretty great.</p>
</div></article><footer class="pagination"><ul><li class="disabled"><span>Prev</span></li><li class="active"><span>1</span></li><li><a href="/index.1">2</a></li><li><a href="/index.2">3</a></li><li><a href="/index.3">4</a></li><li><a href="/index.1">Next</a></li></ul></footer><script type="text/javascript">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = 'npmawesome'; // required: replace example with your forum shortname

/* * * DON'T EDIT BELOW THIS LINE * * */
(function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
}());</script>]]></description>
            <link>http://npmawesome.com/</link>
            <guid isPermaLink="true">http://npmawesome.com/</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Fri, 28 Mar 2014 01:01:58 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[flake]]></title>
            <description><![CDATA[<p><a href="https://github.com/chilts/flake">flake</a> can generate practically unique
approximately sortable IDs in a distributed environment, similiar to
Twitter’s <a href="https://github.com/twitter/snowflake">Snowflake</a>.</p>
<pre><code>npm install flake
</code></pre><p>Use in distributed environments where you don’t have a central service
which can be a single point of failure - perfect when you want
everything to be redundant and independent of each other. Flake Id is
made up of <code>timestamp-counter-pid-macaddress</code></p>
<pre><code>&gt; var flake = require(&#39;flake&#39;)(&#39;eth0&#39;);
&gt; console.log(flake());
013b829b1520-0000-18f0-984be1b8b104
&gt; console.log(flake());
013b829b1527-0000-18f0-984be1b8b104
&gt; console.log(flake());
013b829b1527-0001-18f0-984be1b8b104
</code></pre><p>In the example above, <code>eth0</code> is used for machine’s network interface,
but this is not guaranteed to work on your machine. You need to change
it to something which exists on your machine. It’s easy to find it on
your machine using <code>ifconfig</code> or something similiar.</p>
<p>There are plenty of examples and information on the <a href="https://github.com/chilts/flake">github
page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-17-flake</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-17-flake</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Sun, 17 Nov 2013 23:20:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[node-jvm]]></title>
            <description><![CDATA[<p><a href="https://github.com/YaroslavGaponov/node-jvm">node-jvm</a> is a complete
JVM virtual machine written in JavaScript written by Yaroslav Gaponov
during his preparation for a Java SE 7 exam.</p>
<pre><code>npm install node-jvm
</code></pre><p>In Java land:</p>
<pre><code>public class Main {
    public static long fib(int n) {
        if (n &lt;= 1) return n;
        return fib(n-1) + fib(n-2);
    }

    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.print(&quot;help: java Main.class {Number}&quot;);
            return;
        }

        int N = Integer.parseInt(args[0]);
        long start = System.currentTimeMillis();
        System.out.format(&quot;Fibonacci from 1 to %s:\n&quot;, N);

        for (int i = 1; i &lt;= N; i++) {
            System.out.println(i + &quot;: &quot; + fib(i));
        }

        long stop = System.currentTimeMillis();
        System.out.println(&quot;time: &quot; + (stop - start) + &quot;ms&quot;);

        System.out.println(&quot;done.&quot;);
    }
}
</code></pre><p>In JavaScript land:</p>
<pre><code>var JVM = require(&quot;node-jvm&quot;);
var jvm = new JVM();

jvm.setLogLevel(7);
var entryPointClassName = jvm.loadJarFile(&quot;./Main.jar&quot;);

jvm.setEntryPointClassName(entryPointClassName);

jvm.on(&quot;exit&quot;, function(code) {
    process.exit(code);
});

jvm.run([15]);
</code></pre><p>There are plenty of examples on the <a href="https://github.com/YaroslavGaponov/node-jvm">github page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-17-node-jvm</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-17-node-jvm</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Sun, 17 Nov 2013 23:20:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[vm.js]]></title>
            <description><![CDATA[<p><a href="https://github.com/tarruda/vm.js">vm.js</a> is a pretty impressive fully
functional ECMAScript virtual machine that can be used from any
ECMAScript3-compatible environment. Eventually it will provide a
complete ECMAScript 6 environment (for now only some features are
supported).</p>
<pre><code>npm install vm.js
</code></pre><p>It’s written in CoffeeScript and has plenty of tests. The most
impressive thing is that the tests themselves run inside <code>vm.js</code>.</p>
<p>Here are some possible use cases:</p>
<ul>
<li>Simple in-process javascript sandbox</li>
<li>Async-to-sync API adapter using fibers (lightweight in-process threads, not node.js fibers)</li>
<li>Use new ECMAScript features in very old browsers</li>
</ul>
<p>The main API can be accessed through vm instances. Each vm is indirectly
associated with a global object (through a “realm”) and is isolated from
other vms.</p>
<p>Start by creating a new instance:</p>
<pre><code>&gt; Vm = require(&#39;vm.js&#39;)
&gt; vm = new Vm()
</code></pre><p>Evaluate simple expressions:</p>
<pre><code>&gt; vm.eval(&#39;40 + 2&#39;)
42
&gt; vm.eval(&#39;[a, b, c] = [1, 2, 3]&#39;) // Harmony destructuring assignment
[1, 2, 3]
&gt; vm.realm.global.a
1
&gt; vm.realm.global.b
2
&gt; vm.realm.global.c
3
</code></pre><p>Compile programs and run later</p>
<pre><code>// pass filename as second argument for stack traces/debugging
&gt; script = Vm.compile(&#39;2 + 2&#39;, &#39;sum.js&#39;)
&gt; vm.run(script)
4
</code></pre><p>Compiled scripts can be serialized/deserialized to/from JSON-friendly
structures:</p>
<pre><code>&gt; scriptObj = script.toJSON()
&gt; serializedScript = JSON.stringify(scriptObj)
&gt; deserializedScript = Vm.fromJSON(JSON.parse(serializedScript))
&gt; vm.run(deserializedScript)
</code></pre><p>Expose objects to be used by code running inside the Vm</p>
<pre><code>&gt; vm.realm.global.factorial = function factorial(n) { return n &gt; 1 ? factorial(n - 1) * n : 1 }
&gt; vm.eval(&#39;factorial(5)&#39;)
120
</code></pre><p>The inverse also works:</p>
<pre><code>&gt; vm.eval(&#39;function factorial(n) { return n &gt; 1 ? factorial(n - 1) * n : 1 }&#39;)
&gt; vm.realm.global.factorial(5)
120
</code></pre><p>Return values asynchronously using fiber pause/resume:</p>
<pre><code>// created a paused fiber from compiled code
fiber = vm.createFiber(Vm.compile(&#39;user = null; user = fetchAsync(&quot;/users/1&quot;);&#39;))
vm.realm.global.fetchAsync = function(url) {
  fiber.pause() // pause execution
  $.get(url, function(data) {
    // user === null
    fiber.setReturnValue(data)
    fiber.resume()
    // user === data
  });
}
// start fiber
fiber.run()
</code></pre><p>There are plenty of examples on the <a href="https://github.com/tarruda/vm.js">github page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-17-vm-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-17-vm-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Sun, 17 Nov 2013 23:20:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[nixt]]></title>
            <description><![CDATA[<p><img class="hide-on-mobile" src="/images/posts/nixt.jpg" style="width: 200px; float: right"/></p>
<p><a href="https://github.com/vesln/nixt">nixt</a> is aiming to make testing of
command-line apps as simple as possible. It plays nice with the testing
tools that you are already using and in case you are one of those guys
who practice outside-in BDD, it has the potential to become something
that lives in every command-line app that you are going to build.</p>
<pre><code>npm install nixt
</code></pre><p>The use is very straightforward:</p>
<pre><code>describe(&#39;todo add&#39;, function() {
  it(&#39;adds a new todo item&#39;, function(done) {
    nixt()
      .run(&#39;todo add&#39;)
      .stdout(&#39;A new todo has been added&#39;)
      .end(done);
  });
});
</code></pre><p>There are plenty of examples and information on the <a href="https://github.com/vesln/nixt">github
page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-18-nixt</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-18-nixt</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 18 Nov 2013 23:20:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[npmd]]></title>
            <description><![CDATA[<p><a href="https://github.com/dominictarr/npmd">npmd</a> is an alternative npm
client, based around a local replication of the npm metadata
(package.json &amp; readmes are replicated for every package, but only
tarballs that you have installed are replicated). Replicating data
locally makes the client much smarter, and enables all manner of Mad
Science.</p>
<pre><code>npm install npmd
</code></pre><p>To begin, replicate the registry metadata. When this gets near 100% you
can use the other commands.</p>
<pre><code>npmd --sync
</code></pre><p>You should leave the npmd service running in the background, this will
make running other npmd commands much faster. npmd will pull down npm
metadata, and store it in a leveldb. This will be less than 200mb,
including a full text index.</p>
<p>To publish a module locally from the package directory, just do:</p>
<pre><code>npmd publish
</code></pre><p>and your package version will be stashed into a queue for local use. You
can npmd install yourpkg locally even if yourpkg isn’t on the public npm
yet. You can even have multiple versions of your package queued up
locally.</p>
<p>There are plenty of examples and information on the <a href="https://github.com/dominictarr/npmd">github
page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-18-npmd</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-18-npmd</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 18 Nov 2013 23:20:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[pm2]]></title>
            <description><![CDATA[<p><a href="https://github.com/Unitech/pm2">pm2</a> is a process manager for Node apps with a builtin load-balancer.</p>
<pre><code>npm install pm2
</code></pre><p><img class="hide-on-mobile" src="/images/posts/pm2.png" style="width: 200px; float: right"/></p>
<p>pm2 is perfect when you need to spread your stateless code accross all
CPUs available on a server, to keep all processes alive forever and to
0s reload it. Good fit for IaaS structures. Don’t use it on PaaS
solutions (a solution for PaaS will be developed later).</p>
<h2 id="main-features">Main features</h2>
<ul>
<li>Builtin load-balancer (using the node cluster module)</li>
<li>Script daemonization</li>
<li>0s downtime reload</li>
<li>Startup scripts for Ubuntu and CentOS</li>
<li>Stop unstable process (avoid infinite loop)</li>
<li>Monitoring in console</li>
<li>HTTP API</li>
<li><a href="https://github.com/Unitech/pm2-interface">Remote control and real time interface API</a></li>
</ul>
<h2 id="more-details">More Details</h2>
<ul>
<li><a href="https://raw.github.com/Unitech/pm2#a2">Usage/Features</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a3">Different ways to launch a process</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a16">0s downtime reload</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a19">CoffeeScript</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a4">Is my production server ready for PM2</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a6">Listing processes : pm2 list</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a7">Monitoring processes (CPU/RAM) : pm2 monit</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a8">Startup script generation : pm2 startup</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a9">Log aggregation : pm2 logs</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a23">Fork mode</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a24">Customization</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a12">API health end point : pm2 web</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a13">JSON processes declaration</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a27">Contributing/Development mode</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a21">Known bugs</a></li>
<li><a href="https://raw.github.com/Unitech/pm2#a4">Launching the tests</a></li>
</ul>
<p>There are plenty of examples and information on the <a href="https://github.com/Unitech/pm2">github page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-18-pm2</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-18-pm2</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Mon, 18 Nov 2013 23:20:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[node-spdy]]></title>
            <description><![CDATA[<p><a href="https://github.com/indutny/node-spdy">spdy</a> lets you create <a href="http://www.chromium.org/spdy">SPDY
servers</a> in node.js with natural http
module interface and fallback to regular https (for browsers that don’t
support SPDY yet).</p>
<pre><code>npm install spdy
</code></pre><p>From <a href="http://en.wikipedia.org/wiki/SPDY">Wikipedia</a>:</p>
<p><img class="hide-on-mobile" src="/images/posts/spdy.jpg" style="width: 200px; float: right"/></p>
<blockquote>
<p>The goal of SPDY is to reduce web page load time. This is achieved by
prioritizing and multiplexing the transfer of web page subresources so
that only one connection per client is required. TLS encryption is
nearly ubiquitous in SPDY implementations, and transmission headers
are gzip-or DEFLATE-compressed by design (in contrast to HTTP, where
the headers are sent as human-readable text). Moreover, servers may
hint or even push content instead of awaiting individual requests for
each resource of a web page.</p>
</blockquote>
<p>Here’s how you would use it with express:</p>
<pre><code>var spdy = require(&#39;spdy&#39;),
    express = require(&#39;express&#39;),
    fs = require(&#39;fs&#39;);

var options = {
  key: fs.readFileSync(__dirname + &#39;/keys/spdy-key.pem&#39;),
  cert: fs.readFileSync(__dirname + &#39;/keys/spdy-cert.pem&#39;),
  ca: fs.readFileSync(__dirname + &#39;/keys/spdy-ca.pem&#39;),

  // SPDY-specific options
  windowSize: 1024 // Server&#39;s window size
};

var app = express();
app.use(/* your favorite middleware */);
var server = spdy.createServer(options, app);
server.listen(443);
</code></pre><p>There are plenty of examples and information on the <a href="https://github.com/indutny/node-spdy">github page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-20-spdy</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-20-spdy</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Wed, 20 Nov 2013 23:20:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[json-mask]]></title>
            <description><![CDATA[<p><a href="https://github.com/nemtsov/json-mask">json-mask</a> is a tiny language and
an engine for selecting specific parts of a JavaScript object.</p>
<pre><code>npm install json-mask
</code></pre><p>The use is very straightforward:</p>
<pre><code>&gt; var mask = require(&#39;json-mask&#39;)
&gt; mask({p: {a: 1, b: 2}, z: 1}, &#39;p/a,z&#39;)
{p: {a: 1}, z: 1}
</code></pre><p><img class="hide-on-mobile" src="/images/posts/json-mask.png" style="width: 200px; float: right"/></p>
<p>The main difference between JSONPath / JSONSelect and this engine is
that JSON Mask preserves the structure of the original input object.
Instead of returning an array of selected sub-elements (e.g.
<code>[{a: 1}, {z: 1}]</code> from example above), it filters-out the parts of the
object that you don’t need, keeping the structure unchanged:
<code>{p: {a: 1}, z: 1}</code>.</p>
<p>This is important because JSON Mask was designed with HTTP resources in
mind, the structure of which I didn’t want to change after the unwanted
fields were masked / filtered.</p>
<h2 id="syntax">Syntax</h2>
<p>The syntax is loosely based on XPath:</p>
<ul>
<li><code>a,b,c</code> comma-separated list will select multiple fields</li>
<li><code>a/b/c</code> path will select a field from its parent</li>
<li><code>a(b,c)</code> sub-selection will select many fields from a parent</li>
<li><code>a/*/c</code> the star <code>*</code> wildcard will select all items in a field</li>
</ul>
<p>There are plenty of examples and information on the <a href="https://github.com/nemtsov/json-mask">github page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-19-json-mask</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-19-json-mask</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Tue, 19 Nov 2013 23:20:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[bacon.js]]></title>
            <description><![CDATA[<p><a href="https://github.com/baconjs/bacon.js">bacon.js</a> is a library for
functional reactive programming. Or let’s say it’s a library for working
with events and dynamic values (which are called Properties in
Bacon.js). <a href="http://raimohanska.github.io/bacon.js-slides/">Check out</a>
the interactive demo.</p>
<pre><code>npm install baconjs
</code></pre><p>Conal Elliot explains functional reactive programming (FPR) over at
<a href="http://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming/1030631#1030631">Stack Overflow</a>:</p>
<p><img class="hide-on-mobile" src="/images/posts/baconjs.png" style="width: 200px; float: right"/></p>
<blockquote>
<p>So, what is FRP? You could have invented it yourself. Start with these
ideas:</p>
<ul>
<li><p>Dynamic/evolving values (i.e., values “over time”) are first class
values in themselves. You can define them and combine them, pass
them into &amp; out of functions. I called these things “behaviors”.</p>
</li>
<li><p>Behaviors are built up out of a few primitives, like constant
(static) behaviors and time (like a clock), and then with
sequential and parallel combination. n behaviors are combined by
applying an n-ary function (on static values), “point-wise”, i.e.,
continuously over time.</p>
</li>
<li><p>To account for discrete phenomena, have another type (family) of
“events”, each of which has a stream (finite or infinite) of
occurrences. Each occurrence has an associated time and value.</p>
</li>
<li><p>To come up with the compositional vocabulary out of which all
behaviors and events can be built, play with some examples. Keep
deconstructing into pieces that are more general/simple.</p>
</li>
<li><p>So that you know you’re on solid ground, give the whole model a
compositional foundation, using the technique of denotational
semantics, which just means that (a) each type has a corresponding
simple &amp; precise mathematical type of “meanings”, and (b) each
primitive and operator has a simple &amp; precise meaning as a
function of the meanings of the constituents. Never, ever mix
implementation considerations into your exploration process. If
this description is gibberish to you, consult (a) Denotational
design with type class morphisms, (b) Push-pull functional
reactive programming (ignoring the implementation bits), and (c)
the Denotational Semantics Haskell wikibooks page. Beware that
denotational semantics has two parts, from its two founders
Christopher Strachey and Dana Scott: the easier &amp; more useful
Strachey part and the harder and less useful (for software design)
Scott part.</p>
</li>
</ul>
</blockquote>
<p>There are plenty of examples and information on the <a href="https://github.com/baconjs/bacon.js">github page</a>.</p>
]]></description>
            <link>http://npmawesome.com/posts/2013-11-21-bacon-js</link>
            <guid isPermaLink="true">http://npmawesome.com/posts/2013-11-21-bacon-js</guid>
            <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
            <pubDate>Thu, 21 Nov 2013 23:20:01 GMT</pubDate>
        </item>
    </channel>
</rss>