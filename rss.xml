<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  xmlns:georss="http://www.georss.org/georss"
  xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
  xmlns:media="http://search.yahoo.com/mrss/"
  >
  <channel>
    <title>npm awesome</title>
    <atom:link href="http://feeds.feedburner.com/npmawesome" rel="self" type="application/rss+xml"/>
    <link>http://npmawesome.com</link>
    <description>Daily dose of awesome NPM modules for Node.js, old and new!</description>
    <lastBuildDate>Tue, 20 May 2014 16:41:44 GMT</lastBuildDate>
    <language>en</language>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>2</sy:updateFrequency>
    <generator>awesomeness</generator>
    <pubDate>Tue, 20 May 2014 16:41:44 GMT</pubDate>

    
    
    
      
      
      
      <item>
        <title><![CDATA[longjohn]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-16-longjohn]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-16-longjohn]]></guid>
        <pubDate><![CDATA[Tue, 20 May 2014 04:11:55 GMT]]></pubDate>
        <description><![CDATA[<p>You know that feeling of disapointment when you get an error and the stack trace just abruptly ends and you know for a fact it should be much longer, and much more useful than that?</p>
<pre><code>Error: Error message
    at null._onTimeout (/examples/error-module.js:7:29)
    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)
</code></pre><p>I&#39;m very well familiar with that feeling... Maybe too much? Turns out there&#39;s a way to get much better results in Node with a little bit of magic. Said magic is a module called <a href="https://github.com/mattinsler/longjohn">longjohn</a> by <a href="https://github.com/mattinsler">Matt Insler</a>.</p>
<div class="read-more"></div>

<pre><code>npm install longjohn
</code></pre><h2 id="usage">Usage</h2>
<p>Using <a href="https://github.com/mattinsler/longjohn">longjohn</a> couldn&#39;t get any easier. You just need to <code>require(&#39;longjohn&#39;)</code> and you are all set. The magic that I mentioned above consists of replacing functions like <code>setTimeout</code> and <code>nextTick</code> with patched versions that keep track of the stack as it unfolds and as author suggests, this probably shouldn&#39;t be used in production.</p>
<p>But, after you require <a href="https://github.com/mattinsler/longjohn">longjohn</a>, your short, mildly helpful stack like this:</p>
<pre><code>Error: Error message
    at null._onTimeout (/examples/error-module.js:7:29)
    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)
</code></pre><p>Turns into this:</p>
<pre><code>Error: Error message
    at [object Object].&lt;anonymous&gt; (/examples/error-module.js:7:29)
    at listOnTimeout (timers.js:110:15)
---------------------------------------------
    at delayed (/examples/error-module.js:3:3)
    at delayedError (/examples/error-module.js:7:3)
    at [object Object].&lt;anonymous&gt; (/examples/error-module.js:21:5)
    at listOnTimeout (timers.js:110:15)
---------------------------------------------
    at delayed (/examples/error-module.js:3:3)
    at module.exports (/examples/error-module.js:20:3)
    at Object.&lt;anonymous&gt; (/examples/longjohn.js:2:26)
    at Module._compile (module.js:456:26)
    at Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Module._load (module.js:312:12)
    at Module.runMain (module.js:497:10)
</code></pre><h2 id="closing-thoughts">Closing thoughts</h2>
<p>Getting a full stack is imperative to finding out the root cause of the problem in your code. <a href="https://github.com/mattinsler/longjohn">longjohn</a> addresses that on the Node side. There&#39;s a similiar module that works in the browser called <a href="https://github.com/btford/zone.js/">zone.js</a> by <a href="https://github.com/btford">Brian Ford</a> that I think you should check out as well.</p>
<p>Check out <a href="https://github.com/npmawesome/example-longjohn">example for this article</a> on GitHub.</p>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for May 16, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-16-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-16-links]]></guid>
        <pubDate><![CDATA[Fri, 16 May 2014 16:56:57 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/html5.png" class="hide-on-mobile" style="float: right; width: 150px;"/></p>
<h2 id="articles">Articles</h2>
<ul>
<li><a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/">Introducing Firebase Hosting</a><blockquote>
<p>Once upon a time, in the dark ages of the internet, apps dynamically generated HTML server-side every time a page was requested. This was slow, difficult to scale, and required users to connect to distant servers to get their content.</p>
</blockquote>
</li>
<li><a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/">Cookies vs Tokens. Getting auth right with Angular.JS</a><blockquote>
<p>What&#39;s JSON Web Token? JSON Web Token (JWT, pronounced jot) is a relatively new token format used in space-constrained environments such as HTTP Authorization headers.</p>
</blockquote>
</li>
<li><a href="http://jpadilla.com/post/73791304724/auth-with-json-web-tokens">Auth with JSON Web Tokens</a><blockquote>
<p>There’s a relatively new standard called JSON Web Token that happens to be backed by companies like Firebase, Google, Microsoft, and Zendesk. There are already many libraries to handle encoding and decoding of this tokens in the backend.</p>
</blockquote>
</li>
<li><a href="http://watirmelon.com/2014/05/14/100000-e2e-selenium-tests-sounds-like-a-nightmare">100,000 e2e selenium tests? Sounds like a nightmare!</a><blockquote>
<p>If I had to choose just one, I would definitely choose a comprehensive suite of automated unit tests over a comprehensive suite of end-to-end/system tests any day of the week.</p>
</blockquote>
</li>
<li><a href="http://www.reinteractive.net/posts/186-lessons-learnt-by-building-single-page-applications">Lessons learnt by building Single Page Applications</a><blockquote>
<p>I want to share some of the lessons I have learnt building them, especially what things I found difficult technically. Based on my experience I think the following are common issues that you may encounter when building them.</p>
</blockquote>
</li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="https://github.com/HubSpot/shepherd">Shepherd</a> - guide your users through a tour of your app.</li>
</ul>
<h2 id="startups">Startups</h2>
<ul>
<li><a href="https://citymapper.com/nyc/superrouter?">CityMapper</a> is a pretty slick city route planner available for a small number of cities.</li>
</ul>
<h2 id="youtube">YouTube</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=PT8s_IVWDgw">WebTorrent: Bringing BitTorrent to the Web</a></li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Time for some traffic problems in São Paulo... <a href="http://t.co/d29u5ctJBG">pic.twitter.com/d29u5ctJBG</a></p>&mdash; Patrick Stewart (@SirPatStew) <a href="https://twitter.com/SirPatStew/statuses/466633514482298880">May 14, 2014</a></blockquote>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Today, we are thrilled to introduce &quot;A New Way to Learn Ionic&quot; <a href="http://t.co/CceIQ00TVG">http://t.co/CceIQ00TVG</a> <a href="http://t.co/P97znY5gxb">pic.twitter.com/P97znY5gxb</a></p>&mdash; ionic (@Ionicframework) <a href="https://twitter.com/Ionicframework/statuses/466643147934941184">May 14, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for May 14, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-14-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-14-links]]></guid>
        <pubDate><![CDATA[Wed, 14 May 2014 16:45:09 GMT]]></pubDate>
        <description><![CDATA[<h2 id="articles">Articles</h2>
<ul>
<li><a href="https://medium.com/p/a2010c13d3d5">Getting gulpy</a> - advanced tips for using gulp.js</li>
<li><a href="http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome">Removing user interface complexity, or why React is awesome</a></li>
<li><a href="http://gizmodo.com/someone-finally-designed-a-better-disposable-coffee-cup-1575905762">Someone Finally Designed a Better Disposable Coffee Cup Lid</a> <img src="http://i.kinja-img.com/gawker-media/image/upload/s--E78R8Pma--/gksygb1vboboawlubax0.jpg" alt=""></li>
<li><a href="http://www.theverge.com/google/2014/5/14/5714602/photos-inside-googles-self-driving-cars">Behind the wheel: a look inside Google&#39;s self-driving cars</a> <img src="http://cdn2.vox-cdn.com/uploads/chorus_image/image/33019187/google-car-theverge-1_1020.0_standard_2040.0.jpg" alt=""></li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="https://gist.github.com/sindresorhus/7996717">git hook to run a command after <code>git pull</code> if a specified file was changed</a></li>
<li><a href="http://ricostacruz.com/nprogress/">NProgress.js</a> is a nanoscopic progress bar. Featuring realistic trickle animations to convince your users that something is happening!</li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Our 10 year anniversary is coming up! To help us celebrate, <a href="https://twitter.com/simpleshow">@simpleshow</a> made this incredible video for us - <a href="http://t.co/KFHz5RvQpx">http://t.co/KFHz5RvQpx</a></p>&mdash; Moz (@Moz) <a href="https://twitter.com/Moz/statuses/466618559914065921">May 14, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for May 13, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-13-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-13-links]]></guid>
        <pubDate><![CDATA[Tue, 13 May 2014 16:38:07 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/html5.png" class="hide-on-mobile" style="float: right; width: 150px;"/></p>
<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><a href="http://spencerfry.com/the-domain-market-is-a-mess">The Domain Market is a Mess</a></li>
<li><a href="http://blog.docker.io/2014/05/docker-0-11-release-candidate-for-1-0/">Docker 0.11 is the Release Candidate for 1.0</a></li>
<li><a href="http://www.roussos.cc/2014/05/08/free-your-android/">Free Your Android</a></li>
<li><a href="https://hacks.mozilla.org/2014/05/how-fast-is-pdf-js/">How fast is PDF.js?</a></li>
<li><a href="http://howtonode.org/generators-vs-fibers">Generators vs Fibers</a></li>
<li><a href="http://www.ustream.tv/channel/iss-hdev-payload">Live feed from ISS</a></li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="http://getuikit.com/">UIKit</a> is a lightweight and modular front-end framework for developing fast and powerful web interfaces.</li>
</ul>
<h2 id="apps">Apps</h2>
<ul>
<li><a href="http://www.paintcodeapp.com/">PaintCode 2</a></li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Introducing Synth - A new <a href="https://twitter.com/nodejs">@NodeJS</a> web framework designed just for <a href="https://twitter.com/angularjs">@AngularJS</a>&#10;<a href="http://t.co/7yLOHUittG">http://t.co/7yLOHUittG</a> &#10;via <a href="https://twitter.com/JonathanAbrams">@JonathanAbrams</a> <a href="https://twitter.com/YouTube">@YouTube</a></p>&mdash; PatrickJS (@gdi2290) <a href="https://twitter.com/gdi2290/statuses/464266195739234304">May 8, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[agenda]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-06-agenda]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-06-agenda]]></guid>
        <pubDate><![CDATA[Tue, 06 May 2014 18:30:00 GMT]]></pubDate>
        <description><![CDATA[<p><img class="hide-on-mobile" src="https://avatars2.githubusercontent.com/u/651740?s=400" style="float: right; margin-left: 1em; width: 100px"/>
As you web application grows, there comes a time when you will want to have scheduled jobs. The easiest thing is of course go the <a href="http://en.wikipedia.org/wiki/Cron">cron</a> route. However, maintaining and updating it isn&#39;t so easy, especially if you have more than one server to deal with and you still maybe too young for enterprise level job scheduler. What&#39;s left? Maybe just do some <code>setTimeout</code> calls in process... That doesn&#39;t sound very exciting nor very manageable.</p>
<p>This is where <a href="https://github.com/rschmukler/agenda">agenda</a> by <a href="https://github.com/rschmukler">Ryan Schmukler</a> comes in. <a href="https://github.com/rschmukler/agenda">agenda</a>, to plainly put it, is a light-weight job scheduling library for Node.js. Lets give it a go!</p>
<div class="read-more"></div>

<pre><code>npm install agenda
</code></pre><h2 id="features">Features</h2>
<ul>
<li>Minimal overhead. <a href="https://github.com/rschmukler/agenda">agenda</a> aims to keep its code base small.</li>
<li>MongoDB 2.4+ backed persistance layer.</li>
<li>Scheduling with configurable priority, concurrency, and repeating.</li>
<li>Scheduling via cron or human readable syntax.</li>
<li>Event backed job queue that you can hook into.</li>
</ul>
<h2 id="usage">Usage</h2>
<p>Lets make a basic example that runs a job 10 seconds after the startup:</p>
<pre><code>var Agenda = require(&#39;agenda&#39;);
var agenda = new Agenda({db: {address: &#39;localhost:27017/agenda-example&#39;}});

agenda.define(&#39;greet the world&#39;, function(job, done) {
  console.log(job.attrs.data.time, &#39;hello world!&#39;);
  done();
});

agenda.schedule(&#39;in 10 seconds&#39;, &#39;greet the world&#39;, {time: new Date()});
agenda.start();

console.log(&#39;Wait 10 seconds...&#39;);
</code></pre><p>Check out <a href="http://runnable.com/U2RE8d2YyYk_iaGU/agenda-module-example-for-npmawesome-nodejitsu-and-node-js">functional example on runnable</a>. I like plain English option, but you can also schedule regular running task with cron style expressions like so:</p>
<pre><code>agenda.every(&#39;*/3 * * * *&#39;, &#39;greet the world&#39;);
</code></pre><p><a href="https://github.com/rschmukler/agenda">agenda</a> is also capable of processing jobs from multiple processes. You just have to specify <code>lockLifetime</code> option during the worker definition.</p>
<pre><code>agenda.define(&#39;someJob&#39;, {lockLifetime: 10000}, function(job, cb) {
  //Do something in 10 seconds or less...
});
</code></pre><h2 id="mongo-vs-redis">Mongo vs Redis</h2>
<p>Curious why MongoDB was chosen for something most would use Redis for? <a href="https://github.com/rschmukler">Ryan Schmukler</a> has a few thoughts on this:</p>
<blockquote>
<p>The decision to use Mongo instead of Redis is intentional. Redis is often used for non-essential data (such as sessions) and without configuration doesn&#39;t guarantee the same level of persistence as Mongo (should the server need to be restarted/crash).</p>
<p><a href="https://github.com/rschmukler/agenda">agenda</a> decides to focus on persistence without requiring special configuration of Redis (thereby degrading the performance of the Redis server on non-critical data, such as sessions).</p>
</blockquote>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p><a href="https://github.com/rschmukler/agenda">agenda</a> focuses on setting up and managing regular running tasks such as session purging, email sending, data processing and so on. There are a few alternatives out there:</p>
<ul>
<li><a href="https://github.com/learnboost/kue">kue</a> is a priority job queue backed by redis originally written by <a href="https://github.com/visionmedia">TJ Holowaychuk</a> and is currently maintained by <a href="https://github.com/behrad">Behrad</a></li>
<li><a href="https://github.com/mattpat/node-schedule">node-schedule</a> is a single process, cron-like and not-cron-like job scheduler by <a href="https://github.com/mattpat">Matt Patenaude</a>. It doesn&#39;t have any external dependencies.</li>
</ul>
]]></description>
      </item>
    
  </channel>
</rss>