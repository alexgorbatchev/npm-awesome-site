<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  xmlns:georss="http://www.georss.org/georss"
  xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
  xmlns:media="http://search.yahoo.com/mrss/"
  >
  <channel>
    <title>npm awesome</title>
    <atom:link href="http://feeds.feedburner.com/npmawesome" rel="self" type="application/rss+xml"/>
    <link>http://npmawesome.com</link>
    <description>Daily dose of awesome NPM modules for Node.js, old and new!</description>
    <lastBuildDate>Tue, 22 Apr 2014 14:01:09 GMT</lastBuildDate>
    <language>en</language>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>2</sy:updateFrequency>
    <generator>awesomeness</generator>
    <pubDate>Tue, 22 Apr 2014 14:01:09 GMT</pubDate>

    
    
    
      
      
      
      <item>
        <title><![CDATA[Links for Apr 19, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-19-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-19-links]]></guid>
        <pubDate><![CDATA[Sat, 19 Apr 2014 17:00:00 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/html5.svg" style="float: right; width: 150px;"/></p>
<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><p><a href="http://scotch.io/tutorials/javascript/build-a-restful-api-using-node-and-express-4">Build a RESTful API Using Node and Express 4</a></p>
<blockquote>
<p>With the release of Express 4.0 just a few days ago, lots of our Node apps will have some changes in how they handle routing. With the changes in the Express Router, we have more flexibility in how we can define the routes for our applications.</p>
</blockquote>
</li>
<li><p><a href="http://www.sitepoint.com/controlling-arduino-nodejs-johnny-five/">Controlling an Arduino with NodeJS and Johnny-Five</a></p>
<blockquote>
<p>Firmata and Johnny-Five make it a lot easier for JavaScript developers to get more involved and develop applications that can interact with, respond to and control Arduino powered technology.</p>
</blockquote>
</li>
<li><p><a href="http://alxhill.com/blog/articles/brunch-coffeescript-angular/">Brunch - A build system without the Grunt-work</a></p>
<blockquote>
<p>Brunch compiles, concats and (optionally) minifies your scripts and styles. It can also package JavaScript files into AMDor CommonJS modules. Brunch automatically applies plugins in the correct order to the right files - so with the right plugins, a .coffee file would be converted into a .js file and then minified, with no explicit setup necessary.</p>
</blockquote>
</li>
</ul>
<div class="read-more"></div>

<ul>
<li><p><a href="https://www.youtube.com/watch?v=HY4d-0Kzp68">EmberConf 2014 HTMLBars: The Next-Generation of Templating in Ember.js by Erik Bryn and Kris Selden</a></p>
<blockquote>
<p><img src="https://i1.ytimg.com/vi/HY4d-0Kzp68/maxresdefault.jpg" style="width: 400px" /></p>
</blockquote>
</li>
<li><p><a href="https://www.youtube.com/watch?v=2awbKQ2DLRE#t=211">Pyro Board: 2D Rubens&#39; Tube!</a></p>
<blockquote>
<p><img src="https://i1.ytimg.com/vi/2awbKQ2DLRE/maxresdefault.jpg" style="width: 400px" /></p>
</blockquote>
</li>
<li><p><a href="http://www.buzzfeed.com/mjs538/completely-surreal-pictures-of-americas-abandoned-malls">Completely Surreal Photos Of America’s Abandoned Malls</a> and a <a href="https://www.youtube.com/watch?v=ZAo2ue6s5Bc">video</a></p>
<blockquote>
<p><img src="http://s3-ec.buzzfed.com/static/2014-04/enhanced/webdr06/2/10/enhanced-29364-1396450428-10.jpg" style="width: 400px" /></p>
</blockquote>
</li>
<li><p><a href="http://www.buzzfeed.com/ryanhatesthis/all-hail-the-mighty-pizza-cake">Pizza Cake</a></p>
<blockquote>
<p><img src="http://s3-ec.buzzfed.com/static/2014-04/enhanced/webdr03/18/12/enhanced-buzz-wide-14629-1397837404-8.jpg" style="width: 400px" /></p>
</blockquote>
</li>
</ul>
<h2 id="github">Github</h2>
<ul>
<li><a href="https://github.com/salomvary/soundcleod">SoundCleod</a> is a Mac OS X application which brings SoundCloud to the desktop without using a browser.</li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>A NodeJS Perspective on What’s New in MongoDB 2.6, Part I: Text Search <a href="http://t.co/RCjrLHd2u0">http://t.co/RCjrLHd2u0</a></p>&mdash; MongoDB (@MongoDB) <a href="https://twitter.com/MongoDB/statuses/457562812223852545">April 19, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>omg shut up and take my money! <a href="https://t.co/UCVqDsakuJ">https://t.co/UCVqDsakuJ</a></p>&mdash; Alex Gorbatchev (@alexgorbatchev) <a href="https://twitter.com/alexgorbatchev/statuses/457219682164940800">April 18, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for Apr 18, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-18-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-18-links]]></guid>
        <pubDate><![CDATA[Fri, 18 Apr 2014 17:00:00 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/html5.svg" style="float: right; width: 150px;"/></p>
<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><p><a href="http://googleresearch.blogspot.co.uk/2014/04/lens-blur-in-new-google-camera-app.html">Lens Blur in the new Google Camera app</a></p>
<blockquote>
<p>Having computed the depth map, we can re-render the photo, blurring pixels by differing amounts depending on the pixel’s depth, aperture and location relative to the focal plane. The focal plane determines which pixels to blur, with the amount of blur increasing proportionally with the distance of each pixel to that focal plane. This is all achieved by simulating a physical lens using the thin lens approximation.</p>
</blockquote>
</li>
<li><p><a href="http://www.sitepoint.com/controlling-arduino-nodejs-johnny-five/">Controlling an Arduino with NodeJS and Johnny-Five</a></p>
<blockquote>
<p>This video aims to help those new to Arduinos and NodeJS understand the basics of getting started. I’ll provide an overview of what you’ll need to do in order to get a Node application speaking to an Arduino using the Johnny-Five JavaScript framework. By the end we will have used the power of JavaScript to turn an LED light on and off!</p>
</blockquote>
</li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="http://chieffancypants.github.io/angular-hotkeys/">AngularHotkeys.js</a> - configuration-centric keyboard shortcuts for your angular apps.</li>
<li><a href="https://github.com/lukasz-zak/disqus-here">disqusHere</a> - Angular directive for embeding Disqus comments on your site.</li>
<li><a href="https://github.com/flowjs/ng-flow">Flow.js</a> is a JavaScript library providing multiple simultaneous, stable and resumable uploads via the HTML5 File API. Library does not require third party dependencies.</li>
<li><a href="https://github.com/AlexNisnevich/untrusted">Untrusted —or— the Continuing Adventures of Dr. Eval</a> is an exciting Meta-Javascript Adventure Game wherein you guide the dashing, steadfast Dr. Eval through a mysterious MACHINE CONTINUUM, wherein, using only his trusty computer and the TURING-COMPLETE power of Javascript, he must literally ALTER HIS REALITY in order to find his freedom! You must literally edit and re-execute the very Javascript running the game in your browser to save Dr. Eval from this dark and confusing reality!</li>
</ul>
<h2 id="unix">Unix</h2>
<ul>
<li><code>openssl rand -base64 32</code> to generate a “random” string.</li>
</ul>
<h2 id="misc">Misc</h2>
<ul>
<li><a href="http://character-code.com/arrows-html-codes.php">Arrows HTML Code and Unicode Hexadecimal</a> ↑↑↓↓←→←→</li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet"><p>Can’t wait until gulp 4 for non-dependent task support? Try run-sequence! <a href="https://t.co/PPyJnjA4Jz">https://t.co/PPyJnjA4Jz</a></p>&mdash; gulp (@gulpjs) <a href="https://twitter.com/gulpjs/statuses/457120895102754816">April 18, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[terminal-menu]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-18-terminal-menu]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-18-terminal-menu]]></guid>
        <pubDate><![CDATA[Fri, 18 Apr 2014 16:52:03 GMT]]></pubDate>
        <description><![CDATA[<p>Lets continue building out awesome CLI (command line interface) tool. Previously we have discussed how to <a href="/npmawesome-parsing-command-line-options-with-yargs/">take in command line arguments</a>, <a href="/npmawesome-table-formatting-in-the-terminal-with-cli-tables/">output tabular data</a> and <a href="/npmawesome-progress-reporting-in-cli-applications/">display progress of long running tasks</a>.</p>
<p><img class="hide-on-mobile" src="https://avatars2.githubusercontent.com/u/12631?s=400" style="float: right; margin-left: 1em; width: 100px;"/>
Prompting a user with options and asking to pick one is a fairly common scenario. Most of the time you get to read the options and press associated key. That works, but we are human and like pretty interfaces. Same thing can be achieved with a common menu interface. This is where <a href="https://github.com/substack/terminal-menu">terminal-menu</a> by <a href="https://github.com/substack">James Halliday</a> comes in.</p>
<div class="read-more"></div>

<pre><code>npm install terminal-menu
</code></pre><h2 id="features">Features</h2>
<p>There are a few options available to customize the menu such as:</p>
<ul>
<li>Background color</li>
<li>Foreground color</li>
<li>Position</li>
<li>Width</li>
<li>Padding</li>
</ul>
<h2 id="usage">Usage</h2>
<pre><code>var terminalMenu = require(&#39;terminal-menu&#39;);

var menu = terminalMenu({
  width: 60,
  x: 4,
  y: 2
});

menu.reset();
menu.write(&#39;Recently on our blog\n&#39;);
menu.write(&#39;-------------------------\n&#39;);

menu.add(&#39;How to setup a multi-user Ghost blog&#39;);
menu.add(&#39;Patched PaaS Vulnerability&#39;);
menu.add(&#39;npmawesome: Progress reporting in CLI applications&#39;);
menu.add(&#39;Improved SSL experience for private npm&#39;);
menu.add(&#39;npmawesome: Table formatting in the terminal with...&#39;);

menu.on(&#39;select&#39;, function (label, index) {
  menu.close();
  console.log(&#39;You selected:&#39;);
  console.log(index, label);
});

menu.createStream().pipe(process.stdout);
</code></pre><div style="padding: 13px 10px 10px; background: black; text-align: center; border-radius: 3px"><img src="http://npmawesome.com/images/posts/terminal-menu/terminal-menu01.gif"/></div>

<p>Check out interactive example on <a href="http://runnable.com/U0YDx3Bx9a1ntoDb/terminal-menu-example-for-npm-awesome-nodejitsu-node-js-and-cli">runnable</a>.</p>
<h2 id="other-modules-to-checkout">Other modules to checkout</h2>
<p>Generally there is a list of alternative modules here, but as strange as it sounds, I couldn&#39;t find any. If you know of one, please drop us a line.</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>Over the last couple of CLI related posts we&#39;ve progressively been improving user experience of our terminal application. I feel that you can never spend too much time doing this, but you can definetely spend too little. I love little things that feel good. <a href="https://github.com/substack/terminal-menu">terminal-menu</a> was created for <a href="https://github.com/substack/stream-adventure">stream-adventure</a>, an educational terminal based stream adventure game for Node.js and <a href="https://github.com/substack/stream-adventure">stream-adventure</a> in turn inspired <a href="http://nodestreams.com/">browser based version</a> written by John Resig of the jQuery fame. Both are pretty cool and fun!</p>
<blockquote class="twitter-tweet" lang="en"><p>everybody going to nodeconf should make sure to npm install -g stream-adventure</p>&mdash; James Halliday (@substack) <a href="https://twitter.com/substack/statuses/350097531730006017">June 27, 2013</a></blockquote>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/maxogden">@maxogden</a> <a href="https://twitter.com/substack">@substack</a> Would love your feedback on <a href="http://t.co/PX0oG8CtB7">http://t.co/PX0oG8CtB7</a> was inspired by stream adventure! More info: <a href="http://t.co/c1eQGB53Lm">http://t.co/c1eQGB53Lm</a></p>&mdash; John Resig (@jeresig) <a href="https://twitter.com/jeresig/statuses/401419183230951424">November 15, 2013</a></blockquote>

]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for Apr 17, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-17-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-17-links]]></guid>
        <pubDate><![CDATA[Fri, 18 Apr 2014 03:00:00 GMT]]></pubDate>
        <description><![CDATA[<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><p><a href="http://techcrunch.com/2014/04/14/sf-housing/">How Burrowing Owls Lead To Vomiting Anarchists (Or SF’s Housing Crisis Explained)</a></p>
<blockquote>
<p>Homeowners have a strong economic incentive to restrict supply because it supports price appreciation of their own homes.
…
Then the rent-controlled tenants care far more about eviction protections than increasing supply. That’s because their most vulnerable constituents are paying rents that are so far below market-rate, that only an ungodly amount of construction could possibly help them. Plus, that construction wouldn’t happen fast enough — especially for elderly tenants.</p>
<p>So we’re looking at as much as 80 percent of the city that isn’t naturally oriented to add to the housing stock.</p>
</blockquote>
</li>
<li><p><a href="http://insights.ubuntu.com/news/ubuntu-14-04-lts-the-cloud-platform-of-choice/">Ubuntu 14.04 LTS: the cloud platform of choice</a></p>
<blockquote>
<p>Canonical today announces Ubuntu 14.04 LTS will be released on 17th April 2014, bringing a new level of reliability, performance and interoperability to cloud and scale out environments with support and maintenance for five years.</p>
</blockquote>
</li>
<li><p><a href="https://blog.indutny.com/9.heartbleed">Cracking Cloudflare&#39;s heartbleed challenge</a></p>
<blockquote>
<p>… it won&#39;t produce any result immediately, it took me 3 hours and a certain amount of luck to obtain the key in a Cloudflare&#39;s challenge.</p>
</blockquote>
</li>
<li><p><a href="http://theory.stanford.edu/~amitp/GameProgramming/AStarComparison.html">Introduction to A*</a></p>
<blockquote>
<p>Movement for a single object seems easy. Pathfinding is complex.</p>
</blockquote>
</li>
<li><p><a href="http://codecondo.com/10-web-application-frameworks-for-node-js/">12 Web Application Frameworks for Node.js</a></p>
</li>
<li><p><a href="https://tails.boum.org/">Tails</a> is a live operating system, that you can start on almost any computer from a DVD, USB stick, or SD card. It aims at preserving your privacy and anonymity.</p>
</li>
</ul>
<div class="read-more"></div>

<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet"><p>Hello. My name is Ethan Welborn, and I am a <a href="https://twitter.com/gulpjs">@gulpjs</a>-aholic. Please contact me if you can provide assistance... or badass tasks. <a href="https://twitter.com/search?q=%23wtfwow&amp;src=hash">#wtfwow</a></p>&mdash; Ethan Welborn (@WelbornEthan) <a href="https://twitter.com/WelbornEthan/statuses/456171513905831937">April 15, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Our <a href="https://twitter.com/gulpjs">@gulpjs</a> webapp generator just got another round of updates: <a href="https://t.co/soUQV3bnNl">https://t.co/soUQV3bnNl</a>. <a href="http://t.co/S1nduFgVGJ">pic.twitter.com/S1nduFgVGJ</a> via <a href="https://twitter.com/yeoman">@yeoman</a></p>&mdash; Siancore (@siancore) <a href="https://twitter.com/siancore/statuses/456463584835665920">April 16, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Comparing async control flow tools: <a href="https://twitter.com/search?q=%23nodejs&amp;src=hash">#nodejs</a> Promises, Try/Catch and <a href="https://twitter.com/angularjs">@angularjs</a> Zone.js by <a href="https://twitter.com/alexgorbatchev">@alexgorbatchev</a> - <a href="http://t.co/5BrNEisgH7">http://t.co/5BrNEisgH7</a></p>&mdash; StrongLoop (@StrongLoop) <a href="https://twitter.com/StrongLoop/statuses/456453560532606976">April 16, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Comparing Node.js Promises, Try/Catch, Angular Zone.js and yes, Zone]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-16-promises-trycatch-zones]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-16-promises-trycatch-zones]]></guid>
        <pubDate><![CDATA[Wed, 16 Apr 2014 17:01:54 GMT]]></pubDate>
        <description><![CDATA[<h1 id="handling-errors-in-async-flow">Handling errors in async flow</h1>
<p>In the <a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/">previous article</a> we&#39;ve talked about managing async flow and escaping the <a href="http://callbackhell.com/">callback hell</a>.</p>
<h2 id="the-problem">The problem</h2>
<p>Handling errors in asynchronous flow is pretty straightforward and easy. Handling errors in asynchronous flow in a clean and easy to follow manner - not so much.</p>
<p>Lets look at the following code:</p>
<pre><code>function updateDependencies(packageName, done) {
  findPackage(packageName, function(err, content) {
    if (err) {
      done(err);
    }
    else {
      try {
        package = JSON.parse(content);
      }
      catch (e) {
        done(e);
      }

      findDependencies(package, function(err, dependencies)) {
        if (err) {
          done(err);
        }
        else {
          processDependencies(dependencies, function(err) {
            if (err) {
              done(err);
            }
            else {
              done(null, dependencies);
            }
          });
        }
      });
    }
  });
}
</code></pre><p>We are covering all possible failure cases here using combination of <code>try/catch</code> and callback error handling, but boy do we repeat ourselves over and over again. Lets try and rewrite this!</p>
<div class="read-more"></div>

<h2 id="error-handling-using-try-catch">Error handling using try/catch</h2>
<pre><code>function updateDependencies(packageName, done) {
  try {
    findPackage(packageName, function(err, content) {
      if (err) throw err;

      findDependencies(JSON.parse(content), function(err, dependencies)) {
        if (err) throw err;

        processDependencies(dependencies, function(err) {
          if (err) throw err;

          done(null, dependencies);
        });
      });
    });
  } catch (e) {
    done(e);
  }
}
</code></pre><p>Nice! That&#39;s much better. However, if we run this now, no errors will be caught. What&#39;s going on here?</p>
<p><code>try/catch</code> idiom works very well when you have fully synchronous code, but asynchronous operations render it useless.</p>
<p>The outer <code>try/catch</code> block will never catch anything because <code>findPackage</code> is asynchronous. The function will begin its course while the outer stack runs through and gets to the last line without any errors.</p>
<p>If an error occurs at some point in the future inside asynchronous <code>findPackage</code> - <strong>nothing will be caught</strong>.</p>
<p><img src="http://npmawesome.com/images/posts/promises-trycatch-zones/catch-fail.gif"/></p>
<p>Not useful.</p>
<h2 id="error-handling-using-promises">Error handling using promises</h2>
<p>In the <a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/">previous article</a> we&#39;ve talked about managing asynchronous flow and escaping the <a href="http://callbackhell.com/">callback hell</a> with promises. Lets put this promises to work here and rewrite this function.</p>
<p>For the sake of moving forward quicker lets assume we are using <a href="https://github.com/petkaantonov/bluebird">Bluebird</a> promises library and that all our APIs now return promises instead of taking callbacks:</p>
<pre><code>function updateDependencies(packageName) {
  return findPackage(packageName)
    .then(JSON.parse)
    .then(findDependencies)
    .then(processDependencies)
    .then(res.send)
    ;
}
</code></pre><p>Oh wow, that is so much nicer! Right? Right!</p>
<p>But Alex, &quot;we&#39;ve lost our error handling&quot;, you might say. That&#39;s right, we don&#39;t need to do anything special here to propagate error because we return a promise and there&#39;s built in support for error flow. Lets see how error handling might look like with promises:</p>
<pre><code>button.addEventListener(&quot;click&quot;, function() {
  updateDependencies(&quot;packageName&quot;)
    .then(function(dependencies) {
      output.innerHTML = dependencies.join(&quot;\n&quot;);
    })
    .catch(function(err) {
      output.innerHTML = &quot;There was an error&quot;;
    });
});
</code></pre><p>Very slick, I&#39;m a fan!</p>
<h2 id="error-using-zones">Error using Zones</h2>
<p>Handling rejected promises works really well when we are in full control of the flow. But what happens if some third-party code throws an error during an asynchronous operation? Lets look at another example:</p>
<pre><code>function thirdPartyFunction() {
  function fakeXHR() {
    throw new Error(&quot;Invalid dependencies&quot;);
  }

  setTimeout(fakeXHR, 100);
}

function main() {
  button.on(&quot;click&quot;, function onClick() {
    thirdPartyFunction();
  });
}

main();
</code></pre><p>In this case, we wouldn&#39;t have a chance to catch and process the error. Generally, the only recourse here is using half baked <code>window.onerror</code> that doesn&#39;t give you any stack information at all. At least you can log something, right? Not that there&#39;s much to log:</p>
<pre><code>Uncaught Error: Invalid dependencies
    fakeXHR
</code></pre><p>Up until recently that was pretty much all we had. However, this january <a href="https://github.com/btford">Brian Ford</a> of the <a href="http://angularjs.org">angular.js</a> fame has released <a href="https://github.com/btford/zone.js/">Zone.js</a> which aims to help tackle this.</p>
<p>Basically, <a href="https://github.com/btford/zone.js/">Zone.js</a> <strong>overrides all asynchronous functions in the browser</strong> with custom implementations which allows it to keep track of the context. Dangerous? Yes! But as we say in Soviet Russia, &quot;he who doesn&#39;t risk never gets to drink champagne&quot; (or in English &quot;nothing ventured, nothing gained&quot;).</p>
<p>Anyways, lets look at how this works. Assuming you have included <code>zones.js</code> and <code>long-stack-trace-zone.js</code> as per the docs, we just change <code>main()</code> call to:</p>
<pre><code>zone.fork(Zone.longStackTraceZone).run(main);
</code></pre><p>Refresh, click the button, and now our stack looks like this:</p>
<pre><code>Error: Invalid dependencies
    at fakeXHR (script.js:7:11)
    at Zone.run (zones.js:41:19)
    at zoneBoundFn (zones.js:27:19)
--- Tue Mar 25 2014 21:20:32 GMT-0700 (PDT) - 106ms ago
Error
    at Function.getStacktraceWithUncaughtError (long-stack-trace-zone.js:24:32)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:70:43)
    at Zone.bind (zones.js:25:21)
    at zone.(anonymous function) (zones.js:61:27)
    at marker (zones.js:66:25)
    at thirdPartyFunction (script.js:10:3)
    at HTMLButtonElement.onClick (script.js:15:5)
    at HTMLButtonElement.x.event.dispatch (jquery.js:5:10006)
    at HTMLButtonElement.y.handle (jquery.js:5:6789)
    at Zone.run (zones.js:41:19)
--- Tue Mar 25 2014 21:20:32 GMT-0700 (PDT) - 1064ms ago
Error
    at getStacktraceWithUncaughtError (long-stack-trace-zone.js:24:32)
    at Function.Zone.getStacktrace (long-stack-trace-zone.js:37:15)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:70:43)
    at Zone.bind (zones.js:25:21)
    at HTMLButtonElement.obj.addEventListener (zones.js:132:37)
    at Object.x.event.add (jquery.js:5:7262)
    at HTMLButtonElement.&lt;anonymous&gt; (jquery.js:5:14336)
    at Function.x.extend.each (jquery.js:4:4575)
    at x.fn.x.each (jquery.js:4:1626)
    at x.fn.extend.on (jquery.js:5:14312)
</code></pre><p>What the what?? Cool! We can now see that the relevant code path started in our <code>onClick</code> method and went into <code>thirdPartyFunction</code>.</p>
<p>The cool part is, since <a href="https://github.com/btford/zone.js/">Zone.js</a> overrides browser methods, it doesn&#39;t matter what libraries you use. It just works.</p>
<h2 id="another-async-flow-control-project-called-zones-">Another async flow control project called Zones?</h2>
<p>Yep, StrongLoop’s <a href="https://github.com/piscisaureus">Bert Belder</a> has been working on a similar idea called “<a href="https://www.npmjs.org/package/zone">Zone</a>“ for a few months now. (Not to be confused with the Angular <a href="https://github.com/btford/zone.js/">Zone.js</a> project we&#39;ve just been discussing, which shares the same name and some technical characteristics. Yeah, it’s a little confusing, but we are actively working with <a href="https://github.com/btford">Brian Ford</a> on how to potentially bring together these two projects for the mutual benefit of the JavaScript and Node communities. Stay tuned!)</p>
<h2 id="why-a-node-specific-zones-project-">Why a Node-specific Zones project?</h2>
<p>Currently, there are a couple of problems that make it really hard to deal with asynchronous control flow in Node that Zones looks to address. Specifically:</p>
<ul>
<li>Stack traces are useless when an asynchronous function fails.</li>
<li>Asynchronous functions are hard to compose into more high-level APIs. Imagine implementing a simple asynchronous API like bar(arg1, arg2, cb) where cb is the error-first callback that the user of the API specifies. To implement this correctly you must take care:<ul>
<li>to always call the callback</li>
<li>don’t call the callback more than once</li>
<li>don’t synchronously throw and also call the callback</li>
<li>don’t call the callback synchronously</li>
</ul>
</li>
<li>It is difficult to handle errors that are raised asynchronously. Typically node will crash. If the uses chooses to ignore the error, resources may leak. Zones should make it easy to handle errors and to avoid resource leaks.</li>
<li>Sometimes there is a need to associate user data to an asynchronous flow. There is currently no way to do this.</li>
</ul>
<p>Want to learn more about Zones? Stay tuned for more information in the coming weeks. Follow us on <a href="https://twitter.com/StrongLoop">Twitter</a> or subscribe to our <a href="http://strongloop.com/newsletter-registration/">newsletter</a> to make sure you don’t miss the announcements.</p>
<h2 id="what-s-next-">What&#39;s next?</h2>
<ul>
<li>Watch <a href="http://www.youtube.com/watch?v=3IqtmUscE_U">Brian&#39;s presentation</a> from ngconf 2014, it&#39;s pretty cool!</li>
<li>Add <a href="https://github.com/btford/zone.js/">Zone.js</a> to your application.</li>
<li>Profit!</li>
</ul>
<p><img src="http://npmawesome.com/images/posts/promises-trycatch-zones/party.gif"/></p>
]]></description>
      </item>
    
  </channel>
</rss>