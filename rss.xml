<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  xmlns:georss="http://www.georss.org/georss"
  xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
  xmlns:media="http://search.yahoo.com/mrss/"
  >
  <channel>
    <title>npm awesome</title>
    <atom:link href="http://feeds.feedburner.com/npmawesome" rel="self" type="application/rss+xml"/>
    <link>http://npmawesome.com</link>
    <description>Daily dose of awesome NPM modules for Node.js, old and new!</description>
    <lastBuildDate>Wed, 11 Jun 2014 21:31:17 GMT</lastBuildDate>
    <language>en</language>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>2</sy:updateFrequency>
    <generator>awesomeness</generator>
    <pubDate>Wed, 11 Jun 2014 21:31:17 GMT</pubDate>

    
    
    
      
      
      
      <item>
        <title><![CDATA[Links for June 6, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-06-06-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-06-06-links]]></guid>
        <pubDate><![CDATA[Sat, 07 Jun 2014 00:39:31 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/></p>
<h2 id="articles">Articles</h2>
<ul>
<li><a href="https://stripe.com/blog/open-source-retreat-grantees">Stripe Open Source Retreat Grantees</a><blockquote>
<p>We received about 120 applications in total. Since we only had a few slots (we in fact were originally going to do two, but we had so much trouble choosing we ended up creating another slot), there were a large number of really awesome projects we had to turn away.</p>
</blockquote>
</li>
<li><a href="http://www.vox.com/2014/5/29/5758542/time-for-the-US-to-use-the-metric-system">It&#39;s time for the US to use the metric system</a><blockquote>
<p>The United States is the last remaining industrialized nation with no formal commitment to going metric. America&#39;s position is causing unnecessary isolation. It&#39;s an impediment to trade and puts the United States at a disadvantage.</p>
</blockquote>
</li>
<li><a href="https://www.linkedin.com/today/post/article/20140524020851-6170480-how-paypal-and-reddit-faked-their-way-to-traction?_mSplash=1">How Paypal and Reddit faked their way to traction</a><blockquote>
<p>A platform is useless without complementary products. Marketplaces, especially, are dead without sellers posting on them. To solve the chicken-egg problem, some marketplaces create fake supply to attract buyers.</p>
</blockquote>
</li>
<li><a href="http://www.slate.com/articles/technology/technology/2014/06/i_sold_my_startup_for_25_5_million_here_s_how_i_did_it.html">I Sold My Startup for $25.5 Million</a><blockquote>
<p>When I shared the news, the team stared blankly at me, unsure if it was a good thing or a bad thing.</p>
</blockquote>
</li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="http://wicky.nillia.ms/headroom.js/">Headroom.js</a> is a lightweight, high-performance JS widget (with no dependencies!) that allows you to react to the user&#39;s scroll. The header on this site is a living example, it slides out of view when scrolling down and slides back in when scrolling up.</li>
<li><a href="http://jessepollak.github.io/card/">Card</a> makes your credit card form better in one line of code.</li>
<li><a href="https://github.com/cory/maury">maury</a> is an example of processing and visualizing ship course data from open ICOADS Maury data set.</li>
</ul>
<h2 id="youtube">YouTube</h2>
<ul>
<li><a href="http://www.youtube.com/watch?v=lRyRuQdjAww">Introduction to gulp.js</a></li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>In May, <a href="https://twitter.com/tjholowaychuk">@tjholowaychuk</a> was fully or partially responsible for 32MM downloads, or about 10% of all downloads in May: <a href="http://t.co/AlxA8XVGNN">http://t.co/AlxA8XVGNN</a></p>&mdash; Laurie Voss (@seldo) <a href="https://twitter.com/seldo/statuses/474678710390751232">June 5, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for May 29, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-29-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-29-links]]></guid>
        <pubDate><![CDATA[Thu, 29 May 2014 16:50:42 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/></p>
<h2 id="articles">Articles</h2>
<ul>
<li><a href="http://socket.io/blog/introducing-socket-io-1-0/">Introducing Socket.IO 1.0</a><blockquote>
<p>The first version of Socket.IO was created shortly after Node.JS made its first appearance. I had been looking for a framework that easily enabled me to push data from a server to a client for a long time, and even had tried other approaches to server-side JavaScript.</p>
</blockquote>
</li>
<li><a href="http://googlewebmastercentral.blogspot.ca/2014/05/understanding-web-pages-better.html">Understanding web pages better</a><blockquote>
<p>… we decided to try to understand pages by executing JavaScript. It’s hard to do that at the scale of the current web, but we decided that it’s worth it. We have been gradually improving how we do this for some time. In the past few months, our indexing system has been rendering a substantial number of web pages more like an average user’s browser with JavaScript turned on.</p>
</blockquote>
</li>
<li><a href="https://github.com/substack/browserify-handbook">Browserify Handbook</a> is a great resource for beginners and pros on organizing node apps and modules. Very good read.</li>
<li><a href="http://davidwalsh.name/device-state-detection-css-media-queries-javascript">Device State Detection with CSS Media Queries and JavaScript</a><blockquote>
<p>Being able to detect device state at any given moment is important for any number of reasons and so it&#39;s important that web app CSS and JavaScript are in sync with each other.</p>
</blockquote>
</li>
<li><a href="http://hueniversedotcom.files.wordpress.com/2013/01/hapi-hapi-joi-joi.pdf">hapi hapi joi joi</a> - fantastic slides!</li>
<li><a href="http://bocoup.com/weblog/javascript-relay-with-johnny-five/">Relay Control with Johnny-Five on Node.js</a><blockquote>
<p>DO NOT TOUCH ANY PART OF THE RELAY WHILE IT&#39;S PLUGGED INTO THE WALL.</p>
</blockquote>
</li>
<li><a href="http://jdmaturen.github.io/2013/how-much-is-your-startup-stock-worth.html">How much is your startup stock worth?</a><blockquote>
<p>You can’t get rich on salary.</p>
</blockquote>
</li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="http://www.objectplayground.com/">Object Playground</a> is a tool for visualizing and experimenting with JavaScript object relationships.</li>
<li><a href="https://code.google.com/p/pdfium/">PDFium</a> is an open-source PDF rendering engine that is used in Google Chrome.</li>
<li><a href="http://www.vittoriozaccaria.net/dyn-css/">DynCSS</a> - simple, dynamic CSS rules to give life to your sites.</li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>This is an amazing <a href="https://twitter.com/StackOverflow">@Stackoverflow</a> answer about Angular (and using jQuery) <a href="http://t.co/pXoyf0zuN6">http://t.co/pXoyf0zuN6</a></p>&mdash; Sara Chipps (@SaraJChipps) <a href="https://twitter.com/SaraJChipps/statuses/468769556765614080">May 20, 2014</a></blockquote>

<h2 id="misc">Misc</h2>
<ul>
<li><a href="http://seanfphotography.blogspot.ca/2014/05/afrikaburm-trickster-2014.html?spref=tw">AfrikaBurm - Trickster - 2014 photos</a> - some great photos from the AfrikaBurm festival.</li>
<li><a href="http://openfontlibrary.org/en/font/fantasque-sans-mono">Fantasque Sans Mono</a><blockquote>
<p>A programming font, designed with functionality in mind, and with some wibbly-wobbly handwriting-like fuzziness that makes it unassumingly cool.</p>
</blockquote>
</li>
</ul>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Joi]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-23-joi]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-23-joi]]></guid>
        <pubDate><![CDATA[Fri, 23 May 2014 19:41:03 GMT]]></pubDate>
        <description><![CDATA[<p><img src="https://camo.githubusercontent.com/9dd0f88c6cdb8b7c034ac5e5cce0e4bbdc8de19e/68747470733a2f2f7261772e6769746875622e636f6d2f7370756d6b6f2f6a6f692f6d61737465722f696d616765732f6a6f692e706e67" width="100" align="right"/>
Object validation is a tricky thing. It sounds pretty simple when you first think about it, yet there are a ton of libraries that try to do it. Why is that? I feel like there are just alot of way to approach the subject. <a href="https://github.com/spumko/joi">Joi</a> is a schema validation library that came out of the <a href="http://www.walmartlabs.com/">Walmart Labs</a> efforts and more specifically power validation in the <a href="http://spumko.github.io/">hapi</a> server framework.</p>
<p>Lets check it out!</p>
<div class="read-more"></div>

<pre><code>npm install joi
</code></pre><h2 id="usage">Usage</h2>
<p><a href="https://github.com/spumko/joi">Joi</a> works by defining a schema. You can validate a single string or number:</p>
<pre><code>var Joi = require(&#39;joi&#39;);

// will fail
Joi.string().validate(10, console.log);

// also will fail
Joi.string().email().validate(&#39;hello+gmail.com&#39;, console.log);

// will pass
Joi.string().email().validate(&#39;hello+world@gmail.com&#39;, console.log);
</code></pre><p>You can validate a basic plain schema</p>
<pre><code>var schema = {counter: Joi.number().min(1).max(10).required()};

// will fail
Joi.validate({counter: 0}, schema, console.log);

// will pass
Joi.validate({counter: 5}, schema, console.log);
</code></pre><p>Finally, you can do a some pretty complicated validation with fields depending on each other:</p>
<pre><code>var schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(30).required(),
    password: Joi.string().regex(/[a-zA-Z0-9]{3,30}/),
    confirmation: Joi.ref(&#39;password&#39;)
  })
  .with(&#39;password&#39;, &#39;confirmation&#39;);

// will fail because `foo` isn&#39;t in the schema at all
Joi.validate({foo: 1}, schema, console.log);

// will fail because `confirmation` is missing
Joi.validate({username: &#39;alex&#39;, password: &#39;qwerty&#39;}, schema, console.log);

// will pass
Joi.validate({
  username: &#39;alex&#39;, password: &#39;qwerty&#39;, confirmation: &#39;qwerty&#39;
}, schema, console.log);
</code></pre><h2 id="closing-thoughts">Closing thoughts</h2>
<p>Here are some other modules you might want to evaluate:</p>
<ul>
<li><a href="https://github.com/chriso/validator.js">validator.js</a> is a string validation and sanitization module by <a href="https://github.com/chriso">Chris O&#39;Hara</a>.</li>
<li><a href="http://www.finitio.io/">finito</a> is a language for capturing information structure by <a href="https://github.com/llambeau">Louis Lambeau</a>.</li>
<li><a href="https://github.com/Atinux/schema-inspector">schema-inspector</a> is a module to sanitize and validate objects by <a href="https://github.com/Atinux">Sébastien Chopin</a> (<a href="http://npmawesome.com/posts/2014-01-24-schema-inspector/">previously featured on npmawesome.com</a>).</li>
</ul>
<p>Finally, check out <a href="https://github.com/npmawesome/example-joi">source code</a> for this article on GitHub and an <a href="http://runnable.com/U31mW3RA_pBu7oN-/schema-validation-with-joi-for-node-js-npmawesome-and-nodejitsu">interative example</a> on Runnable.</p>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[changelog]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-23-changelog]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-23-changelog]]></guid>
        <pubDate><![CDATA[Fri, 23 May 2014 18:30:00 GMT]]></pubDate>
        <description><![CDATA[<p><img class="hide-on-mobile" src="https://avatars2.githubusercontent.com/u/84792?s=400" width="150" align="right" hspace="10"/></p>
<p>You fixed <em>all</em> the bugs, closed some security holes and documented new features in your project. In other words - you did a great job and the next release is ready for the roll-out. But you&#39;re not done just yet! No? What else? You have to update the changelog file, bump the version in the respective <code>package.json</code> and create a <code>git tag</code> first. Hm, many steps, right? No more! <a href="https://github.com/defunctzombie/changelog">changelog</a> by <a href="https://github.com/defunctzombie">Roman Shtylman</a> is here to save you.</p>
<div class="read-more"></div>

<p>Personally I&#39;m not just a huge fan of the concept behind <a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html">Readme Driven Development</a> but also of planning releases in a changelog file. If this is your workflow as well, you will benefit from <a href="https://github.com/defunctzombie/changelog">changelog</a> - you don&#39;t have to adjust your changelog when releasing a new version by hand. It&#39;s there, anyways, as described above.</p>
<p>The release workflow consists of many separate tasks which don&#39;t have to be executed manually. They can be handled by <a href="https://github.com/defunctzombie/changelog">changelog</a>. Let&#39;s take a look:</p>
<pre><code>npm install defunctzombie/changelog
</code></pre><h2 id="initialization">Initialization</h2>
<p>If you starting a new project you will want to create a new changelog. Execute:</p>
<pre><code>changelog --init
</code></pre><p>This will create an empty <code>HISTORY.md</code> file for you which has the following structure:</p>
<pre><code># UNRELEASED

  * initial
</code></pre><p>The <code>UNRELEASED</code> section is for all your changes you made or will make in the version you are working on. Look at this as a personal project blog where you keep track of every <em>unreleased</em> change. No more external <em>todo applications</em> or what have you. Everything is in the context you are working in – your project.</p>
<h2 id="release">Release</h2>
<p>Let&#39;s say your product is ready for prime time and you want to release the <em>1.0.0</em> version (OMG!):</p>
<pre><code>changelog --release 1.0.0
</code></pre><p>This will will trigger <code>changelog</code> to perform the following steps:</p>
<ol>
<li>Convert the first <code>UNRELEASED</code> section to <code># 1.0.0 (YYYY-MM-DD)</code></li>
<li>Change the <code>version</code> property in your <em>package.json</em> accordingly.</li>
<li>Execute a <code>git commit -m &quot;v1.0.0&quot;</code></li>
<li>Execute a <code>git tag &quot;v1.0.0&quot;</code></li>
</ol>
<h2 id="keep-on-working-">Keep on working...</h2>
<p>Every project which does not have a roadmap with future changes is a dead project, right? I hope that the next release is always just around the corner! Next, you should start a new <code>UNRELEASED</code> section by executing the following and keep on working :)</p>
<pre><code>changelog --increment
</code></pre><h2 id="closing-thoughts">Closing thoughts</h2>
<p>There might be other tools like <a href="https://github.com/defunctzombie/changelog">changelog</a> out there but this one fits my personal workflow very well and who knows, maybe yours too. Whatever tools you are using for the release management, I can not emphasize enough how important it is to write a changelog file. Not just for you as a project maintainer but also for communicating to the people who are using your product. <a href="https://github.com/defunctzombie">Roman Shtylman</a> helps with <a href="https://github.com/defunctzombie/changelog">changelog</a> to manifest this notion of centering the versioning workflow around the changelog. Thanks!</p>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for May 22, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-05-22-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-05-22-links]]></guid>
        <pubDate><![CDATA[Thu, 22 May 2014 17:26:40 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/></p>
<h2 id="articles">Articles</h2>
<ul>
<li><a href="http://davidwalsh.name/add-rules-stylesheets">Add Rules to Stylesheets with JavaScript</a><blockquote>
<p>Another way we can make our pages efficient and fast is to dynamically add and remove styles directly to a stylesheet instead of constantly querying the DOM for elements and applying styles.  Here&#39;s how it works!</p>
</blockquote>
</li>
<li><a href="http://antirez.com/news/75">Redis new data structure: the HyperLogLog</a><blockquote>
<p>There is a class of algorithms that use randomization in order to provide an approximation of the number of unique elements in a set using just a constant, and small, amount of memory. The best of such algorithms currently known is called HyperLogLog, and is due to Philippe Flajolet.</p>
</blockquote>
</li>
<li><a href="https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/">Script-injected &quot;async scripts&quot; considered harmful</a><blockquote>
<p>The script-injected pattern offers no benefits over <code>&lt;script async&gt;</code>. The reason it exists is because <code>&lt;script async&gt;</code> was not available and preload scanners did not exist back when it was first introduced. However, that era has now passed, and we need to update our best practices to use async attribute instead of script-injected scripts. In short, script-injected &quot;async scripts&quot; considered harmful.</p>
</blockquote>
</li>
<li><a href="http://www.html5rocks.com/en/tutorials/es7/observe/">Data-binding Revolutions with Object.observe()</a><blockquote>
<p>A revolution is coming. There’s a new addition to JavaScript that’s going to change everything you think you know about data-binding. It’s also going to change how many of your MVC libraries approach observing models for edits and updates.</p>
</blockquote>
</li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="http://philipwalton.github.io/solved-by-flexbox/">Solved by Flexbox</a><blockquote>
<p>This site is not another CSS framework. Instead, its purpose is to showcase problems once hard or impossible to solve with CSS alone, now made trivially easy with Flexbox. And with the recent release of Internet Explorer 11 and Safari 6.1, the latest Flexbox spec is now supported in every modern browser.</p>
</blockquote>
</li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Dawg, RT <a href="https://twitter.com/ItsKieranTime">@ItsKieranTime</a> I&#39;ve found it; the most confusing image on the internet. <a href="https://twitter.com/search?q=%23KieranPresentsTheInternet&amp;src=hash">#KieranPresentsTheInternet</a> <a href="http://t.co/OUysIaxEfX">pic.twitter.com/OUysIaxEfX</a></p>&mdash; Gingerick Lamar (@odiolasgalletas) <a href="https://twitter.com/odiolasgalletas/statuses/466103422454730752">May 13, 2014</a></blockquote>]]></description>
      </item>
    
  </channel>
</rss>