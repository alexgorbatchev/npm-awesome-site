<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  xmlns:georss="http://www.georss.org/georss"
  xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
  xmlns:media="http://search.yahoo.com/mrss/"
  >
  <channel>
    <title>npm awesome</title>
    <atom:link href="http://feeds.feedburner.com/npmawesome" rel="self" type="application/rss+xml"/>
    <link>http://npmawesome.com</link>
    <description>Daily dose of awesome NPM modules for Node.js, old and new!</description>
    <lastBuildDate>Tue, 01 Jul 2014 17:33:40 GMT</lastBuildDate>
    <language>en</language>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>2</sy:updateFrequency>
    <generator>awesomeness</generator>
    <pubDate>Tue, 01 Jul 2014 17:33:40 GMT</pubDate>

    
    
    
      
      
      
      <item>
        <title><![CDATA[Ten open source Node.js apps]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-07-01-ten-open-source-nodejs-apps]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-07-01-ten-open-source-nodejs-apps]]></guid>
        <pubDate><![CDATA[Tue, 01 Jul 2014 17:28:58 GMT]]></pubDate>
        <description><![CDATA[<p>In this article we are going to quickly look at 10 open source Node.js applications. I want to shed some light on a few awesome Node.js projects for the sake of exposure and hope that you (just like me) would read and learn from their source code even if the applications themselves are of no interest to you.</p>
<div class="read-more"></div>

<h2 id="strider-cd">Strider CD</h2>
<p><a href="http://browsenpm.org/package/strider">Strider CD</a> [GitHub: <a href="https://github.com/Strider-CD/strider">Strider-CD/strider</a>, License: BSD] is Continuous Deployment / Continuous Integration platform.</p>
<p>Getting started is very simple. Simply add your GitHub projects to strider, and relax as the tight integration means your tests will run on every commit. <a href="https://www.youtube.com/watch?v=whVH24yQSHI">Checkout the YouTube demo</a> for a 4 minute introduction.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/strider.jpg" width="100%" /></p>
<h2 id="popcorn-time">Popcorn Time</h2>
<p>Popcorn Time [GitHub: <a href="https://github.com/popcorn-official/popcorn-app">popcorn-official/popcorn-app</a>, License: GPL] allows any computer user to watch movies easily streaming from torrents, without any particular knowledge. It is, in my opinion, the most interesting applications technology wise in this list with a good amount of <a href="https://torrentfreak.com/popcorn-time-devs-drop-like-flies-but-no-one-will-talk-140420/">controversy</a> to boot.</p>
<p>It&#39;s a desktop app build on top of the node-webkit [GitHub: <a href="https://github.com/rogerwang/node-webkit">rogerwang/node-webkit</a>, License: MIT] that is able to stream and play a torrent movie practicaly in real time... and it&#39;s all JavaScript. Seriously cool stuff!</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/popcorn1.png" width="100%" /></p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/popcorn2.png" width="100%" /></p>
<h2 id="mediacenterjs">MediacenterJS</h2>
<p>MediacenterJS [GitHub: <a href="https://github.com/jansmolders86/mediacenterjs">jansmolders86/mediacenterjs</a>, License: GPL] is a media center (like for instance <a href="http://xbmc.org/">XBMC</a>) running completely from the comfort of your browser. The server application runs on Windows, MAC and Linux systems, the client runs in every modern browser.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/mediacenterjs.png" width="100%" /></p>
<h2 id="kiwiirc">KiwiIRC</h2>
<p><a href="http://browsenpm.org/package/kiwiirc">KiwiIRC</a> [GitHub: <a href="https://github.com/prawnsalad/KiwiIRC">prawnsalad/KiwiIRC</a>, License: AGPL] is a fully featured IRC client that can be extended to suit almost any needs. Using the web application is extremly simple even without any IRC knowledge as all the common needs are built directly into the UI.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/kiwiirc.png" width="100%" /></p>
<h2 id="slate">Slate</h2>
<p>Slate [GitHub: <a href="https://github.com/slate/slate">slate/slate</a>, License: MIT] is a modern minimalistic IRC client, completely extensible through plugins and built with web technologies and for OSX, Linux, and eventually Windows.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/slate.png" width="100%" /></p>
<h2 id="david">David</h2>
<p><a href="http://browsenpm.org/package/david">David</a> [GitHub: <a href="https://github.com/alanshaw/david-www">alanshaw/david-www</a>, License: MIT] is a web service that tells you when your project NPM dependencies are out of date.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/david.png" width="100%" /></p>
<h2 id="shields">Shields</h2>
<p><a href="http://browsenpm.org/package/gh-badges">Shields</a> (GitHub: <a href="https://github.com/badges/shields">badges/shields</a>, License: CC0) is a service that provides legible &amp; concise status badges for third-party codebase services, like those that you see aplenty all over GitHub.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/shields.png" width="100%" /></p>
<h2 id="i-love-open-source">I Love Open Source</h2>
<p>I Love Open Source [GitHub: <a href="https://github.com/codio/iloveopensource">codio/iloveopensource</a>, License: MIT] is a way of encouraging users of Open Source code to express their gratitude through a simple acknowledgement page. Along the way, they are gently offered a chance to donate cash or just thanks.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/iloveopensource.png" width="100%" /></p>
<h2 id="browsenpm-org">browsenpm.org</h2>
<p><a href="http://browsenpm.org/package/browsenpm">browsenpm.org</a> [GitHub: <a href="https://github.com/nodejitsu/browsenpm.org">nodejitsu/browsenpm.org</a>, License: MIT] allows you to browse packages, users, code, stats and more the public npm registry in style.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/browsenpm.png" width="100%" /></p>
<h2 id="npmjs-org">npmjs.org</h2>
<p><a href="http://browsenpm.org/package/npm-www">npmjs.org</a> [GitHub: <a href="https://github.com/npm/npm-www">npm/npm-www</a>, License: BSD] is the source for npmjs.org that you probably have seen many times before but might have not realized was open for anyone to see and contribute to.</p>
<p><img src="http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/npmjs.png" width="100%" /></p>
<p>Have you seen other interesting applications written in Node.js? Please post them in comments!</p>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for June 30, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-06-30-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-06-30-links]]></guid>
        <pubDate><![CDATA[Mon, 30 Jun 2014 16:43:28 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/docker.png" class="hide-on-mobile" width="150" align="right"/></p>
<h2 id="articles">Articles</h2>
<ul>
<li><a href="http://www.joyent.com/developers/node/design/errors">Error Handling in Node.js</a><blockquote>
<p>Error handling is a pain, and it&#39;s easy to get by for a long time in Node.js without dealing with many errors correctly. But building robust Node.js apps requires dealing properly with errors, and it&#39;s not hard to learn how.</p>
</blockquote>
</li>
<li><a href="http://www.slideshare.net/mongodb/mongodb-and-amazon-web-services-deploying-for-high-availability-31642339">MongoDB and Amazon Web Services: Deploying for High Availability</a><blockquote>
<p>Best practices are meant to be a sensible starting point</p>
</blockquote>
</li>
<li><a href="http://blog.ponyfoo.com/2014/05/17/css-the-good-parts">CSS: The Good Parts</a><blockquote>
<p>This style guide is a jab at solving collisions between CSS class names, and issues that ultimately lead to confusion, having to use !important rules, copying and pasting style declarations, and other awful aspects of CSS developments.</p>
</blockquote>
</li>
<li><a href="http://www.cambus.net/emulators-written-in-javascript/">Emulators written in JavaScript</a><blockquote>
<p>This list started as a compilation of JavaScript emulators posted to Echo JS over the years.</p>
</blockquote>
</li>
<li><a href="http://blog.abhinav.ca/blog/2014/06/17/develop-a-nodejs-app-with-docker/">Develop a NodeJS App With Docker</a><blockquote>
<p>This is the first of two posts. This post covers a somewhat detailed tutorial on using Docker as a replacement for Vagrant when developing a Node app using the Express framework. To make things a bit non-trivial, the app will persist session information in Redis using the connect-redid middleware.</p>
</blockquote>
</li>
<li><a href="http://www.candyjapan.com/candy-japan-crosses-10000-mrr">Candy Japan crosses $10000 MRR</a><blockquote>
<p>Out of that $10k / month revenue of course not all (not even most) is profit. Compared to a SaaS, the costs are very high, but I&#39;ve carved enough profit margin to reach an income level similar to a Japanese salaryman now.</p>
</blockquote>
</li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="https://github.com/flowjs/flow.js">flow.js</a> is a JavaScript library providing multiple simultaneous, stable, fault-tolerant and resumable/restartable file uploads via the HTML5 File API.</li>
</ul>
<h2 id="startups">Startups</h2>
<ul>
<li><a href="https://www.counterparty.co">Counterparty</a> is a global marketplace and financial platform built on Bitcoin, which makes powerful peer-to-peer financial instruments available to anyone with an Internet connection.</li>
<li><a href="https://bugsnag.com/">bugsnap</a>’s cross platform error monitoring helps you ship with confidence.</li>
<li><a href="https://learnable.com/">Learnable</a> is a resource to learn web development and design from the experts.</li>
<li><a href="https://www.trycelery.com/">Celery</a> is the easiest way to accept orders now and charge when you&#39;re ready.</li>
</ul>
<h2 id="youtube">YouTube</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=Dh8kp1AcRg0">Amazon DynamoDB Design Patterns for Ultra-High Performance Apps</a></li>
</ul>
<h2 id="unix">Unix</h2>
<ul>
<li><a href="http://hippyvm.com/">HippyVM</a> on average is 7.3x faster than stock PHP and 2x faster than Facebook’s HHVM.</li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>New <a href="https://twitter.com/hashtag/dockercon?src=hash">#dockercon</a> 14 video: &quot;Automated <a href="https://twitter.com/chef">@chef</a> cookbook testing with <a href="https://twitter.com/droneio">@droneio</a> and <a href="https://twitter.com/github">@github</a>&quot; <a href="http://t.co/7h13hXi2V3">http://t.co/7h13hXi2V3</a> by <a href="https://twitter.com/pczarkowski">@pczarkowski</a> from <a href="https://twitter.com/Rackspace">@Rackspace</a></p>&mdash; Docker (@docker) <a href="https://twitter.com/docker/statuses/482242087811702784">June 26, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[songbird]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-06-26-songbird]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-06-26-songbird]]></guid>
        <pubDate><![CDATA[Thu, 26 Jun 2014 16:43:14 GMT]]></pubDate>
        <description><![CDATA[<p>I&#39;m always on a look out for interesting modules and unusual solutions. When working with <a href="http://promises-aplus.github.io/promises-spec/">promises</a> in Node.js, there&#39;s a constant friction between callbacks that is Node&#39;s defacto interface and your desire to use <a href="http://promises-aplus.github.io/promises-spec/">promises</a> throughout your entire project. The now famous <a href="http://browsenpm.org/package/bluebird">Bluebird</a> (Github: <a href="https://github.com/petkaantonov/bluebird">petkaantonov/bluebird</a>, License: MIT) library has a good collection of <a href="https://github.com/petkaantonov/bluebird/blob/master/API.md#promisification">helper methods</a> to assist you in going to and from callback world.</p>
<div class="read-more"></div>

<p>Over time I began to feel the need for a simple helper function to automagically integrate a callback style function into <a href="http://promises-aplus.github.io/promises-spec/">promises</a> control flow. Calling <code>promisify</code> each time on a function isn&#39;t super fun and <code>promisifyAll</code> feels a little odd to me and so yesterday I set out to look for a module that implements something like this:</p>
<pre><code>Promise
  .call(fs.readFile, &#39;path/to/file.txt&#39;, &#39;utf8&#39;)
  .then(console.log)
</code></pre><p><img src="https://avatars0.githubusercontent.com/u/325737?s=400" width="100" align="right"/>
Not surprisingly somebody else has already thought of this. I found the <a href="http://browsenpm.org/package/songbird">songbird</a> (Github: <a href="https://github.com/duereg/songbird">duereg/songbird</a>, License: MIT) module by <a href="https://github.com/duereg">Matt Blair</a> that implements a very clean interface for converting any callback style function to a return a promise instead. <a href="http://browsenpm.org/package/songbird">songbird</a> (Github: <a href="https://github.com/duereg/songbird">duereg/songbird</a>, License: MIT) does what is generally considered a no-no - it extends <code>Object</code> and <code>Function</code> prototype which gives you a magic <code>promise</code> property on every function. <a href="http://browsenpm.org/package/songbird">songbird</a> (Github: <a href="https://github.com/duereg/songbird">duereg/songbird</a>, License: MIT) also wraps the <a href="http://browsenpm.org/package/bluebird">Bluebird</a> library so you don&#39;t have to install both. Lets check it out:</p>
<pre><code>npm install songbird
</code></pre><h2 id="usage">Usage</h2>
<pre><code>var Promise = require(&#39;songbird&#39;);
var fs = require(&#39;fs&#39;);

// callback API
fs.readFile(&#39;./package.json&#39;, &#39;utf8&#39;, function(err, pkg) {
  console.log(&#39;callbacks&#39;, pkg);
});

// songbird API
fs.promise.readFile(&#39;./package.json&#39;, &#39;utf8&#39;).then(function(pkg) {
  console.log(&#39;promise&#39;, pkg);
});

Promise
  .join(
    fs.promise.readFile(&#39;./package.json&#39;, &#39;utf8&#39;),
    fs.promise.readFile(&#39;./songbird.js&#39;, &#39;utf8&#39;)
  )
  .spread(function(pkg, songbird) {
    console.log(&#39;package.json length is&#39;, pkg.length);
    console.log(&#39;songbird.js length is&#39;, songbird.length);
  });
</code></pre><h2 id="closing-thoughts">Closing thoughts</h2>
<p>While I think it&#39;s a great idea to mix in the <code>promise</code> property to <code>Object</code> and <code>Function</code>, however with great power comes great responsibility. I strongly urge against using <a href="http://browsenpm.org/package/songbird">songbird</a> in modules that you would distribute on npm because it would have a very big side effect on anyone who dares to install your code. However, when used on a project that isn&#39;t made available publicly, <a href="http://browsenpm.org/package/songbird">songbird</a> would be a great asset.</p>
<p>Check out <a href="https://github.com/npmawesome/example-songbird">source code</a> for this article on GitHub and an <a href="http://runnable.com/U575XtnsLhN9grRU">interactive example</a> on Runnable. Let us know what you think! It&#39;s not every day you encounter a module that boldly extends <code>Object</code> and <code>Function</code>.</p>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Comparing Winston and Bunyan Node.js Logging]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-06-24-comparing-winston-and-bunyan-node-js-logging]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-06-24-comparing-winston-and-bunyan-node-js-logging]]></guid>
        <pubDate><![CDATA[Wed, 25 Jun 2014 00:27:49 GMT]]></pubDate>
        <description><![CDATA[<p>If you are writing a Node.js application, chances are you going to have some kind of API end points to be consumed by your frond end or expose data for others to take in. This is where <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful APIs</a> come in. And now you have a dilemma - what tools to use and what approach to take? So many choices...</p>
<p><img src="http://npmawesome.com/images/posts/winston-and-bunyan/arnold.jpg" width="100%"/></p>
<p>Lets talk about logging, shall we? Arnold over here carrying a giant log feels like an appropriate intro to this article in which we are going to talk about popular Node.js logging frameworks.</p>
<p>If you are writing any kind of long living application, detailed logging is paramount to spotting problems and debugging. Without logs you would have few ways of telling how is your application behaving, are there errors, what&#39;s the performance like, is it doing anything at all or is it just falling over every other request when you aren&#39;t looking at it.</p>
<div class="read-more"></div>

<h2 id="requirements">Requirements</h2>
<p>Lets identify a few requirements which we can use to pit the frameworks against each other. Some of these requirements are pretty trivial, others are not so much.</p>
<ol>
<li>Time stamp each log line. This one is pretty self explanatory - you should be able to tell when each log entry occured.</li>
<li>Logging format should be easily digestible by humans as well as machines.</li>
<li>Allows for multiple configurable destination streams. For example, you might be writing trace logs to one file but when an error is encountered, write to the same file, then into error file and send an email at the same time.</li>
</ol>
<p>Based on these requirements (and popularity) there are two logging frameworks for Node.js worth checking out, in particular:</p>
<ul>
<li><a href="https://github.com/trentm/node-bunyan">Bunyan</a> by <a href="https://github.com/trentm">Trent Mick</a>.</li>
<li><a href="https://github.com/flatiron/winston">Winston</a> is part of the <a href="http://flatironjs.org/">Flatiron</a> framework and sponsored by <a href="http://nodejitsu.com">nodejitstu</a>.</li>
</ul>
<h2 id="console">console</h2>
<p>Before we get to <a href="https://github.com/trentm/node-bunyan">Bunyan</a> and <a href="https://github.com/flatiron/winston">Winston</a>, lets look at our old friend <code>console</code>. The most rudimentary type of logging you could do is using <code>console.log</code> and <code>console.error</code> methods. This is better than nothing but hardly the best solution. Console writes to STDOUT and STDERR respectively. There&#39;s a very interesting <a href="http://nodejs.org/api/stdio.html">caveat</a> to know when it comes to <code>console</code> methods in Node.js.</p>
<blockquote>
<p>The console functions are synchronous when the destination is a terminal or a file (to avoid lost messages in case of premature exit) and asynchronous when it&#39;s a pipe (to avoid blocking for long periods of time).</p>
<p>That is, in the following example, stdout is non-blocking while stderr is blocking:</p>
<pre><code>$ node script.js 2&gt; error.log | tee info.log
</code></pre></blockquote>
<p>This is basically a &quot;roll your own&quot; logging approach. It is fully manual, you have to come up with your own format and basically manage everything yourself. This is time consuming, prone to errors and you probably want to focus on your application features instead. Considering that there are open source logging libraries out there which are actively maintained, this is not worth the effort if you are trying to focus on delivering features.</p>
<p>How does <code>console</code> satisfy our requirements? Well, out of the box it does nothing in that regard but with some elbow grease you can get everything implemented yourself.</p>
<h2 id="winston">Winston</h2>
<p><img src="http://npmawesome.com/images/posts/winston-and-bunyan/lenny-henry.jpg" width="100%"/></p>
<p>One of the most popular Node.js logging frameworks is <a href="https://github.com/flatiron/winston">Winston</a>. It&#39;s designed to be a simple and universal logging library with support for multiple transports (a transport in <a href="https://github.com/flatiron/winston">Winston</a>&#39;s world is essentially a storage device, eg where your logs end up being stored). Each instance of a <a href="https://github.com/flatiron/winston">Winston</a> logger can have multiple transports configured at different logging levels.</p>
<h3 id="installation">Installation</h3>
<pre><code>npm install winston
</code></pre><h3 id="usage">Usage</h3>
<p>The most basic <a href="https://github.com/flatiron/winston">Winston</a> usage consists of calling the default instance that is exported from the <code>winston</code> module.</p>
<pre><code>var winston = require(&#39;winston&#39;);

winston.log(&#39;info&#39;, &#39;Hello distributed log files!&#39;);
winston.info(&#39;Hello again distributed logs&#39;);
</code></pre><p>The above is the same as:</p>
<pre><code>var winston = require(&#39;winston&#39;);
var logger = new winston.Logger();

logger.log(&#39;info&#39;, &#39;Hello distributed log files!&#39;);
logger.info(&#39;Hello again distributed logs&#39;);
</code></pre><p>Both examples will produce the following output:</p>
<pre><code>info: Hello distributed log files!
info: Hello again distributed logs
</code></pre><h3 id="formatting">Formatting</h3>
<p>Personally I&#39;m a little bit puzzled by the lack of details in the default formatter. There&#39;s no time stamp, machine name or process ID and the output format is mildly suitable for machine parsing. Having said that you can get all the information out yourself with just a little of extra work.</p>
<pre><code>winston.info(&#39;Hello world!&#39;, {timestamp: Date.now(), pid: process.pid});
</code></pre><p>Produces the following output, which is more informative, but still not very much suitable for machine parsing.</p>
<pre><code>info: Hello world! timestamp=1402286804314, pid=80481
</code></pre><p>Finally, the <code>log</code> method provides the same string interpolation methods as <code>util.format</code>, for example:</p>
<pre><code>winston.log(&#39;info&#39;, &#39;test message %d&#39;, 123);
</code></pre><h3 id="transporters">Transporters</h3>
<p><a href="https://github.com/flatiron/winston">Winston</a> could be configured via constructor options or exposed method which are very thoroughly documented on the <a href="https://github.com/flatiron/winston">GitHub page</a>. Most of the configuration typically revolves around various transports. Out of the box <a href="https://github.com/flatiron/winston">Winston</a> comes with console and file based transports and if you have a look on <a href="https://www.npmjs.org/search?q=winston">npmjs.org</a> you will see that there are community modules for pretty much everything imaginable ranging from MongoDB to commercial third party platforms.</p>
<p>One of the more notable transporters in my opinion is <a href="https://github.com/nathan7/winston-irc">winston-irc</a> by <a href="https://github.com/nathan7">Nathan Zadoks</a> which you can use to log errors to your team&#39;s IRC channel. I can see this coming in very handy.</p>
<pre><code>winston.add(require(&#39;winston-irc&#39;), {
  host: &#39;irc.somewhere.net&#39;,
  nick: &#39;logger&#39;,
  pass: &#39;hunter2&#39;,
  channels: {
    &#39;#logs&#39;: true,
    &#39;sysadmin&#39;: [&#39;warn&#39;, &#39;error&#39;]
  }
});
</code></pre><h3 id="multiple-loggers">Multiple Loggers</h3>
<p>Once your application starts to grow, chances are you will want to have multiple loggers with different configurations where each logger is responsible for a different feature area (or category). <a href="https://github.com/flatiron/winston">Winston</a> supports that in two ways: through <code>winston.loggers</code> and instances of <code>winston.Container</code>. In fact, <code>winston.loggers</code> is just a predefined instance of <code>winston.Container</code>:</p>
<pre><code>winston.loggers.add(&#39;category1&#39;, {console: { ... }, file: { ... }});
winston.loggers.add(&#39;category2&#39;, {irc: { ... }, file: { ... }});
</code></pre><p>Now that your loggers are configured you can require <a href="https://github.com/flatiron/winston">Winston</a> in any file in your application and access these pre-configured loggers:</p>
<pre><code>var category1 = winston.loggers.get(&#39;category1&#39;);
category1.info(&#39;logging from your IoC container-based logger&#39;);
</code></pre><h3 id="more">More</h3>
<p>This is most basic <a href="https://github.com/flatiron/winston">Winston</a> usage, but there are quite a few other features, most notably:</p>
<ul>
<li><a href="https://github.com/flatiron/winston#profiling">Profiling</a></li>
<li><a href="https://github.com/flatiron/winston#string-interpolation">String interpolation</a></li>
<li><a href="https://github.com/flatiron/winston#querying-logs">Querying</a> and <a href="https://github.com/flatiron/winston#streaming-logs">streaming</a></li>
<li><a href="https://github.com/flatiron/winston#exceptions">Handling exeptions</a></li>
</ul>
<h2 id="bunyan">Bunyan</h2>
<p><img src="http://npmawesome.com/images/posts/winston-and-bunyan/paul_bunyan_by_brendancorris-d3are2a.jpg" width="100%"/></p>
<p><sub><sup><a href="http://brendancorris.deviantart.com/art/Paul-Bunyan-199472626">Illustration by Brendan Corris</a></sup></sub></p>
<p><a href="https://github.com/trentm/node-bunyan">Bunyan</a> by <a href="https://github.com/trentm">Trent Mick</a> is another logging framework that I think should be considered. <a href="https://github.com/trentm/node-bunyan">Bunyan</a> takes a slightly different approach to logging than <a href="https://github.com/flatiron/winston">Winston</a> making its mission to provide structured, machine readable logs as first class citizens. As a result, a log record from <a href="https://github.com/trentm/node-bunyan">Bunyan</a> is one line of <code>JSON.stringify</code> output with some common names for the requisite and common fields for a log record.</p>
<h3 id="installation">Installation</h3>
<pre><code>npm install bunyan
</code></pre><h3 id="usage">Usage</h3>
<pre><code>var bunyan = require(&#39;bunyan&#39;);
var log = bunyan.createLogger({name: &#39;myapp&#39;});
log.info(&#39;hi&#39;);
log.warn({lang: &#39;fr&#39;}, &#39;au revoir&#39;);
</code></pre><p>Which will produce the following output:</p>
<pre><code>{&quot;name&quot;:&quot;myapp&quot;,&quot;hostname&quot;:&quot;pwony-2&quot;,&quot;pid&quot;:12616,&quot;level&quot;:30,&quot;msg&quot;:&quot;hi&quot;,&quot;time&quot;:&quot;2014-05-26T17:58:32.835Z&quot;,&quot;v&quot;:0}
{&quot;name&quot;:&quot;myapp&quot;,&quot;hostname&quot;:&quot;pwony-2&quot;,&quot;pid&quot;:12616,&quot;level&quot;:40,&quot;lang&quot;:&quot;fr&quot;,&quot;msg&quot;:&quot;au revoir&quot;,&quot;time&quot;:&quot;2014-05-26T17:58:32.837Z&quot;,&quot;v&quot;:0}
</code></pre><p>As you can see, out of the box <a href="https://github.com/trentm/node-bunyan">Bunyan</a> is not very human friendly, however most modern logging systems understand JSON format natively, which means there&#39;s little to do here to feed the logs elsewhere for storage and processing. By default, there&#39;s quite a bit of meta data included with each message, such as time stamp, process ID, host name and application name.</p>
<p>Of course, us humans, don&#39;t find this very digestible and to address that there&#39;s a <code>bunyan</code> CLI tool to which takes in JSON via STDIN. Here&#39;s the same example piped through <code>bunyan</code>:</p>
<pre><code>node example.js | bunyan
</code></pre><p>Produces the following output:</p>
<pre><code>[2014-05-26T18:03:40.820Z]  INFO: myapp/13372 on pwony-2: hi
[2014-05-26T18:03:40.824Z]  WARN: myapp/13372 on pwony-2: au revoir (lang=fr)
</code></pre><p>The main benefit here is that you don&#39;t need to reconfigure anything for development environment, all you have to do is pipe to <code>bunyan</code>. Checkout the <a href="https://github.com/trentm/node-bunyan#cli-usage">GitHub page</a> for more documentation on the CLI tool.</p>
<h3 id="json">JSON</h3>
<p>One of the key differences between <a href="https://github.com/trentm/node-bunyan">Bunyan</a> and <a href="https://github.com/flatiron/winston">Winston</a> is that <a href="https://github.com/trentm/node-bunyan">Bunyan</a> works really well when you want to log complex contexts and objects. Lets look at this line and its output from the example above:</p>
<pre><code>log.warn({lang: &#39;fr&#39;}, &#39;au revoir&#39;);
{&quot;name&quot;:&quot;myapp&quot;,&quot;hostname&quot;:&quot;pwony-2&quot;,&quot;pid&quot;:12616,&quot;level&quot;:40,&quot;lang&quot;:&quot;fr&quot;,&quot;msg&quot;:&quot;au revoir&quot;,&quot;time&quot;:&quot;2014-05-26T17:58:32.837Z&quot;,&quot;v&quot;:0}
</code></pre><p>You can see that <code>{lang: &#39;fr&#39;}</code> got merged with the main log object and <code>au revoir</code> became <code>msg</code>. Now picture something like this:</p>
<pre><code>log.info(user, &#39;registered&#39;);
log.info({user: user}, &#39;registered&#39;);
</code></pre><p>Which produces:</p>
<pre><code>{&quot;name&quot;:&quot;myapp&quot;,&quot;hostname&quot;:&quot;pwony-2&quot;,&quot;pid&quot;:14837,&quot;level&quot;:30,&quot;username&quot;:&quot;alex&quot;,&quot;email&quot;:&quot;...@gmail.com&quot;,&quot;msg&quot;:&quot;registered&quot;,&quot;time&quot;:&quot;2014-05-26T18:27:43.530Z&quot;,&quot;v&quot;:0}
{&quot;name&quot;:&quot;myapp&quot;,&quot;hostname&quot;:&quot;pwony-2&quot;,&quot;pid&quot;:14912,&quot;level&quot;:30,&quot;user&quot;:{&quot;username&quot;:&quot;alex&quot;,&quot;email&quot;:&quot;...@gmail.com&quot;},&quot;msg&quot;:&quot;registered&quot;,&quot;time&quot;:&quot;2014-05-26T18:28:19.874Z&quot;,&quot;v&quot;:0}
</code></pre><p>Or when piped through <code>bunyan</code>:</p>
<pre><code>[2014-05-26T18:28:42.455Z]  INFO: myapp/14943 on pwony-2: registered (username=alex, email=...@gmail.com)
[2014-05-26T18:28:42.457Z]  INFO: myapp/14943 on pwony-2: registered
    user: {
      &quot;username&quot;: &quot;alex&quot;,
      &quot;email&quot;: &quot;...@gmail.com&quot;
    }
</code></pre><p>The beauty of this approach will become clear when you we look at child loggers.</p>
<h3 id="child-loggers">Child Loggers</h3>
<p><a href="https://github.com/trentm/node-bunyan">Bunyan</a> has a concept of child loggers, which allows to specialize a logger for a sub-component of your application, i.e. to create a new logger with additional bound fields that will be included in its log records. A child logger is created with <code>log.child(...)</code>. This comes in incredibly handy if you want to have scoped loggers for different components in your system, requests, or just plain function calls. Lets look at some code.</p>
<p>Imagine you want to carry request ID through out all log lines for a given request so that you can tie them all together.</p>
<pre><code>var bunyan = require(&#39;bunyan&#39;);
var log = bunyan.createLogger({name: &#39;myapp&#39;});

app.use(function(req, res, next) {
  req.log = log.child({reqId: uuid()});
  next();
});

app.get(&#39;/&#39;, function(req, res) {
  req.log.info({user: ...});
});
</code></pre><p>The <code>req.log</code> logger will always keep its context passed to the <code>log.child()</code> function and merge it with all subsequent calls, so the output would look something like this:</p>
<pre><code>{&quot;name&quot;:&quot;myapp&quot;,&quot;hostname&quot;:&quot;pwony-2&quot;,&quot;pid&quot;:14837,&quot;level&quot;:30,&quot;reqId&quot;:&quot;XXXX-XX-XXXX&quot;,&quot;user&quot;:&quot;...@gmail.com&quot;,&quot;time&quot;:&quot;2014-05-26T18:27:43.530Z&quot;,&quot;v&quot;:0}
</code></pre><h3 id="serializers">Serializers</h3>
<p>Two problems arise when <a href="https://github.com/trentm/node-bunyan">Bunyan</a> tries to stringify entire objects:</p>
<ol>
<li>Circular references. <a href="https://github.com/flatiron/winston">Winston</a> is a little bit smarter here and detects circular references when they occur (however the result output <code>$ref=$</code> isn&#39;t very useful).</li>
<li>Unwanted noise. It feels to me that because objects are first class in <a href="https://github.com/trentm/node-bunyan">Bunyan</a> it&#39;s much easier to get into a habit of just dumping everything into the log.</li>
</ol>
<p>To help deal with both, <a href="https://github.com/trentm/node-bunyan">Bunyan</a> has a concept of <a href="https://github.com/trentm/node-bunyan#serializers">serializers</a> that are basically transformation functions which let you scope down commonly passed objects to just the fields that you are interested in:</p>
<pre><code>function reqSerializer(req) {
  return {
    method: req.method,
    url: req.url,
    headers: req.headers
  }
}

var log = bunyan.createLogger({name: &#39;myapp&#39;, serializers: {req: reqSerializer}});
log.info({req: req});
</code></pre><p>Now trying to log <code>req</code> object would just include the three fields that we are interested in.</p>
<h3 id="streams">Streams</h3>
<p><a href="https://github.com/trentm/node-bunyan#streams">Streams</a> in <a href="https://github.com/trentm/node-bunyan">Bunyan</a> are the same thing as transporters in <a href="https://github.com/flatiron/winston">Winston</a> - it&#39;s a way to send your logs elsewhere for display and storage purposes. <a href="https://github.com/trentm/node-bunyan">Bunyan</a> uses a <a href="http://nodejs.org/docs/latest/api/all.html#writable_Stream">Writable Stream</a> interface with some additional attributes. A <a href="https://github.com/trentm/node-bunyan">Bunyan</a> logger instance has one or more streams and are specified with the <code>streams</code> option:</p>
<pre><code>var log = bunyan.createLogger({
  name: &quot;foo&quot;,
  streams: [
    {
      stream: process.stderr,
      level: &quot;debug&quot;
    },
    ...
  ]
});
</code></pre><h3 id="more">More</h3>
<p>Here are a few more notable things to explore in <a href="https://github.com/trentm/node-bunyan">Bunyan</a>:</p>
<ul>
<li><a href="https://github.com/trentm/node-bunyan#dtrace-support">Runtime log snooping via Dtrace support</a></li>
<li><a href="https://github.com/trentm/node-bunyan#log-record-fields">Log record fields</a></li>
</ul>
<h2 id="what-s-next-">What&#39;s next?</h2>
<p><a href="https://github.com/flatiron/winston">Winston</a> and <a href="https://github.com/trentm/node-bunyan">Bunyan</a> are both very mature and established logging frameworks and are very much on par in terms of features. <a href="https://github.com/flatiron/winston">Winston</a> has a lot of community support with various logging modules. <a href="https://github.com/trentm/node-bunyan">Bunyan</a> makes it easy out of the box to parse logs but leaves consumption up the user (generally syslog drain works pretty well here). I feel it all comes down to preference and how easy it is to integrate with your stack.</p>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for June 17, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-06-17-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-06-17-links]]></guid>
        <pubDate><![CDATA[Tue, 17 Jun 2014 17:36:34 GMT]]></pubDate>
        <description><![CDATA[<p><img src="http://npmawesome.com/images/posts/npmawesome-logo-512x512.png" class="hide-on-mobile" width="150" align="right"/></p>
<h2 id="articles">Articles</h2>
<ul>
<li><a href="https://developer.apple.com/library/prerelease/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/index.html#//apple_ref/doc/uid/TP40014508">This article describes JavaScript for Automation, a new feature in OS X 10.10</a></li>
<li><a href="http://blog.docker.com/2014/06/its-here-docker-1-0/">It’s here: Docker 1.0</a><blockquote>
<p>First, while many organizations have cheerfully ignored our “Do not run in production!” warnings, others have been waiting for a level of product maturity before deploying production workloads.  This release’s “1.0” label signifies a level of quality, feature completeness, backward compatibility and API stability to meet enterprise IT standards.</p>
</blockquote>
</li>
<li><a href="http://meteortips.com/leaderboard-example-tutorial/">How To Make the Leaderboard Example App in Meteor</a><blockquote>
<p>In the coming weeks and months, I’ll be publishing tutorials on how to build all four of these applications from scratch. I’ll be simplifying the code in some places, making it more friendly to beginners, but they’ll be practically identical in terms of features.</p>
</blockquote>
</li>
<li><a href="http://gmarty.github.io/jsconf-2014-talk-play-dvd-in-js">Playing DVD in JavaScript</a></li>
<li><a href="http://www.2ality.com/2014/05/current-script.html">Identifying the current script element</a></li>
<li><a href="https://medium.com/architecting-a-life/fee8f3ee97a0">Finding the unjustly homeless, and teaching them to code</a><blockquote>
<p>The idea is simple. Without disrespecting him, I will offer two options:</p>
<ol>
<li>I will come back tomorrow and give you $100 in cash.</li>
<li>I will come back tomorrow and give you three JavaScript books, (beginner-advanced-expert) and a super cheap basic laptop. I will then come an hour early from work each day—when he feels prepared—and teach him to code.</li>
</ol>
</blockquote>
</li>
<li><a href="http://code.tutsplus.com/tutorials/real-time-chat-with-nodejs-readline-socketio--cms-20953">Real-Time Chat With Node.js&#39; Readline &amp; Socket.io</a><blockquote>
<p>Node.js has an under-appreciated module in its standard library that is surprisingly useful. The Readline module does what it says on the box: it reads a line of input from the terminal.</p>
</blockquote>
</li>
</ul>
<div class="read-more"></div>

<h2 id="github">Github</h2>
<ul>
<li><a href="https://github.com/snookca/CoffeeConsole">CoffeeConsole</a> is a Chrome Extension for running CoffeeScript from the Web Inspector.</li>
</ul>
<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Introducing the new <a href="http://t.co/JK8ZTaMria">http://t.co/JK8ZTaMria</a> &lt;3 <a href="http://t.co/tPJOHsGYgj">pic.twitter.com/tPJOHsGYgj</a></p>&mdash; Yeoman (@yeoman) <a href="https://twitter.com/yeoman/statuses/477493274509602816">June 13, 2014</a></blockquote>

<h2 id="misc">Misc</h2>
<ul>
<li><a href="http://www.thisiscolossal.com/2014/06/a-retired-boeing-727-converted-into-a-home-in-the-woods/">A Retired Boeing 727 Converted Into a Home in the Woods</a><blockquote>
<p><img src="http://www.thisiscolossal.com/wp-content/uploads/2014/06/retired-boeing-727-recycled-home-bruce-campbell-1.jpg" alt=""></p>
</blockquote>
</li>
</ul>
]]></description>
      </item>
    
  </channel>
</rss>