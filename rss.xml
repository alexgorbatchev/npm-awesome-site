<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  xmlns:georss="http://www.georss.org/georss"
  xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
  xmlns:media="http://search.yahoo.com/mrss/"
  >
  <channel>
    <title>npm awesome</title>
    <atom:link href="http://feeds.feedburner.com/npmawesome" rel="self" type="application/rss+xml"/>
    <link>http://npmawesome.com</link>
    <description>Daily dose of awesome NPM modules for Node.js, old and new!</description>
    <lastBuildDate>Thu, 17 Apr 2014 05:22:14 GMT</lastBuildDate>
    <language>en</language>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>2</sy:updateFrequency>
    <generator>awesomeness</generator>
    <pubDate>Thu, 17 Apr 2014 05:22:14 GMT</pubDate>

    
    
    
      
      
      
      <item>
        <title><![CDATA[Comparing Node.js Promises, Try/Catch, Angular Zone.js and yes, Zone]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-16-promises-trycatch-zones]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-16-promises-trycatch-zones]]></guid>
        <pubDate><![CDATA[Wed, 16 Apr 2014 17:01:54 GMT]]></pubDate>
        <description><![CDATA[<h1 id="handling-errors-in-async-flow">Handling errors in async flow</h1>
<p>In the <a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/">previous article</a> we&#39;ve talked about managing async flow and escaping the <a href="http://callbackhell.com/">callback hell</a>.</p>
<h2 id="the-problem">The problem</h2>
<p>Handling errors in asynchronous flow is pretty straightforward and easy. Handling errors in asynchronous flow in a clean and easy to follow manner - not so much.</p>
<p>Lets look at the following code:</p>
<pre><code>function updateDependencies(packageName, done) {
  findPackage(packageName, function(err, content) {
    if (err) {
      done(err);
    }
    else {
      try {
        package = JSON.parse(content);
      }
      catch (e) {
        done(e);
      }

      findDependencies(package, function(err, dependencies)) {
        if (err) {
          done(err);
        }
        else {
          processDependencies(dependencies, function(err) {
            if (err) {
              done(err);
            }
            else {
              done(null, dependencies);
            }
          });
        }
      });
    }
  });
}
</code></pre><p>We are covering all possible failure cases here using combination of <code>try/catch</code> and callback error handling, but boy do we repeat ourselves over and over again. Lets try and rewrite this!</p>
<div class="read-more"/>

<h2 id="error-handling-using-try-catch">Error handling using try/catch</h2>
<pre><code>function updateDependencies(packageName, done) {
  try {
    findPackage(packageName, function(err, content) {
      if (err) throw err;

      findDependencies(JSON.parse(content), function(err, dependencies)) {
        if (err) throw err;

        processDependencies(dependencies, function(err) {
          if (err) throw err;

          done(null, dependencies);
        });
      });
    });
  } catch (e) {
    done(e);
  }
}
</code></pre><p>Nice! That&#39;s much better. However, if we run this now, no errors will be caught. What&#39;s going on here?</p>
<p><code>try/catch</code> idiom works very well when you have fully synchronous code, but asynchronous operations render it useless.</p>
<p>The outer <code>try/catch</code> block will never catch anything because <code>findPackage</code> is asynchronous. The function will begin its course while the outer stack runs through and gets to the last line without any errors.</p>
<p>If an error occurs at some point in the future inside asynchronous <code>findPackage</code> - <strong>nothing will be caught</strong>.</p>
<p><img src="http://npmawesome.com/images/posts/promises-trycatch-zones/catch-fail.gif"/></p>
<p>Not useful.</p>
<h2 id="error-handling-using-promises">Error handling using promises</h2>
<p>In the <a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/">previous article</a> we&#39;ve talked about managing asynchronous flow and escaping the <a href="http://callbackhell.com/">callback hell</a> with promises. Lets put this promises to work here and rewrite this function.</p>
<p>For the sake of moving forward quicker lets assume we are using <a href="https://github.com/petkaantonov/bluebird">Bluebird</a> promises library and that all our APIs now return promises instead of taking callbacks:</p>
<pre><code>function updateDependencies(packageName) {
  return findPackage(packageName)
    .then(JSON.parse)
    .then(findDependencies)
    .then(processDependencies)
    .then(res.send)
    ;
}
</code></pre><p>Oh wow, that is so much nicer! Right? Right!</p>
<p>But Alex, &quot;we&#39;ve lost our error handling&quot;, you might say. That&#39;s right, we don&#39;t need to do anything special here to propagate error because we return a promise and there&#39;s built in support for error flow. Lets see how error handling might look like with promises:</p>
<pre><code>button.addEventListener(&quot;click&quot;, function() {
  updateDependencies(&quot;packageName&quot;)
    .then(function(dependencies) {
      output.innerHTML = dependencies.join(&quot;\n&quot;);
    })
    .catch(function(err) {
      output.innerHTML = &quot;There was an error&quot;;
    });
});
</code></pre><p>Very slick, I&#39;m a fan!</p>
<h2 id="error-using-zones">Error using Zones</h2>
<p>Handling rejected promises works really well when we are in full control of the flow. But what happens if some third-party code throws an error during an asynchronous operation? Lets look at another example:</p>
<pre><code>function thirdPartyFunction() {
  function fakeXHR() {
    throw new Error(&quot;Invalid dependencies&quot;);
  }

  setTimeout(fakeXHR, 100);
}

function main() {
  button.on(&quot;click&quot;, function onClick() {
    thirdPartyFunction();
  });
}

main();
</code></pre><p>In this case, we wouldn&#39;t have a chance to catch and process the error. Generally, the only recourse here is using half baked <code>window.onerror</code> that doesn&#39;t give you any stack information at all. At least you can log something, right? Not that there&#39;s much to log:</p>
<pre><code>Uncaught Error: Invalid dependencies
    fakeXHR
</code></pre><p>Up until recently that was pretty much all we had. However, this january <a href="https://github.com/btford">Brian Ford</a> of the <a href="http://angularjs.org">angular.js</a> fame has released <a href="https://github.com/btford/zone.js/">Zone.js</a> which aims to help tackle this.</p>
<p>Basically, <a href="https://github.com/btford/zone.js/">Zone.js</a> <strong>overrides all asynchronous functions in the browser</strong> with custom implementations which allows it to keep track of the context. Dangerous? Yes! But as we say in Soviet Russia, &quot;he who doesn&#39;t risk never gets to drink champagne&quot; (or in English &quot;nothing ventured, nothing gained&quot;).</p>
<p>Anyways, lets look at how this works. Assuming you have included <code>zones.js</code> and <code>long-stack-trace-zone.js</code> as per the docs, we just change <code>main()</code> call to:</p>
<pre><code>zone.fork(Zone.longStackTraceZone).run(main);
</code></pre><p>Refresh, click the button, and now our stack looks like this:</p>
<pre><code>Error: Invalid dependencies
    at fakeXHR (script.js:7:11)
    at Zone.run (zones.js:41:19)
    at zoneBoundFn (zones.js:27:19)
--- Tue Mar 25 2014 21:20:32 GMT-0700 (PDT) - 106ms ago
Error
    at Function.getStacktraceWithUncaughtError (long-stack-trace-zone.js:24:32)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:70:43)
    at Zone.bind (zones.js:25:21)
    at zone.(anonymous function) (zones.js:61:27)
    at marker (zones.js:66:25)
    at thirdPartyFunction (script.js:10:3)
    at HTMLButtonElement.onClick (script.js:15:5)
    at HTMLButtonElement.x.event.dispatch (jquery.js:5:10006)
    at HTMLButtonElement.y.handle (jquery.js:5:6789)
    at Zone.run (zones.js:41:19)
--- Tue Mar 25 2014 21:20:32 GMT-0700 (PDT) - 1064ms ago
Error
    at getStacktraceWithUncaughtError (long-stack-trace-zone.js:24:32)
    at Function.Zone.getStacktrace (long-stack-trace-zone.js:37:15)
    at Zone.longStackTraceZone.fork (long-stack-trace-zone.js:70:43)
    at Zone.bind (zones.js:25:21)
    at HTMLButtonElement.obj.addEventListener (zones.js:132:37)
    at Object.x.event.add (jquery.js:5:7262)
    at HTMLButtonElement.&lt;anonymous&gt; (jquery.js:5:14336)
    at Function.x.extend.each (jquery.js:4:4575)
    at x.fn.x.each (jquery.js:4:1626)
    at x.fn.extend.on (jquery.js:5:14312)
</code></pre><p>What the what?? Cool! We can now see that the relevant code path started in our <code>onClick</code> method and went into <code>thirdPartyFunction</code>.</p>
<p>The cool part is, since <a href="https://github.com/btford/zone.js/">Zone.js</a> overrides browser methods, it doesn&#39;t matter what libraries you use. It just works.</p>
<h2 id="another-async-flow-control-project-called-zones-">Another async flow control project called Zones?</h2>
<p>Yep, StrongLoop’s <a href="https://github.com/piscisaureus">Bert Belder</a> has been working on a similar idea called “<a href="https://www.npmjs.org/package/zone">Zone</a>“ for a few months now. (Not to be confused with the Angular <a href="https://github.com/btford/zone.js/">Zone.js</a> project we&#39;ve just been discussing, which shares the same name and some technical characteristics. Yeah, it’s a little confusing, but we are actively working with <a href="https://github.com/btford">Brian Ford</a> on how to potentially bring together these two projects for the mutual benefit of the JavaScript and Node communities. Stay tuned!)</p>
<h2 id="why-a-node-specific-zones-project-">Why a Node-specific Zones project?</h2>
<p>Currently, there are a couple of problems that make it really hard to deal with asynchronous control flow in Node that Zones looks to address. Specifically:</p>
<ul>
<li>Stack traces are useless when an asynchronous function fails.</li>
<li>Asynchronous functions are hard to compose into more high-level APIs. Imagine implementing a simple asynchronous API like bar(arg1, arg2, cb) where cb is the error-first callback that the user of the API specifies. To implement this correctly you must take care:<ul>
<li>to always call the callback</li>
<li>don’t call the callback more than once</li>
<li>don’t synchronously throw and also call the callback</li>
<li>don’t call the callback synchronously</li>
</ul>
</li>
<li>It is difficult to handle errors that are raised asynchronously. Typically node will crash. If the uses chooses to ignore the error, resources may leak. Zones should make it easy to handle errors and to avoid resource leaks.</li>
<li>Sometimes there is a need to associate user data to an asynchronous flow. There is currently no way to do this.</li>
</ul>
<p>Want to learn more about Zones? Stay tuned for more information in the coming weeks. Follow us on <a href="https://twitter.com/StrongLoop">Twitter</a> or subscribe to our <a href="http://strongloop.com/newsletter-registration/">newsletter</a> to make sure you don’t miss the announcements.</p>
<h2 id="what-s-next-">What&#39;s next?</h2>
<ul>
<li>Watch <a href="http://www.youtube.com/watch?v=3IqtmUscE_U">Brian&#39;s presentation</a> from ngconf 2014, it&#39;s pretty cool!</li>
<li>Add <a href="https://github.com/btford/zone.js/">Zone.js</a> to your application.</li>
<li>Profit!</li>
</ul>
<p><img src="http://npmawesome.com/images/posts/promises-trycatch-zones/party.gif"/></p>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for Apr 15, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-15-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-15-links]]></guid>
        <pubDate><![CDATA[Wed, 16 Apr 2014 03:00:00 GMT]]></pubDate>
        <description><![CDATA[<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><a href="http://scotch.io/bar-talk/expressjs-4-0-new-features-and-upgrading-from-3-0">ExpressJS 4.0: New Features and Upgrading from 3.0</a></li>
<li><a href="https://github.com/visionmedia/express/wiki/Migrating-from-3.x-to-4.x">Express 3.x to 4.0 migration guide</a></li>
<li><a href="http://www.2ality.com/2014/04/call-stack-size.html">The maximum call stack size</a></li>
<li><p><a href="http://www.wired.com/2014/04/amazon-delivery-drones/">Jeff Bezos Says Amazon Is Seriously Serious About Drone Deliveries</a></p>
<blockquote>
<p>On a per customer basis, Prime members are ordering more items, across more categories, than ever before</p>
</blockquote>
<p>No kidding :) I basically buy everything on Amazon now.</p>
</li>
</ul>
<h2 id="github">GitHub</h2>
<ul>
<li><a href="http://opensource.box.com/">Box &lt;3 Open Source</a>. Our open source projects represent the best of Box. They are all hosted on GitHub. We hope you&#39;ll find them helpful and we invite you to contribute.</li>
<li><a href="https://github.com/Fluidbyte/avow-ci">Avow CI</a> is a simple yet powerful open-source CI system for individual developers, small teams and dev shops, specifically designed for JavaScript projects.</li>
</ul>
<h2 id="startups">Startups</h2>
<ul>
<li><a href="https://redpen.io">Red Pen</a> is the fastest feedback tool for visual teams.</li>
</ul>
<div class="read-more"/>

<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet"><p>BREAKING: NSA said to have used Heartbleed bug to gather intelligence for two years, reports Bloomberg. <a href="https://t.co/wbHhucX7Pq">https://t.co/wbHhucX7Pq</a></p>&mdash; EFF (@EFF) <a href="https://twitter.com/EFF/statuses/454699447797026816">April 11, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Talk to me, Twitter. <a href="http://t.co/7skFm6Ffhn">pic.twitter.com/7skFm6Ffhn</a></p>&mdash; Robert Downey Jr (@RobertDowneyJr) <a href="https://twitter.com/RobertDowneyJr/statuses/454733271650144256">April 11, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for Apr 10, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-11-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-11-links]]></guid>
        <pubDate><![CDATA[Sat, 12 Apr 2014 03:00:00 GMT]]></pubDate>
        <description><![CDATA[<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><p><a href="http://ejohn.org/blog/write-code-every-day/">Write Code Every Day</a></p>
<blockquote>
<p>Minimum viable code. I was forced to write code for no less than 30 minutes a day. (It’s really hard to write meaningful code in less time, especially after remembering where you left off the day before.) Some week days I work a little bit more (usually no more than an hour) and on weekends I’m sometimes able to work a full day.</p>
</blockquote>
</li>
<li><p><a href="http://hmarr.com/2013/oct/16/codecube-runnable-gists/">Docker-powered Runnable Gists</a></p>
<blockquote>
<p>There are a number of ways of achieving each of these objectives (virtual machines, chroot, cgroups, etc), but Docker emerged as a pretty great solution that covers each of the points mentioned. Built on LXC and cgroups, it enables creation and teardown of relatively secure sandboxed environments in a fraction of a second. Each time a code snippet is run, a docker container can be created, started, used to run the untrusted code, then killed and destroyed. It’s incredible that all this can happen in a matter of milliseconds.</p>
</blockquote>
</li>
<li><p><a href="http://blog.dcxn.com/2013/10/27/js-everywhere-my-first-conference-talk/">JS Everywhere - My First Conference Talk</a></p>
<blockquote>
<p>I started working on this 15-minute talk about a month ago and that felt like the right amount of time. The talk went through several incarnations as I got feedback from a number of different people. Fairly early on I knew that I wanted to argue that code is fashion but in early talks, someone pointed out to me that I was really saying that fashion is nothing but fads. That was great feedback and because I still had quite a bit of time I was able to think about it and come to a better understanding of what fashion means to me.</p>
</blockquote>
</li>
<li><p><a href="http://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/">Debugging Clustered Apps with Node-Inspector</a></p>
<blockquote>
<p>Debugging a clustered Node application is not without some idiosyncrasies, particularly if you are running Node v0.10. But, it does work well enough if you understand what’s going on behind the scenes. Now, before you embark on this debugging adventure, you should probably ask yourself, “Can I run my app un-clustered and debug it in that mode or is the issue I am trying to track down, only seen when running my app in a clustered configuration?”</p>
</blockquote>
</li>
<li><p><a href="http://www.quora.com/Time-Travel/Why-are-people-from-the-future-not-time-traveling-to-our-period">Why are people from the future not time traveling to our period?</a></p>
<blockquote>
<p><img src="http://qph.is.quoracdn.net/main-qimg-aff38ac936d19039781773b5bdbac2d4?convert_to_webp=true" alt=""></p>
<p>So the likely reason that time travelers from the future aren&#39;t visiting our period is (other than time travel perhaps being physically impossible) that we&#39;re just not that interesting, and we&#39;re not really that large.  It&#39;s only temporal-centric egotism that makes us believe otherwise.</p>
</blockquote>
</li>
<li><p><a href="http://javascriptjabber.com/103-jsj-robots-with-raquel-velez/">JSJ Robots with Raquel Vélez Podcast</a></p>
</li>
</ul>
<h2 id="github">GitHub</h2>
<ul>
<li><a href="https://kiwiirc.com">Kiwi IRC</a> makes Web IRC easy. A hand-crafted IRC client that you canenjoy. Designed to be used easily and freely.</li>
<li><a href="https://github.com/famous/famous">Famo.us</a> provides a powerful JavaScript framework and developer tools designed to build rich, fast web applications. Famo.us takes an opinionated approach to developing with web technology, maintaining tight control of rendering to achieve maximum UI performance. Check out the <a href="http://demo.famo.us/">demos</a>.</li>
</ul>
<div class="read-more"/>

<h2 id="twitter">Twitter</h2>
<blockquote class="twitter-tweet"><p>You should write code every day: <a href="http://t.co/M0MmaZn15O">http://t.co/M0MmaZn15O</a></p>&mdash; John Resig (@jeresig) <a href="https://twitter.com/jeresig/statuses/454325606432645120">April 10, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>JavaScript robots and other topics: <a href="https://twitter.com/rockbot">@rockbot</a> interviewed by <a href="https://twitter.com/JSJabber">@JSJabber</a> <a href="http://t.co/lt3ZTCyfZe">http://t.co/lt3ZTCyfZe</a></p>&mdash; Technical Machine (@technicalhumans) <a href="https://twitter.com/technicalhumans/statuses/454320117682569216">April 10, 2014</a></blockquote>

<blockquote class="twitter-tweet"><p>Design strategies for JavaScript API: <a href="http://t.co/gkcZGtnFj3">http://t.co/gkcZGtnFj3</a> - great tips by <a href="https://twitter.com/AriyaHidayat">@AriyaHidayat</a>!</p>&mdash; Ilya Grigorik (@igrigorik) <a href="https://twitter.com/igrigorik/statuses/454357649178390528">April 10, 2014</a></blockquote>]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[shmock]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-10-shmock]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-10-shmock]]></guid>
        <pubDate><![CDATA[Thu, 10 Apr 2014 16:45:06 GMT]]></pubDate>
        <description><![CDATA[<p><img class="hide-on-mobile" src="https://avatars0.githubusercontent.com/u/139687?s=400" style="float: right; margin-left: 1em; width: 100px"/>
<a href="https://github.com/xetorthio/shmock">shmock</a> is a module by <a href="https://github.com/xetorthio">Jonathan Leibiusky</a> provides a super nice API, like the one of <a href="https://github.com/visionmedia/superagent">superagent</a> but it creates a real http server (using <a href="https://github.com/visionmedia/express">express</a>). The nice thing about this is that you don&#39;t really care about the implementation, which http client is being used, or even if nodes native http api changes.</p>
<div class="read-more"/>

<pre><code>npm install shmock
</code></pre><h2 id="usage">Usage</h2>
<pre><code>var
  shmock = require(&#39;shmock&#39;),
  request = require(&#39;request&#39;),
  assert = require(&#39;assert&#39;)
  ;

var mock = shmock(9000);

mock
  .get(&#39;/foo&#39;)
  .query(&#39;a=1&amp;b=2&#39;)
  .reply(200, &#39;Hello npmawesome.com&#39;)
  ;

request(&quot;http://localhost:9000/foo?b=2&amp;a=1&quot;, function(err, response) {
  assert.equal(response.statusCode, 200);
  assert.equal(response.body, &#39;Hello npmawesome.com&#39;);
  mock.close();

  console.log(&#39;It worked!&#39;);
});
</code></pre><p>Checkout <a href="http://runnable.com/U0bPQd2Mi8VtE_Vi/shmock-example-for-node-js-and-npmawesome">runnable example</a>.</p>
<h2 id="closing-thoughts">Closing Thoughts</h2>
<p>Being able to mock APIs is a very powerful tool for <a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>. You can prototype, design and test your consumer before implementing a line of code. Check out <a href="https://github.com/xetorthio/shmock">shmock</a> github page for full documentation and test for examples of usage.</p>
]]></description>
      </item>
    
      
      
      
      <item>
        <title><![CDATA[Links for Apr 8, 2014]]></title>
        <link><![CDATA[http://npmawesome.com/posts/2014-04-09-links]]></link>
        <dc:creator><![CDATA[Alex Gorbatchev]]></dc:creator>
        <guid isPermaLink="true"><![CDATA[http://npmawesome.com/posts/2014-04-09-links]]></guid>
        <pubDate><![CDATA[Thu, 10 Apr 2014 03:00:00 GMT]]></pubDate>
        <description><![CDATA[<h2 id="articles-slides">Articles &amp; Slides</h2>
<ul>
<li><a href="http://serversforhackers.com/articles/2014/03/20/getting-started-with-docker/">Getting Started with Docker</a></li>
<li><a href="https://engineering.gosquared.com/optimising-nginx-node-js-and-networking-for-heavy-workloads">Optimising NginX, Node.JS and networking for heavy workloads</a></li>
</ul>
<h2 id="github">GitHub</h2>
<ul>
<li><a href="http://sokra.github.io/source-map-visualization/">ource-map-visualization</a> for various flavors. Pretty cool to see how the mapping works.</li>
<li><a href="http://mgcrea.github.io/angular-strap/">angular-strap</a> - AngularJS 1.2+ native directives for Twitter Bootstrap 3.</li>
<li><a href="http://lipis.github.io/flag-icon-css/">flag-icon-css</a> - CSS for vector based country flags.</li>
<li><a href="https://github.com/daraosn/oculus-drone">oculus-drone</a> - Oculus Rift + AR Drone 2.0 controller with live video feed and head-motion controller written for Node.js in CoffeeScript.</li>
<li><a href="https://github.com/schaermu/node-fluent-ffmpeg">node-fluent-ffmpeg</a> abstracts the complex command-line usage of ffmpeg into a fluent, easy to use Node.js module.</li>
<li><a href="http://jasperproject.github.io/">Jasper</a> is an open source platform for developing always-on, voice-controlled applications.</li>
</ul>
<h2 id="startups">Startups</h2>
<ul>
<li><a href="https://slack.com/">Slack</a> brings all your communication together in one place. It’s real-time messaging, archiving and search for modern teams.</li>
<li><a href="https://zerocater.com/">ZeroCater</a> is the easiest way to feed your team.</li>
</ul>
<h2 id="vidoes">Vidoes</h2>
<ul>
<li><a href="http://2013.jsconf.eu/speakers/videos.html">JSConf 2013 conference videos</a></li>
<li><a href="http://vimeo.com/ndcoslo/videos/sort:plays/format:thumbnail">NDC conference videos</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL055Epbe6d5bab7rZ3i83OtMmD-d9uq2K">Fluent 2014 conference videos</a></li>
</ul>
]]></description>
      </item>
    
  </channel>
</rss>