<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>npm awesome</title>
	<subtitle>Daily dose of awesome NPM modules for Node.js, old and new!</subtitle>
	<link href="http://npmawesome.com/atom.xml" rel="self" />
	<link href="http://npmawesome.com" />
	<id>http://npmawesome.com</id>
	<updated>2014-06-25T00:32:54.454Z</updated>
	<author>
		<name>Alex Gorbatchev</name>
	</author>

  
  
  
    
    
    
		<entry>
			<title>Comparing Winston and Bunyan Node.js Logging</title>
			<link href="http://npmawesome.com/posts/2014-06-24-comparing-winston-and-bunyan-node-js-logging"/>
			<updated>2014-06-25T00:27:49.000Z</updated>
			<id>http://npmawesome.com/posts/2014-06-24-comparing-winston-and-bunyan-node-js-logging</id>
			<content type="html">&lt;p&gt;If you are writing a Node.js application, chances are you going to have some kind of API end points to be consumed by your frond end or expose data for others to take in. This is where &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful APIs&lt;/a&gt; come in. And now you have a dilemma - what tools to use and what approach to take? So many choices...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/winston-and-bunyan/arnold.jpg&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Lets talk about logging, shall we? Arnold over here carrying a giant log feels like an appropriate intro to this article in which we are going to talk about popular Node.js logging frameworks.&lt;/p&gt;
&lt;p&gt;If you are writing any kind of long living application, detailed logging is paramount to spotting problems and debugging. Without logs you would have few ways of telling how is your application behaving, are there errors, what&amp;#39;s the performance like, is it doing anything at all or is it just falling over every other request when you aren&amp;#39;t looking at it.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Lets identify a few requirements which we can use to pit the frameworks against each other. Some of these requirements are pretty trivial, others are not so much.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Time stamp each log line. This one is pretty self explanatory - you should be able to tell when each log entry occured.&lt;/li&gt;
&lt;li&gt;Logging format should be easily digestible by humans as well as machines.&lt;/li&gt;
&lt;li&gt;Allows for multiple configurable destination streams. For example, you might be writing trace logs to one file but when an error is encountered, write to the same file, then into error file and send an email at the same time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on these requirements (and popularity) there are two logging frameworks for Node.js worth checking out, in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; by &lt;a href=&quot;https://github.com/trentm&quot;&gt;Trent Mick&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; is part of the &lt;a href=&quot;http://flatironjs.org/&quot;&gt;Flatiron&lt;/a&gt; framework and sponsored by &lt;a href=&quot;http://nodejitsu.com&quot;&gt;nodejitstu&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;console&quot;&gt;console&lt;/h2&gt;
&lt;p&gt;Before we get to &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; and &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt;, lets look at our old friend &lt;code&gt;console&lt;/code&gt;. The most rudimentary type of logging you could do is using &lt;code&gt;console.log&lt;/code&gt; and &lt;code&gt;console.error&lt;/code&gt; methods. This is better than nothing but hardly the best solution. Console writes to STDOUT and STDERR respectively. There&amp;#39;s a very interesting &lt;a href=&quot;http://nodejs.org/api/stdio.html&quot;&gt;caveat&lt;/a&gt; to know when it comes to &lt;code&gt;console&lt;/code&gt; methods in Node.js.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The console functions are synchronous when the destination is a terminal or a file (to avoid lost messages in case of premature exit) and asynchronous when it&amp;#39;s a pipe (to avoid blocking for long periods of time).&lt;/p&gt;
&lt;p&gt;That is, in the following example, stdout is non-blocking while stderr is blocking:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node script.js 2&amp;gt; error.log | tee info.log
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;This is basically a &amp;quot;roll your own&amp;quot; logging approach. It is fully manual, you have to come up with your own format and basically manage everything yourself. This is time consuming, prone to errors and you probably want to focus on your application features instead. Considering that there are open source logging libraries out there which are actively maintained, this is not worth the effort if you are trying to focus on delivering features.&lt;/p&gt;
&lt;p&gt;How does &lt;code&gt;console&lt;/code&gt; satisfy our requirements? Well, out of the box it does nothing in that regard but with some elbow grease you can get everything implemented yourself.&lt;/p&gt;
&lt;h2 id=&quot;winston&quot;&gt;Winston&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/winston-and-bunyan/lenny-henry.jpg&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;One of the most popular Node.js logging frameworks is &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt;. It&amp;#39;s designed to be a simple and universal logging library with support for multiple transports (a transport in &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt;&amp;#39;s world is essentially a storage device, eg where your logs end up being stored). Each instance of a &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; logger can have multiple transports configured at different logging levels.&lt;/p&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;npm install winston
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;
&lt;p&gt;The most basic &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; usage consists of calling the default instance that is exported from the &lt;code&gt;winston&lt;/code&gt; module.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var winston = require(&amp;#39;winston&amp;#39;);

winston.log(&amp;#39;info&amp;#39;, &amp;#39;Hello distributed log files!&amp;#39;);
winston.info(&amp;#39;Hello again distributed logs&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above is the same as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var winston = require(&amp;#39;winston&amp;#39;);
var logger = new winston.Logger();

logger.log(&amp;#39;info&amp;#39;, &amp;#39;Hello distributed log files!&amp;#39;);
logger.info(&amp;#39;Hello again distributed logs&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both examples will produce the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;info: Hello distributed log files!
info: Hello again distributed logs
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;formatting&quot;&gt;Formatting&lt;/h3&gt;
&lt;p&gt;Personally I&amp;#39;m a little bit puzzled by the lack of details in the default formatter. There&amp;#39;s no time stamp, machine name or process ID and the output format is mildly suitable for machine parsing. Having said that you can get all the information out yourself with just a little of extra work.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;winston.info(&amp;#39;Hello world!&amp;#39;, {timestamp: Date.now(), pid: process.pid});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Produces the following output, which is more informative, but still not very much suitable for machine parsing.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;info: Hello world! timestamp=1402286804314, pid=80481
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, the &lt;code&gt;log&lt;/code&gt; method provides the same string interpolation methods as &lt;code&gt;util.format&lt;/code&gt;, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;winston.log(&amp;#39;info&amp;#39;, &amp;#39;test message %d&amp;#39;, 123);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;transporters&quot;&gt;Transporters&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; could be configured via constructor options or exposed method which are very thoroughly documented on the &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;GitHub page&lt;/a&gt;. Most of the configuration typically revolves around various transports. Out of the box &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; comes with console and file based transports and if you have a look on &lt;a href=&quot;https://www.npmjs.org/search?q=winston&quot;&gt;npmjs.org&lt;/a&gt; you will see that there are community modules for pretty much everything imaginable ranging from MongoDB to commercial third party platforms.&lt;/p&gt;
&lt;p&gt;One of the more notable transporters in my opinion is &lt;a href=&quot;https://github.com/nathan7/winston-irc&quot;&gt;winston-irc&lt;/a&gt; by &lt;a href=&quot;https://github.com/nathan7&quot;&gt;Nathan Zadoks&lt;/a&gt; which you can use to log errors to your team&amp;#39;s IRC channel. I can see this coming in very handy.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;winston.add(require(&amp;#39;winston-irc&amp;#39;), {
  host: &amp;#39;irc.somewhere.net&amp;#39;,
  nick: &amp;#39;logger&amp;#39;,
  pass: &amp;#39;hunter2&amp;#39;,
  channels: {
    &amp;#39;#logs&amp;#39;: true,
    &amp;#39;sysadmin&amp;#39;: [&amp;#39;warn&amp;#39;, &amp;#39;error&amp;#39;]
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;multiple-loggers&quot;&gt;Multiple Loggers&lt;/h3&gt;
&lt;p&gt;Once your application starts to grow, chances are you will want to have multiple loggers with different configurations where each logger is responsible for a different feature area (or category). &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; supports that in two ways: through &lt;code&gt;winston.loggers&lt;/code&gt; and instances of &lt;code&gt;winston.Container&lt;/code&gt;. In fact, &lt;code&gt;winston.loggers&lt;/code&gt; is just a predefined instance of &lt;code&gt;winston.Container&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;winston.loggers.add(&amp;#39;category1&amp;#39;, {console: { ... }, file: { ... }});
winston.loggers.add(&amp;#39;category2&amp;#39;, {irc: { ... }, file: { ... }});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that your loggers are configured you can require &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; in any file in your application and access these pre-configured loggers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var category1 = winston.loggers.get(&amp;#39;category1&amp;#39;);
category1.info(&amp;#39;logging from your IoC container-based logger&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;more&quot;&gt;More&lt;/h3&gt;
&lt;p&gt;This is most basic &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; usage, but there are quite a few other features, most notably:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flatiron/winston#profiling&quot;&gt;Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flatiron/winston#string-interpolation&quot;&gt;String interpolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flatiron/winston#querying-logs&quot;&gt;Querying&lt;/a&gt; and &lt;a href=&quot;https://github.com/flatiron/winston#streaming-logs&quot;&gt;streaming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flatiron/winston#exceptions&quot;&gt;Handling exeptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;bunyan&quot;&gt;Bunyan&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/winston-and-bunyan/paul_bunyan_by_brendancorris-d3are2a.jpg&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;&lt;sup&gt;&lt;a href=&quot;http://brendancorris.deviantart.com/art/Paul-Bunyan-199472626&quot;&gt;Illustration by Brendan Corris&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; by &lt;a href=&quot;https://github.com/trentm&quot;&gt;Trent Mick&lt;/a&gt; is another logging framework that I think should be considered. &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; takes a slightly different approach to logging than &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; making its mission to provide structured, machine readable logs as first class citizens. As a result, a log record from &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; is one line of &lt;code&gt;JSON.stringify&lt;/code&gt; output with some common names for the requisite and common fields for a log record.&lt;/p&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;npm install bunyan
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var bunyan = require(&amp;#39;bunyan&amp;#39;);
var log = bunyan.createLogger({name: &amp;#39;myapp&amp;#39;});
log.info(&amp;#39;hi&amp;#39;);
log.warn({lang: &amp;#39;fr&amp;#39;}, &amp;#39;au revoir&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which will produce the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;name&amp;quot;:&amp;quot;myapp&amp;quot;,&amp;quot;hostname&amp;quot;:&amp;quot;pwony-2&amp;quot;,&amp;quot;pid&amp;quot;:12616,&amp;quot;level&amp;quot;:30,&amp;quot;msg&amp;quot;:&amp;quot;hi&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2014-05-26T17:58:32.835Z&amp;quot;,&amp;quot;v&amp;quot;:0}
{&amp;quot;name&amp;quot;:&amp;quot;myapp&amp;quot;,&amp;quot;hostname&amp;quot;:&amp;quot;pwony-2&amp;quot;,&amp;quot;pid&amp;quot;:12616,&amp;quot;level&amp;quot;:40,&amp;quot;lang&amp;quot;:&amp;quot;fr&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;au revoir&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2014-05-26T17:58:32.837Z&amp;quot;,&amp;quot;v&amp;quot;:0}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, out of the box &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; is not very human friendly, however most modern logging systems understand JSON format natively, which means there&amp;#39;s little to do here to feed the logs elsewhere for storage and processing. By default, there&amp;#39;s quite a bit of meta data included with each message, such as time stamp, process ID, host name and application name.&lt;/p&gt;
&lt;p&gt;Of course, us humans, don&amp;#39;t find this very digestible and to address that there&amp;#39;s a &lt;code&gt;bunyan&lt;/code&gt; CLI tool to which takes in JSON via STDIN. Here&amp;#39;s the same example piped through &lt;code&gt;bunyan&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node example.js | bunyan
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Produces the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2014-05-26T18:03:40.820Z]  INFO: myapp/13372 on pwony-2: hi
[2014-05-26T18:03:40.824Z]  WARN: myapp/13372 on pwony-2: au revoir (lang=fr)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main benefit here is that you don&amp;#39;t need to reconfigure anything for development environment, all you have to do is pipe to &lt;code&gt;bunyan&lt;/code&gt;. Checkout the &lt;a href=&quot;https://github.com/trentm/node-bunyan#cli-usage&quot;&gt;GitHub page&lt;/a&gt; for more documentation on the CLI tool.&lt;/p&gt;
&lt;h3 id=&quot;json&quot;&gt;JSON&lt;/h3&gt;
&lt;p&gt;One of the key differences between &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; and &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; is that &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; works really well when you want to log complex contexts and objects. Lets look at this line and its output from the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log.warn({lang: &amp;#39;fr&amp;#39;}, &amp;#39;au revoir&amp;#39;);
{&amp;quot;name&amp;quot;:&amp;quot;myapp&amp;quot;,&amp;quot;hostname&amp;quot;:&amp;quot;pwony-2&amp;quot;,&amp;quot;pid&amp;quot;:12616,&amp;quot;level&amp;quot;:40,&amp;quot;lang&amp;quot;:&amp;quot;fr&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;au revoir&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2014-05-26T17:58:32.837Z&amp;quot;,&amp;quot;v&amp;quot;:0}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that &lt;code&gt;{lang: &amp;#39;fr&amp;#39;}&lt;/code&gt; got merged with the main log object and &lt;code&gt;au revoir&lt;/code&gt; became &lt;code&gt;msg&lt;/code&gt;. Now picture something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log.info(user, &amp;#39;registered&amp;#39;);
log.info({user: user}, &amp;#39;registered&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which produces:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;name&amp;quot;:&amp;quot;myapp&amp;quot;,&amp;quot;hostname&amp;quot;:&amp;quot;pwony-2&amp;quot;,&amp;quot;pid&amp;quot;:14837,&amp;quot;level&amp;quot;:30,&amp;quot;username&amp;quot;:&amp;quot;alex&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;...@gmail.com&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;registered&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2014-05-26T18:27:43.530Z&amp;quot;,&amp;quot;v&amp;quot;:0}
{&amp;quot;name&amp;quot;:&amp;quot;myapp&amp;quot;,&amp;quot;hostname&amp;quot;:&amp;quot;pwony-2&amp;quot;,&amp;quot;pid&amp;quot;:14912,&amp;quot;level&amp;quot;:30,&amp;quot;user&amp;quot;:{&amp;quot;username&amp;quot;:&amp;quot;alex&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;...@gmail.com&amp;quot;},&amp;quot;msg&amp;quot;:&amp;quot;registered&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2014-05-26T18:28:19.874Z&amp;quot;,&amp;quot;v&amp;quot;:0}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or when piped through &lt;code&gt;bunyan&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2014-05-26T18:28:42.455Z]  INFO: myapp/14943 on pwony-2: registered (username=alex, email=...@gmail.com)
[2014-05-26T18:28:42.457Z]  INFO: myapp/14943 on pwony-2: registered
    user: {
      &amp;quot;username&amp;quot;: &amp;quot;alex&amp;quot;,
      &amp;quot;email&amp;quot;: &amp;quot;...@gmail.com&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The beauty of this approach will become clear when you we look at child loggers.&lt;/p&gt;
&lt;h3 id=&quot;child-loggers&quot;&gt;Child Loggers&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; has a concept of child loggers, which allows to specialize a logger for a sub-component of your application, i.e. to create a new logger with additional bound fields that will be included in its log records. A child logger is created with &lt;code&gt;log.child(...)&lt;/code&gt;. This comes in incredibly handy if you want to have scoped loggers for different components in your system, requests, or just plain function calls. Lets look at some code.&lt;/p&gt;
&lt;p&gt;Imagine you want to carry request ID through out all log lines for a given request so that you can tie them all together.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var bunyan = require(&amp;#39;bunyan&amp;#39;);
var log = bunyan.createLogger({name: &amp;#39;myapp&amp;#39;});

app.use(function(req, res, next) {
  req.log = log.child({reqId: uuid()});
  next();
});

app.get(&amp;#39;/&amp;#39;, function(req, res) {
  req.log.info({user: ...});
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;req.log&lt;/code&gt; logger will always keep its context passed to the &lt;code&gt;log.child()&lt;/code&gt; function and merge it with all subsequent calls, so the output would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;name&amp;quot;:&amp;quot;myapp&amp;quot;,&amp;quot;hostname&amp;quot;:&amp;quot;pwony-2&amp;quot;,&amp;quot;pid&amp;quot;:14837,&amp;quot;level&amp;quot;:30,&amp;quot;reqId&amp;quot;:&amp;quot;XXXX-XX-XXXX&amp;quot;,&amp;quot;user&amp;quot;:&amp;quot;...@gmail.com&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2014-05-26T18:27:43.530Z&amp;quot;,&amp;quot;v&amp;quot;:0}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;serializers&quot;&gt;Serializers&lt;/h3&gt;
&lt;p&gt;Two problems arise when &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; tries to stringify entire objects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Circular references. &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; is a little bit smarter here and detects circular references when they occur (however the result output &lt;code&gt;$ref=$&lt;/code&gt; isn&amp;#39;t very useful).&lt;/li&gt;
&lt;li&gt;Unwanted noise. It feels to me that because objects are first class in &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; it&amp;#39;s much easier to get into a habit of just dumping everything into the log.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To help deal with both, &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; has a concept of &lt;a href=&quot;https://github.com/trentm/node-bunyan#serializers&quot;&gt;serializers&lt;/a&gt; that are basically transformation functions which let you scope down commonly passed objects to just the fields that you are interested in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function reqSerializer(req) {
  return {
    method: req.method,
    url: req.url,
    headers: req.headers
  }
}

var log = bunyan.createLogger({name: &amp;#39;myapp&amp;#39;, serializers: {req: reqSerializer}});
log.info({req: req});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now trying to log &lt;code&gt;req&lt;/code&gt; object would just include the three fields that we are interested in.&lt;/p&gt;
&lt;h3 id=&quot;streams&quot;&gt;Streams&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan#streams&quot;&gt;Streams&lt;/a&gt; in &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; are the same thing as transporters in &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; - it&amp;#39;s a way to send your logs elsewhere for display and storage purposes. &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; uses a &lt;a href=&quot;http://nodejs.org/docs/latest/api/all.html#writable_Stream&quot;&gt;Writable Stream&lt;/a&gt; interface with some additional attributes. A &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; logger instance has one or more streams and are specified with the &lt;code&gt;streams&lt;/code&gt; option:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var log = bunyan.createLogger({
  name: &amp;quot;foo&amp;quot;,
  streams: [
    {
      stream: process.stderr,
      level: &amp;quot;debug&amp;quot;
    },
    ...
  ]
});
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;more&quot;&gt;More&lt;/h3&gt;
&lt;p&gt;Here are a few more notable things to explore in &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan#dtrace-support&quot;&gt;Runtime log snooping via Dtrace support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan#log-record-fields&quot;&gt;Log record fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-s-next-&quot;&gt;What&amp;#39;s next?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; and &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; are both very mature and established logging frameworks and are very much on par in terms of features. &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;Winston&lt;/a&gt; has a lot of community support with various logging modules. &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;Bunyan&lt;/a&gt; makes it easy out of the box to parse logs but leaves consumption up the user (generally syslog drain works pretty well here). I feel it all comes down to preference and how easy it is to integrate with your stack.&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for June 17, 2014</title>
			<link href="http://npmawesome.com/posts/2014-06-17-links"/>
			<updated>2014-06-17T17:36:34.000Z</updated>
			<id>http://npmawesome.com/posts/2014-06-17-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/npmawesome-logo-512x512.png&quot; class=&quot;hide-on-mobile&quot; width=&quot;150&quot; align=&quot;right&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles&quot;&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/index.html#//apple_ref/doc/uid/TP40014508&quot;&gt;This article describes JavaScript for Automation, a new feature in OS X 10.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.docker.com/2014/06/its-here-docker-1-0/&quot;&gt;It’s here: Docker 1.0&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;First, while many organizations have cheerfully ignored our “Do not run in production!” warnings, others have been waiting for a level of product maturity before deploying production workloads.  This release’s “1.0” label signifies a level of quality, feature completeness, backward compatibility and API stability to meet enterprise IT standards.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://meteortips.com/leaderboard-example-tutorial/&quot;&gt;How To Make the Leaderboard Example App in Meteor&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;In the coming weeks and months, I’ll be publishing tutorials on how to build all four of these applications from scratch. I’ll be simplifying the code in some places, making it more friendly to beginners, but they’ll be practically identical in terms of features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gmarty.github.io/jsconf-2014-talk-play-dvd-in-js&quot;&gt;Playing DVD in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2014/05/current-script.html&quot;&gt;Identifying the current script element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/architecting-a-life/fee8f3ee97a0&quot;&gt;Finding the unjustly homeless, and teaching them to code&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;The idea is simple. Without disrespecting him, I will offer two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I will come back tomorrow and give you $100 in cash.&lt;/li&gt;
&lt;li&gt;I will come back tomorrow and give you three JavaScript books, (beginner-advanced-expert) and a super cheap basic laptop. I will then come an hour early from work each day—when he feels prepared—and teach him to code.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/real-time-chat-with-nodejs-readline-socketio--cms-20953&quot;&gt;Real-Time Chat With Node.js&amp;#39; Readline &amp;amp; Socket.io&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Node.js has an under-appreciated module in its standard library that is surprisingly useful. The Readline module does what it says on the box: it reads a line of input from the terminal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/snookca/CoffeeConsole&quot;&gt;CoffeeConsole&lt;/a&gt; is a Chrome Extension for running CoffeeScript from the Web Inspector.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Introducing the new &lt;a href=&quot;http://t.co/JK8ZTaMria&quot;&gt;http://t.co/JK8ZTaMria&lt;/a&gt; &amp;lt;3 &lt;a href=&quot;http://t.co/tPJOHsGYgj&quot;&gt;pic.twitter.com/tPJOHsGYgj&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yeoman (@yeoman) &lt;a href=&quot;https://twitter.com/yeoman/statuses/477493274509602816&quot;&gt;June 13, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thisiscolossal.com/2014/06/a-retired-boeing-727-converted-into-a-home-in-the-woods/&quot;&gt;A Retired Boeing 727 Converted Into a Home in the Woods&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.thisiscolossal.com/wp-content/uploads/2014/06/retired-boeing-727-recycled-home-bruce-campbell-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>JugglingDB</title>
			<link href="http://npmawesome.com/posts/2014-06-16-jugglingdb"/>
			<updated>2014-06-16T16:00:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-06-16-jugglingdb</id>
			<content type="html">&lt;p&gt;Data access is something Node.js is very well known for. When it comes to drivers, there&amp;#39;s support for nearly every database under the sun. These days however, in most cases you use an &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM&lt;/a&gt; library instead of a plain driver. It saves you time and you don&amp;#39;t have to write every single thing youself.&lt;/p&gt;
&lt;p&gt;There are database specific &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM&lt;/a&gt; libraries such as &lt;a href=&quot;http://mongoosejs.com/&quot;&gt;Mongoose&lt;/a&gt; for MongoDB and &lt;a href=&quot;http://sequelizejs.com/&quot;&gt;Sequelize&lt;/a&gt; for MySQL and PostgreSQL. The downside to this approach is that you have to learn a whole new API when you have to go from one database to another. I&amp;#39;m not suggesting it&amp;#39;s a good idea to switch or use different databases during a lifecycle of a single project (eg SQLite for development and MySQL for production). But going from project to project, client to client, your requirements might change and you will have to use a different database and then learn a whole new API. Fun? Yes! But if you have to delivery features quickly, this might be a setback.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/anatoliy_chakkaev.jpg&quot; width=&quot;100&quot; align=&quot;right&quot;/&gt;
&lt;a href=&quot;http://browsenpm.org/package/jugglingdb&quot;&gt;JugglingDB&lt;/a&gt; (Github: &lt;a href=&quot;https://github.com/1602/jugglingdb&quot;&gt;1602/jugglingdb&lt;/a&gt;, License: MIT) by &lt;a href=&quot;https://github.com/1602&quot;&gt;Anatoliy Chakkaev&lt;/a&gt; is a young &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM&lt;/a&gt; library that tries to provide a single API for a vast array of databases. All adapters come in a form of separate modules and there are quite a few already available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArangoDB&lt;/li&gt;
&lt;li&gt;CouchDB&lt;/li&gt;
&lt;li&gt;Firebird&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;RethinkDB&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets check it out!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install jugglingdb
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;var Schema = require(&amp;#39;jugglingdb&amp;#39;).Schema;
var schema = new Schema(&amp;#39;redis&amp;#39;, {port: 6379});

var Post = schema.define(&amp;#39;Post&amp;#39;, {
  title: { type: String, length: 255 },
  content: { type: Schema.Text },
  date: { type: Date, default: function () { return new Date; } },
  timestamp: { type: Number,  default: Date.now },
  published: { type: Boolean, default: false, index: true }
});

var User = schema.define(&amp;#39;User&amp;#39;, {
  name: String,
  bio: Schema.Text,
  approved: Boolean,
  joinedAt: Date,
  age: Number
});

User.hasMany(Post, { as: &amp;#39;posts&amp;#39;,  foreignKey: &amp;#39;userId&amp;#39; });
Post.belongsTo(User, { as: &amp;#39;author&amp;#39;, foreignKey: &amp;#39;userId&amp;#39; });

var user = new User({ name: &amp;#39;Alex&amp;#39; });

user.save(function (err) {
  var post = user.posts.build({ title: &amp;#39;Hello world&amp;#39; });
  post.save(console.log);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here&amp;#39;s the cool part, if you want to use a different database, all you have to do is change how your schema connects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var schema = new Schema(&amp;#39;mongodb&amp;#39;, {url: &amp;#39;mongodb://localhost/myapp&amp;#39;});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What&amp;#39;s even cooler, is that you can have multiple schemas connecting to multiple databases at the same time. This could be very handy if for example you want to keep some cached data in Redis, which storing your loosly defined documents in MongoDB and your accounting stuff in MySQL. You could do all that with a single API.&lt;/p&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/1602/jugglingdb&quot;&gt;1602/jugglingdb&lt;/a&gt; is not as well known as &lt;a href=&quot;http://mongoosejs.com/&quot;&gt;Mongoose&lt;/a&gt;, but it&amp;#39;s been in development since 2011 and has a pretty strong following on GitHub. &lt;a href=&quot;http://jugglingdb.co/&quot;&gt;Documentation&lt;/a&gt; is pretty extensive and &lt;a href=&quot;http://jugglingdb.co/roadmap.3.html&quot;&gt;roadmap&lt;/a&gt; gives you a glimpse of where the project is headed and what is currently considered missing. Finally, check out &lt;a href=&quot;https://github.com/npmawesome/example-jugglingdb&quot;&gt;source code&lt;/a&gt; for this article on GitHub and an &lt;a href=&quot;http://runnable.com/U5SP5uAfzMh7SfoX&quot;&gt;interactive example&lt;/a&gt; on Runnable. I&amp;#39;ve included MongoDB, Redis and Memory examples.&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for June 6, 2014</title>
			<link href="http://npmawesome.com/posts/2014-06-06-links"/>
			<updated>2014-06-07T00:39:31.000Z</updated>
			<id>http://npmawesome.com/posts/2014-06-06-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/npmawesome-logo-512x512.png&quot; class=&quot;hide-on-mobile&quot; width=&quot;150&quot; align=&quot;right&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles&quot;&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stripe.com/blog/open-source-retreat-grantees&quot;&gt;Stripe Open Source Retreat Grantees&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;We received about 120 applications in total. Since we only had a few slots (we in fact were originally going to do two, but we had so much trouble choosing we ended up creating another slot), there were a large number of really awesome projects we had to turn away.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vox.com/2014/5/29/5758542/time-for-the-US-to-use-the-metric-system&quot;&gt;It&amp;#39;s time for the US to use the metric system&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;The United States is the last remaining industrialized nation with no formal commitment to going metric. America&amp;#39;s position is causing unnecessary isolation. It&amp;#39;s an impediment to trade and puts the United States at a disadvantage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/today/post/article/20140524020851-6170480-how-paypal-and-reddit-faked-their-way-to-traction?_mSplash=1&quot;&gt;How Paypal and Reddit faked their way to traction&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;A platform is useless without complementary products. Marketplaces, especially, are dead without sellers posting on them. To solve the chicken-egg problem, some marketplaces create fake supply to attract buyers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slate.com/articles/technology/technology/2014/06/i_sold_my_startup_for_25_5_million_here_s_how_i_did_it.html&quot;&gt;I Sold My Startup for $25.5 Million&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;When I shared the news, the team stared blankly at me, unsure if it was a good thing or a bad thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wicky.nillia.ms/headroom.js/&quot;&gt;Headroom.js&lt;/a&gt; is a lightweight, high-performance JS widget (with no dependencies!) that allows you to react to the user&amp;#39;s scroll. The header on this site is a living example, it slides out of view when scrolling down and slides back in when scrolling up.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jessepollak.github.io/card/&quot;&gt;Card&lt;/a&gt; makes your credit card form better in one line of code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cory/maury&quot;&gt;maury&lt;/a&gt; is an example of processing and visualizing ship course data from open ICOADS Maury data set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;youtube&quot;&gt;YouTube&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=lRyRuQdjAww&quot;&gt;Introduction to gulp.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;In May, &lt;a href=&quot;https://twitter.com/tjholowaychuk&quot;&gt;@tjholowaychuk&lt;/a&gt; was fully or partially responsible for 32MM downloads, or about 10% of all downloads in May: &lt;a href=&quot;http://t.co/AlxA8XVGNN&quot;&gt;http://t.co/AlxA8XVGNN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Laurie Voss (@seldo) &lt;a href=&quot;https://twitter.com/seldo/statuses/474678710390751232&quot;&gt;June 5, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for May 29, 2014</title>
			<link href="http://npmawesome.com/posts/2014-05-29-links"/>
			<updated>2014-05-29T16:50:42.000Z</updated>
			<id>http://npmawesome.com/posts/2014-05-29-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/npmawesome-logo-512x512.png&quot; class=&quot;hide-on-mobile&quot; width=&quot;150&quot; align=&quot;right&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles&quot;&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://socket.io/blog/introducing-socket-io-1-0/&quot;&gt;Introducing Socket.IO 1.0&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;The first version of Socket.IO was created shortly after Node.JS made its first appearance. I had been looking for a framework that easily enabled me to push data from a server to a client for a long time, and even had tried other approaches to server-side JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://googlewebmastercentral.blogspot.ca/2014/05/understanding-web-pages-better.html&quot;&gt;Understanding web pages better&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;… we decided to try to understand pages by executing JavaScript. It’s hard to do that at the scale of the current web, but we decided that it’s worth it. We have been gradually improving how we do this for some time. In the past few months, our indexing system has been rendering a substantial number of web pages more like an average user’s browser with JavaScript turned on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://browsenpm.org/package/browserify-handbook&quot;&gt;browserify-handbook&lt;/a&gt; (Github: &lt;a href=&quot;https://github.com/substack/browserify-handbook&quot;&gt;substack/browserify-handbook&lt;/a&gt;, License: cc-by-3.0) is a great resource for beginners and pros on organizing node apps and modules. Very good read.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://davidwalsh.name/device-state-detection-css-media-queries-javascript&quot;&gt;Device State Detection with CSS Media Queries and JavaScript&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Being able to detect device state at any given moment is important for any number of reasons and so it&amp;#39;s important that web app CSS and JavaScript are in sync with each other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hueniversedotcom.files.wordpress.com/2013/01/hapi-hapi-joi-joi.pdf&quot;&gt;hapi hapi joi joi&lt;/a&gt; - fantastic slides!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bocoup.com/weblog/javascript-relay-with-johnny-five/&quot;&gt;Relay Control with Johnny-Five on Node.js&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;DO NOT TOUCH ANY PART OF THE RELAY WHILE IT&amp;#39;S PLUGGED INTO THE WALL.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jdmaturen.github.io/2013/how-much-is-your-startup-stock-worth.html&quot;&gt;How much is your startup stock worth?&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;You can’t get rich on salary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.objectplayground.com/&quot;&gt;Object Playground&lt;/a&gt; is a tool for visualizing and experimenting with JavaScript object relationships.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/pdfium/&quot;&gt;PDFium&lt;/a&gt; is an open-source PDF rendering engine that is used in Google Chrome.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vittoriozaccaria.net/dyn-css/&quot;&gt;DynCSS&lt;/a&gt; - simple, dynamic CSS rules to give life to your sites.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;This is an amazing &lt;a href=&quot;https://twitter.com/StackOverflow&quot;&gt;@Stackoverflow&lt;/a&gt; answer about Angular (and using jQuery) &lt;a href=&quot;http://t.co/pXoyf0zuN6&quot;&gt;http://t.co/pXoyf0zuN6&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sara Chipps (@SaraJChipps) &lt;a href=&quot;https://twitter.com/SaraJChipps/statuses/468769556765614080&quot;&gt;May 20, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://seanfphotography.blogspot.ca/2014/05/afrikaburm-trickster-2014.html?spref=tw&quot;&gt;AfrikaBurm - Trickster - 2014 photos&lt;/a&gt; - some great photos from the AfrikaBurm festival.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openfontlibrary.org/en/font/fantasque-sans-mono&quot;&gt;Fantasque Sans Mono&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;A programming font, designed with functionality in mind, and with some wibbly-wobbly handwriting-like fuzziness that makes it unassumingly cool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
		</entry>
	
</feed>
