<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>npm awesome</title>
	<subtitle>Daily dose of awesome NPM modules for Node.js, old and new!</subtitle>
	<link href="http://npmawesome.com/atom.xml" rel="self" />
	<link href="http://npmawesome.com" />
	<id>http://npmawesome.com</id>
	<updated>2014-05-23T19:54:14.498Z</updated>
	<author>
		<name>Alex Gorbatchev</name>
	</author>

  
  
  
    
    
    
		<entry>
			<title>Joi</title>
			<link href="http://npmawesome.com/posts/2014-05-23-joi"/>
			<updated>2014-05-23T19:41:03.000Z</updated>
			<id>http://npmawesome.com/posts/2014-05-23-joi</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/9dd0f88c6cdb8b7c034ac5e5cce0e4bbdc8de19e/68747470733a2f2f7261772e6769746875622e636f6d2f7370756d6b6f2f6a6f692f6d61737465722f696d616765732f6a6f692e706e67&quot; width=&quot;100&quot; align=&quot;right&quot;/&gt;
Object validation is a tricky thing. It sounds pretty simple when you first think about it, yet there are a ton of libraries that try to do it. Why is that? I feel like there are just alot of way to approach the subject. [Joi] is a schema validation library that came out of the &lt;a href=&quot;http://www.walmartlabs.com/&quot;&gt;Walmart Labs&lt;/a&gt; efforts and more specifically power validation in the &lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt; server framework.&lt;/p&gt;
&lt;p&gt;Lets check it out!&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;npm install joi
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spumko/joi&quot;&gt;Joi&lt;/a&gt; works by defining a schema. You can validate a single string or number:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Joi = require(&amp;#39;joi&amp;#39;);

// will fail
Joi.string().validate(10, console.log);

// also will fail
Joi.string().email().validate(&amp;#39;hello+gmail.com&amp;#39;, console.log);

// will pass
Joi.string().email().validate(&amp;#39;hello+world@gmail.com&amp;#39;, console.log);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can validate a basic plain schema&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var schema = {counter: Joi.number().min(1).max(10).required()};

// will fail
Joi.validate({counter: 0}, schema, console.log);

// will pass
Joi.validate({counter: 5}, schema, console.log);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, you can do a some pretty complicated validation with field depending on each other:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(30).required(),
    password: Joi.string().regex(/[a-zA-Z0-9]{3,30}/),
    confirmation: Joi.ref(&amp;#39;password&amp;#39;)
  })
  .with(&amp;#39;password&amp;#39;, &amp;#39;confirmation&amp;#39;);

// will fail because `foo` isn&amp;#39;t in the schema at all
Joi.validate({foo: 1}, schema, console.log);

// will fail because `confirmation` is missing
Joi.validate({username: &amp;#39;alex&amp;#39;, password: &amp;#39;qwerty&amp;#39;}, schema, console.log);

// will pass
Joi.validate({
  username: &amp;#39;alex&amp;#39;, password: &amp;#39;qwerty&amp;#39;, confirmation: &amp;#39;qwerty&amp;#39;
}, schema, console.log);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;Here are some other modules you might want to evaluate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chriso/validator.js&quot;&gt;validator.js&lt;/a&gt; is a string validation and sanitization module by &lt;a href=&quot;https://github.com/chriso&quot;&gt;Chris O&amp;#39;Hara&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.finitio.io/&quot;&gt;finito&lt;/a&gt; is a language for capturing information structure by &lt;a href=&quot;https://github.com/llambeau&quot;&gt;Louis Lambeau&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Atinux/schema-inspector&quot;&gt;schema-inspector&lt;/a&gt; is a module to sanitize and validate objects by &lt;a href=&quot;https://github.com/Atinux&quot;&gt;Sébastien Chopin&lt;/a&gt; (&lt;a href=&quot;http://npmawesome.com/posts/2014-01-24-schema-inspector/&quot;&gt;previously featured on npmawesome.com&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, check out &lt;a href=&quot;https://github.com/npmawesome/example-joi&quot;&gt;source code&lt;/a&gt; for this article on GitHub and an &lt;a href=&quot;http://runnable.com/U31mW3RA_pBu7oN-/schema-validation-with-joi-for-node-js-npmawesome-and-nodejitsu&quot;&gt;interative example&lt;/a&gt; on Runnable.&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>changelog</title>
			<link href="http://npmawesome.com/posts/2014-05-23-changelog"/>
			<updated>2014-05-23T18:30:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-05-23-changelog</id>
			<content type="html">&lt;p&gt;&lt;img class=&quot;hide-on-mobile&quot; src=&quot;https://avatars2.githubusercontent.com/u/84792?s=400&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;You fixed &lt;em&gt;all&lt;/em&gt; the bugs, closed some security holes and documented new features in your project. In other words - you did a great job and the next release is ready for the roll-out. But you&amp;#39;re not done just yet! No? What else? You have to update the changelog file, bump the version in the respective &lt;code&gt;package.json&lt;/code&gt; and create a &lt;code&gt;git tag&lt;/code&gt; first. Hm, many steps, right? No more! &lt;a href=&quot;https://github.com/defunctzombie/changelog&quot;&gt;changelog&lt;/a&gt; by &lt;a href=&quot;https://github.com/defunctzombie&quot;&gt;Roman Shtylman&lt;/a&gt; is here to save you.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;p&gt;Personally I&amp;#39;m not just a huge fan of the concept behind &lt;a href=&quot;http://tom.preston-werner.com/2010/08/23/readme-driven-development.html&quot;&gt;Readme Driven Development&lt;/a&gt; but also of planning releases in a changelog file. If this is your workflow as well, you will benefit from &lt;a href=&quot;https://github.com/defunctzombie/changelog&quot;&gt;changelog&lt;/a&gt; - you don&amp;#39;t have to adjust your changelog when releasing a new version by hand. It&amp;#39;s there, anyways, as described above.&lt;/p&gt;
&lt;p&gt;The release workflow consists of many separate tasks which don&amp;#39;t have to be executed manually. They can be handled by &lt;a href=&quot;https://github.com/defunctzombie/changelog&quot;&gt;changelog&lt;/a&gt;. Let&amp;#39;s take a look:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install defunctzombie/changelog
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;initialization&quot;&gt;Initialization&lt;/h2&gt;
&lt;p&gt;If you starting a new project you will want to create a new changelog. Execute:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;changelog --init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create an empty &lt;code&gt;HISTORY.md&lt;/code&gt; file for you which has the following structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# UNRELEASED

  * initial
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;UNRELEASED&lt;/code&gt; section is for all your changes you made or will make in the version you are working on. Look at this as a personal project blog where you keep track of every &lt;em&gt;unreleased&lt;/em&gt; change. No more external &lt;em&gt;todo applications&lt;/em&gt; or what have you. Everything is in the context you are working in – your project.&lt;/p&gt;
&lt;h2 id=&quot;release&quot;&gt;Release&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s say your product is ready for prime time and you want to release the &lt;em&gt;1.0.0&lt;/em&gt; version (OMG!):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;changelog --release 1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will will trigger &lt;code&gt;changelog&lt;/code&gt; to perform the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Convert the first &lt;code&gt;UNRELEASED&lt;/code&gt; section to &lt;code&gt;# 1.0.0 (YYYY-MM-DD)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;version&lt;/code&gt; property in your &lt;em&gt;package.json&lt;/em&gt; accordingly.&lt;/li&gt;
&lt;li&gt;Execute a &lt;code&gt;git commit -m &amp;quot;v1.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute a &lt;code&gt;git tag &amp;quot;v1.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;keep-on-working-&quot;&gt;Keep on working...&lt;/h2&gt;
&lt;p&gt;Every project which does not have a roadmap with future changes is a dead project, right? I hope that the next release is always just around the corner! Next, you should start a new &lt;code&gt;UNRELEASED&lt;/code&gt; section by executing the following and keep on working :)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;changelog --increment
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;There might be other tools like &lt;a href=&quot;https://github.com/defunctzombie/changelog&quot;&gt;changelog&lt;/a&gt; out there but this one fits my personal workflow very well and who knows, maybe yours too. Whatever tools you are using for the release management, I can not emphasize enough how important it is to write a changelog file. Not just for you as a project maintainer but also for communicating to the people who are using your product. &lt;a href=&quot;https://github.com/defunctzombie&quot;&gt;Roman Shtylman&lt;/a&gt; helps with &lt;a href=&quot;https://github.com/defunctzombie/changelog&quot;&gt;changelog&lt;/a&gt; to manifest this notion of centering the versioning workflow around the changelog. Thanks!&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for May 22, 2014</title>
			<link href="http://npmawesome.com/posts/2014-05-22-links"/>
			<updated>2014-05-22T17:26:40.000Z</updated>
			<id>http://npmawesome.com/posts/2014-05-22-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/html5.png&quot; class=&quot;hide-on-mobile&quot; style=&quot;float: right; width: 150px;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles&quot;&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://davidwalsh.name/add-rules-stylesheets&quot;&gt;Add Rules to Stylesheets with JavaScript&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Another way we can make our pages efficient and fast is to dynamically add and remove styles directly to a stylesheet instead of constantly querying the DOM for elements and applying styles.  Here&amp;#39;s how it works!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://antirez.com/news/75&quot;&gt;Redis new data structure: the HyperLogLog&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;There is a class of algorithms that use randomization in order to provide an approximation of the number of unique elements in a set using just a constant, and small, amount of memory. The best of such algorithms currently known is called HyperLogLog, and is due to Philippe Flajolet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/&quot;&gt;Script-injected &amp;quot;async scripts&amp;quot; considered harmful&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;The script-injected pattern offers no benefits over &lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt;. The reason it exists is because &lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt; was not available and preload scanners did not exist back when it was first introduced. However, that era has now passed, and we need to update our best practices to use async attribute instead of script-injected scripts. In short, script-injected &amp;quot;async scripts&amp;quot; considered harmful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es7/observe/&quot;&gt;Data-binding Revolutions with Object.observe()&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;A revolution is coming. There’s a new addition to JavaScript that’s going to change everything you think you know about data-binding. It’s also going to change how many of your MVC libraries approach observing models for edits and updates.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://philipwalton.github.io/solved-by-flexbox/&quot;&gt;Solved by Flexbox&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;This site is not another CSS framework. Instead, its purpose is to showcase problems once hard or impossible to solve with CSS alone, now made trivially easy with Flexbox. And with the recent release of Internet Explorer 11 and Safari 6.1, the latest Flexbox spec is now supported in every modern browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Dawg, RT &lt;a href=&quot;https://twitter.com/ItsKieranTime&quot;&gt;@ItsKieranTime&lt;/a&gt; I&amp;#39;ve found it; the most confusing image on the internet. &lt;a href=&quot;https://twitter.com/search?q=%23KieranPresentsTheInternet&amp;amp;src=hash&quot;&gt;#KieranPresentsTheInternet&lt;/a&gt; &lt;a href=&quot;http://t.co/OUysIaxEfX&quot;&gt;pic.twitter.com/OUysIaxEfX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gingerick Lamar (@odiolasgalletas) &lt;a href=&quot;https://twitter.com/odiolasgalletas/statuses/466103422454730752&quot;&gt;May 13, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for May 20, 2014</title>
			<link href="http://npmawesome.com/posts/2014-05-20-links"/>
			<updated>2014-05-20T19:22:40.000Z</updated>
			<id>http://npmawesome.com/posts/2014-05-20-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/html5.png&quot; class=&quot;hide-on-mobile&quot; style=&quot;float: right; width: 150px;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles&quot;&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://viget.com/extend/gulp-browserify-starter-faq&quot;&gt;Gulp + Browserify: The Everything Post&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;When I was done flipping tables, I set aside my newly acquired Grunt + RequireJS skills, and started over again with Gulp and Browserify to see what all the fuss was about.&lt;/p&gt;
&lt;p&gt;You guys. The internet was right. To save you some googling, doc crawling, and trial and error I went through, I&amp;#39;ve assembled some resources and information I think you&amp;#39;ll find helpful in getting started.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flippinawesome.org/2014/05/12/roll-your-own-asset-pipeline-with-gulp/&quot;&gt;Roll Your Own Asset Pipeline with Gulp&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Gulp is a build system. It’s like Grunt, Make, Rake, and the like. It’s easy to use for the person running it. While it does have a slight learning curve, you’ll find it a super useful tool for all kinds of tasks. It’ll be the fastest weapon in your toolbox for asset compilation (both in terms of time to develop and run time).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thenextweb.com/google/2014/05/20/chrome-35-launches-developer-control-touch-input-new-apis-javascript-features/&quot;&gt;Chrome 35 launches with more developer control&lt;/a&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;More developer control over touch input.&lt;/li&gt;
&lt;li&gt;New JavaScript features.&lt;/li&gt;
&lt;li&gt;Unprefixed Shadow DOM.&lt;/li&gt;
&lt;li&gt;A number of new apps/extension APIs.&lt;/li&gt;
&lt;li&gt;Lots of under the hood changes for stability and performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;DevTools Tip: Select a User Agent from a predefined list, or define an arbitrary one. Gif: &lt;a href=&quot;https://t.co/M5QMInl7Fq&quot;&gt;https://t.co/M5QMInl7Fq&lt;/a&gt; &lt;a href=&quot;http://t.co/9XUDDBXwoO&quot;&gt;pic.twitter.com/9XUDDBXwoO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Umar Hansa (@umaar) &lt;a href=&quot;https://twitter.com/umaar/statuses/468823671923306497&quot;&gt;May 20, 2014&lt;/a&gt;&lt;/blockquote&gt;


&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Miss the &lt;a href=&quot;https://twitter.com/search?q=%23live&amp;amp;src=hash&quot;&gt;#live&lt;/a&gt; demo at &lt;a href=&quot;https://twitter.com/search?q=%23Bitcoin2014&amp;amp;src=hash&quot;&gt;#Bitcoin2014&lt;/a&gt;? Not to worry! &lt;a href=&quot;https://twitter.com/jerallaire&quot;&gt;@jerallaire&lt;/a&gt; walks you through Circle in this &lt;a href=&quot;https://twitter.com/search?q=%23video&amp;amp;src=hash&quot;&gt;#video&lt;/a&gt;: &lt;a href=&quot;http://t.co/hPpRcZ5fy9&quot;&gt;http://t.co/hPpRcZ5fy9&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search?q=%23bitcoin&amp;amp;src=hash&quot;&gt;#bitcoin&lt;/a&gt;&lt;/p&gt;&amp;mdash; Circle Inc. (@circlebits) &lt;a href=&quot;https://twitter.com/circlebits/statuses/467325134706343936&quot;&gt;May 16, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
    
    
    
		<entry>
			<title>longjohn</title>
			<link href="http://npmawesome.com/posts/2014-05-16-longjohn"/>
			<updated>2014-05-20T04:11:55.000Z</updated>
			<id>http://npmawesome.com/posts/2014-05-16-longjohn</id>
			<content type="html">&lt;p&gt;You know that feeling of disapointment when you get an error and the stack trace just abruptly ends and you know for a fact it should be much longer, and much more useful than that?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error: Error message
    at null._onTimeout (/examples/error-module.js:7:29)
    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;#39;m very well familiar with that feeling... Maybe too much? Turns out there&amp;#39;s a way to get much better results in Node with a little bit of magic. Said magic is a module called &lt;a href=&quot;https://github.com/mattinsler/longjohn&quot;&gt;longjohn&lt;/a&gt; by &lt;a href=&quot;https://github.com/mattinsler&quot;&gt;Matt Insler&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;npm install longjohn
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Using &lt;a href=&quot;https://github.com/mattinsler/longjohn&quot;&gt;longjohn&lt;/a&gt; couldn&amp;#39;t get any easier. You just need to &lt;code&gt;require(&amp;#39;longjohn&amp;#39;)&lt;/code&gt; and you are all set. The magic that I mentioned above consists of replacing functions like &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;nextTick&lt;/code&gt; with patched versions that keep track of the stack as it unfolds and as author suggests, this probably shouldn&amp;#39;t be used in production.&lt;/p&gt;
&lt;p&gt;But, after you require &lt;a href=&quot;https://github.com/mattinsler/longjohn&quot;&gt;longjohn&lt;/a&gt;, your short, mildly helpful stack like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error: Error message
    at null._onTimeout (/examples/error-module.js:7:29)
    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Turns into this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error: Error message
    at [object Object].&amp;lt;anonymous&amp;gt; (/examples/error-module.js:7:29)
    at listOnTimeout (timers.js:110:15)
---------------------------------------------
    at delayed (/examples/error-module.js:3:3)
    at delayedError (/examples/error-module.js:7:3)
    at [object Object].&amp;lt;anonymous&amp;gt; (/examples/error-module.js:21:5)
    at listOnTimeout (timers.js:110:15)
---------------------------------------------
    at delayed (/examples/error-module.js:3:3)
    at module.exports (/examples/error-module.js:20:3)
    at Object.&amp;lt;anonymous&amp;gt; (/examples/longjohn.js:2:26)
    at Module._compile (module.js:456:26)
    at Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Module._load (module.js:312:12)
    at Module.runMain (module.js:497:10)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;Getting a full stack is imperative to finding out the root cause of the problem in your code. &lt;a href=&quot;https://github.com/mattinsler/longjohn&quot;&gt;longjohn&lt;/a&gt; addresses that on the Node side. There&amp;#39;s a similiar module that works in the browser called &lt;a href=&quot;https://github.com/btford/zone.js/&quot;&gt;zone.js&lt;/a&gt; by &lt;a href=&quot;https://github.com/btford&quot;&gt;Brian Ford&lt;/a&gt; that I think you should check out as well.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/npmawesome/example-longjohn&quot;&gt;example for this article&lt;/a&gt; on GitHub.&lt;/p&gt;
</content>
		</entry>
	
</feed>
