<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>npm awesome</title>
	<subtitle>Daily dose of awesome NPM modules for Node.js, old and new!</subtitle>
	<link href="http://npmawesome.com/atom.xml" rel="self" />
	<link href="http://npmawesome.com" />
	<id>http://npmawesome.com</id>
	<updated>2014-07-10T19:43:43.425Z</updated>
	<author>
		<name>Alex Gorbatchev</name>
	</author>

  
  
  
    
    
    
    
    
		<entry>
			<title>colorguard</title>
			<link href="http://npmawesome.com/posts/2014-07-09-colorguard"/>
			<updated>2014-07-09T17:04:58.000Z</updated>
			<id>http://npmawesome.com/posts/2014-07-09-colorguard</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/96554?s=400&quot; width=&quot;100&quot; align=&quot;right&quot;/&gt;
When a small web project gains traction and more people join and begin editing the CSS files, it becomes progressively more difficult to keep everything consistent. Creative people hand off a new element style to a developer who just joined the team. Our protagonist has been around the block and promptly opens up a favorite color picker and grabs the colors from the JPEG. It looks good. Next day same things happens, and then again and again.&lt;/p&gt;
&lt;p&gt;In a short amount of time there are now 20 color values in the CSS that are all factually different from each other yet represent the same color visually. &lt;a href=&quot;http://browsenpm.org/package/colorguard&quot;&gt;colorguard&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/SlexAxton/css-colorguard&quot;&gt;SlexAxton/css-colorguard&lt;/a&gt;, License: Apache 2) by &lt;a href=&quot;https://github.com/SlexAxton&quot;&gt;Alex Sexton&lt;/a&gt; helps you maintain the color set that you want, and warns you when colors you&amp;#39;ve added are too similar to ones that already exist.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;npm install colorguard
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;# Just regular
colorguard --file style.css

# pipe a file
cat file.css | colorguard

# Threshold is available via command line
colorguard --file style.css --threshold 3

# The other options are too hard to type, so just pass it a json object
# with `ignore` or `whitelist` properties (overrides `--threshold option`)
colorguard --file style.css --options colorguard.json

# Change the output type to full json (includes stats)
colorguard --file style.css --format json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example output&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ colorguard --file test/fixtures/simple.css
Collision: #020202, #000000
  - #020202 [line: 2] is too close (0.3146196209793196) to #000000 [line: 2, 3, 7, 12, 13, 16, 17]
Collision: #020202, #010101
  - #020202 [line: 2] is too close (0.1574963682909058) to #010101 [line: 20]
Collision: #000000, #010101
  - #000000 [line: 2, 3, 7, 12, 13, 16, 17] is too close (0.15712369811016996) to #010101 [line: 20]

$ cat test/fixtures/simple.css | colorguard --format json
{&amp;quot;collisions&amp;quot;:[{&amp;quot;colors&amp;quot;:[{&amp;quot;rgb&amp;quot;:&amp;quot;#020202&amp;quot;,&amp;quot;lines&amp;quot;:[2]},{&amp;quot;rgb&amp;quot;:&amp;quot;#000000&amp;quot;,&amp;quot;lines&amp;quot;:[2,3,7,
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;api&quot;&gt;API&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;var colorguard = require(&amp;#39;colorguard&amp;#39;);
var fs = require(&amp;#39;fs&amp;#39;);
var css = fs.readFileSync(&amp;#39;./file.css&amp;#39;, &amp;#39;utf8&amp;#39;);

var output = colorguard.inspect(css, {
  // 0 through 100. Lower is more similar. Anything below 3 warns you.
  // 3 is the default threshold, but that&amp;#39;s mostly personal opinion
  threshold: 3,

  // This color is just ignored entirely (use with caution)
  ignore: [&amp;quot;#030303&amp;quot;],

  // These color combinations are ignored (usually use this)
  whitelist: [[&amp;quot;#000000&amp;quot;, &amp;quot;#010101&amp;quot;]]
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;build-tools&quot;&gt;Build Tools&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://browsenpm.org/package/colorguard&quot;&gt;colorguard&lt;/a&gt; can also be used in conjunction with &lt;a href=&quot;http://browsenpm.org/package/gulp&quot;&gt;Gulp&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/gulpjs/gulp&quot;&gt;gulpjs/gulp&lt;/a&gt;, License: MIT), &lt;a href=&quot;http://browsenpm.org/package/grunt&quot;&gt;Grunt&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/gruntjs/grunt&quot;&gt;gruntjs/grunt&lt;/a&gt;, License: MIT) and &lt;a href=&quot;http://browsenpm.org/package/broccoli&quot;&gt;Broccoli&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/broccolijs/broccoli&quot;&gt;broccolijs/broccoli&lt;/a&gt;, License: MIT) build systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://browsenpm.org/package/gulp-colorguard&quot;&gt;gulp-colorguard&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/pgilad/gulp-colorguard&quot;&gt;pgilad/gulp-colorguard&lt;/a&gt;, License: MIT)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://browsenpm.org/package/broccoli-colorguard&quot;&gt;broccoli-colorguard&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/SlexAxton/broccoli-colorguard&quot;&gt;SlexAxton/broccoli-colorguard&lt;/a&gt;, License: Apache 2)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://browsenpm.org/package/grunt-colorguard&quot;&gt;grunt-colorguard&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/elliottwilliams/grunt-colorguard&quot;&gt;elliottwilliams/grunt-colorguard&lt;/a&gt;, License: MIT)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-else-&quot;&gt;What Else?&lt;/h2&gt;
&lt;p&gt;Checkout the &lt;a href=&quot;http://runnable.com/U72CW5aEx3ISuIdl/colorguard-module-example-for-node-js-for-nodejitsu-npmawesome-css-and-colors&quot;&gt;runnable&lt;/a&gt; example and &lt;a href=&quot;https://github.com/npmawesome/example-colorguard&quot;&gt;github example repository&lt;/a&gt;.&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>mag</title>
			<link href="http://npmawesome.com/posts/2014-07-08-mag"/>
			<updated>2014-07-08T17:02:58.000Z</updated>
			<id>http://npmawesome.com/posts/2014-07-08-mag</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/780935?s=400&quot; width=&quot;100&quot; align=&quot;right&quot;/&gt;
My name is &lt;a href=&quot;https://github.com/mahnunchik&quot;&gt;Eugeny Vlasenko&lt;/a&gt; and I want to introduce my logging module called &lt;a href=&quot;http://browsenpm.org/package/mag&quot;&gt;mag&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/mahnunchik/mag&quot;&gt;mahnunchik/mag&lt;/a&gt;, License: MIT). There are lots of full-featured logging frameworks such as &lt;a href=&quot;http://browsenpm.org/package/bunyan&quot;&gt;Bunyan&lt;/a&gt; [GitHub: &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;trentm/node-bunyan&lt;/a&gt;, License: MIT) &lt;a href=&quot;http://browsenpm.org/package/node-bunyan&quot;&gt;Winston&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/flatiron/winston&quot;&gt;flatiron/winston&lt;/a&gt;, License: MIT) or &lt;a href=&quot;http://browsenpm.org/package/log4js&quot;&gt;log4js&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/nomiddlename/log4js-node, License: MIT&quot;&gt;nomiddlename/log4js-node&lt;/a&gt;. Why write another one? Personally, I subscribe to the &lt;a href=&quot;http://12factor.net&quot;&gt;twelve-factor app methodology&lt;/a&gt; and more specifically &lt;a href=&quot;http://12factor.net/logs&quot;&gt;the part about logs&lt;/a&gt;. Another cool thing about &lt;code&gt;mag&lt;/code&gt; is that it’s fully built on &lt;a href=&quot;https://www.npmjs.org/package/readable-stream&quot;&gt;Streams3&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;npm install mag
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;twelve-factor-app-logging&quot;&gt;Twelve-factor app logging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Logs are the stream of time-ordered events.&lt;/li&gt;
&lt;li&gt;App never concerns itself with routing or storage of its output stream.&lt;/li&gt;
&lt;li&gt;App should not attempt to write to or manage logfiles.&lt;/li&gt;
&lt;li&gt;App should write its event stream, unbuffered, to stdout.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;here-s-how-to-use-mag&quot;&gt;Here’s how to use Mag&lt;/h2&gt;
&lt;h3 id=&quot;step-1&quot;&gt;Step 1&lt;/h3&gt;
&lt;p&gt;When you start developing an application you do not want to spend time configuring the logger, you just want be building features. You can just require &lt;code&gt;mag&lt;/code&gt; (one line more than console usage =) and use it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var logger = require(&amp;#39;mag&amp;#39;)();
logger.info(&amp;#39;my great application is running!&amp;#39;);

// 01:27:36.427 &amp;lt;INFORMATIONAL&amp;gt; my great application is running!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You get a well formatted message with a timestamp. Done!&lt;/p&gt;
&lt;h3 id=&quot;step-2&quot;&gt;Step 2&lt;/h3&gt;
&lt;p&gt;When your application begins to grow and you want to visually separate messages from different parts of application, you can start using the namespaces feature of &lt;code&gt;mag&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var mag = require(&amp;#39;mag&amp;#39;);

var logger = mag(&amp;#39;my-app&amp;#39;);
var libLogger = mag(&amp;#39;my-lib&amp;#39;);

logger.info(&amp;#39;my great application is running&amp;#39;);
libLogger.debug(&amp;#39;my library is running too&amp;#39;);

// 22:36:24.245 [my-app] &amp;lt;INFORMATIONAL&amp;gt; my great application is running
// 22:36:24.246 [my-lib] &amp;lt;DEBUG&amp;gt; my library is running too
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step-3&quot;&gt;Step 3&lt;/h3&gt;
&lt;p&gt;When your application is finally ready for production, it is time to think about the logging format. Should it be text line by line? Maybe JSON?. Should entire error stack be printed or only a few lines? At this time you can require &lt;code&gt;mag-hub&lt;/code&gt; module and configure the message format once in your application:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var hub = require(&amp;#39;mag-hub&amp;#39;);

// Formatters
var info = require(&amp;#39;mag-process-info&amp;#39;);
var format = require(&amp;#39;mag-format-message&amp;#39;);
var colored = require(&amp;#39;mag-colored-output&amp;#39;);

var myCustomFormatter = require(&amp;#39;./my-custom-formatter.js&amp;#39;);

hub.pipe(info())
  .pipe(format())
  .pipe(myCustomFormatter())
  .pipe(colored())
  .pipe(process.stdout);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mag&lt;/code&gt; requires &lt;code&gt;mag-stream&lt;/code&gt; module as a output for its log objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mag-stream&lt;/code&gt; tries to require top level &lt;code&gt;mag-hub&lt;/code&gt; module&lt;/li&gt;
&lt;li&gt;if it fails then &lt;code&gt;mag-stream&lt;/code&gt; requires &lt;code&gt;mag-fallback&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mag-fallback&lt;/code&gt; is the fallback formatter which is essentially the same as using a &lt;code&gt;console&lt;/code&gt; with a timestamp.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mag does not come bundled with any transports, even formatters are in separate modules. You could potentially make log management based on mag, but I recommend sticking with the &lt;a href=&quot;http://12factor.net/logs&quot;&gt;twelve-factor app&lt;/a&gt; methodology again and keep it simple. Use a log collector from Splunk or Loggly to drain the syslog instead.&lt;/p&gt;
&lt;h2 id=&quot;related-modules&quot;&gt;Related Modules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://browsenpm.org/package/mag-logger-facade&quot;&gt;mag-logger-facade&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/manhunchik/mag-logger-facade&quot;&gt;mahnunchik/mag-logger-facade&lt;/a&gt;, License: MIT)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://browsenpm.org/package/mag-stream&quot;&gt;mag-stream&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/manhunchik/mag-stream&quot;&gt;mahnunchik/mag-stream&lt;/a&gt;, License: MIT)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://browsenpm.org/package/mag-hub&quot;&gt;mag-hub&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/manhunchik/mag-hub&quot;&gt;mahnunchik/mag-hub&lt;/a&gt;, License: MIT)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://browsenpm.org/package/mag-fallback&quot;&gt;mag-fallback&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/manhunchik/mag-fallback&quot;&gt;mahnunchik/mag-fallback&lt;/a&gt;, License: MIT)&lt;/li&gt;
&lt;/ul&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for July 3, 2014</title>
			<link href="http://npmawesome.com/posts/2014-07-03-links"/>
			<updated>2014-07-03T17:25:02.000Z</updated>
			<id>http://npmawesome.com/posts/2014-07-03-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://bost.ocks.org/mike/algorithms/starry-night-detail.jpg&quot; class=&quot;hide-on-mobile&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles&quot;&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bost.ocks.org/mike/algorithms/&quot;&gt;Visualizing Algorithms&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Algorithms are a fascinating use case for visualization. To visualize an algorithm, we don’t merely fit data to a chart; there is no primary dataset. Instead there are logical rules that describe behavior. This may be why algorithm visualizations are so unusual, as designers experiment with novel forms to better communicate. This is reason enough to study them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;The introduction to Reactive Programming you&amp;#39;ve been missing&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;The hardest part of the learning journey is thinking in FRP. It&amp;#39;s a lot about letting go of old imperative and stateful habits of typical programming, and forcing your brain to work in a different paradigm. I haven&amp;#39;t found any guide on the internet in this aspect, and I think the world deserves a practical tutorial on how to think in FRP, so that you can get started. Library documentation can light your way after that. I hope this helps you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reset.me/story/howpsychedelicssavedmylife&quot;&gt;How Psychedelics Saved My Life&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;I founded the website reset.me, to produce and aggregate journalism on consciousness, natural medicines, and therapies.  Psychedelic explorer Terrence McKenna compared taking psychedelics to hitting the ‘reset button’ on your internal hard drive, clearing out the junk, and starting over.  I created reset.me to help connect those who need to hit the ‘reset button’ in life with journalism covering the tools that enable us to heal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thinkster.io/angularjs/eIaGNOAlOk/angularjs-providers&quot;&gt;AngularJS - Providers&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Factories are a common paradigm in Angular that allow you to configure a function that returns an object which can be then injected into controllers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.atom.io/2014/07/02/moving-atom-to-react.html&quot;&gt;Moving Atom To React&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Performance is a top priority for the Atom team, and recently we’ve been focusing on making basic text editing smoother and more responsive. After some initial incremental progress, we decided to take a step back and rewrite the editor component&amp;#39;s view layer with a superior framework and a better understanding of the problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NYTimes/ice&quot;&gt;Ice&lt;/a&gt; is a track changes implementation, built in javascript, for anything that is contenteditable on the web. Conceived by the CMS Group at The New York Times, ice is powering the editor used for writing articles in the newsroom.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://octicons.github.com/&quot;&gt;Octicons&lt;/a&gt; - github icons!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;startups&quot;&gt;Startups&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.craftcoffee.com&quot;&gt;Craft Coffee&lt;/a&gt; - the world&amp;#39;s best coffee, expertly chosen and delivered to your doorstep.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.candyjapan.com/&quot;&gt;Candy Japan&lt;/a&gt; - Japanese candy surprises in your mailbox twice a month. Free shipping even to United States.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.parkopedia.com&quot;&gt;Parkopedia&lt;/a&gt; is a wikipedia for parking - add, edit and review parking information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;youtube&quot;&gt;YouTube&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8zcWQVdh3SQ&quot;&gt;API Testing and Monitoring with Frisby.js - SF Node.JS talk by Garland Kan&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;An increasing number of applications are built with APIs for internal services communicating with each other and an external API. These critical APIs must be monitored. In this talk, Garland Kan (Engineer, Algorithms.io and AutoDevBot.com), explains how engineers can use Frisby.JS as an API testing and monitoring tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;apps&quot;&gt;Apps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.macbartender.com/&quot;&gt;Bartender&lt;/a&gt; lets you organize your menu bar apps, by hiding them, rearranging them, or moving them to Bartender&amp;#39;s Bar. You can display the full menu bar, set options to have menu bar items show in the menu bar when they have updated, or have them always visible in Bartender&amp;#39;s Bar.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unix&quot;&gt;Unix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd -&lt;/code&gt; to go back to the previous directory where you just were.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Google Maps | AngularJS directives for the Google Maps Javascript API - &lt;a href=&quot;http://t.co/WzfDvtNgAb&quot;&gt;http://t.co/WzfDvtNgAb&lt;/a&gt; &lt;a href=&quot;http://t.co/y9Gqaa0vTh&quot;&gt;pic.twitter.com/y9Gqaa0vTh&lt;/a&gt;&lt;/p&gt;&amp;mdash; Angular-js Directive (@ng_directives) &lt;a href=&quot;https://twitter.com/ng_directives/statuses/482169124840566785&quot;&gt;June 26, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.instructables.com/tag/type-id/category-food/channel-cocktails-and-mocktails/&quot;&gt;Instructables Cocktails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Ten open source Node.js apps</title>
			<link href="http://npmawesome.com/posts/2014-07-01-ten-open-source-nodejs-apps"/>
			<updated>2014-07-01T17:28:58.000Z</updated>
			<id>http://npmawesome.com/posts/2014-07-01-ten-open-source-nodejs-apps</id>
			<content type="html">&lt;p&gt;In this article we are going to quickly look at 10 open source Node.js applications. I want to shed some light on a few awesome Node.js projects for the sake of exposure and hope that you (just like me) would read and learn from their source code even if the applications themselves are of no interest to you.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;strider-cd&quot;&gt;Strider CD&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://browsenpm.org/package/strider&quot;&gt;Strider CD&lt;/a&gt; [GitHub: &lt;a href=&quot;https://github.com/Strider-CD/strider&quot;&gt;Strider-CD/strider&lt;/a&gt;, License: BSD] is Continuous Deployment / Continuous Integration platform.&lt;/p&gt;
&lt;p&gt;Getting started is very simple. Simply add your GitHub projects to strider, and relax as the tight integration means your tests will run on every commit. &lt;a href=&quot;https://www.youtube.com/watch?v=whVH24yQSHI&quot;&gt;Checkout the YouTube demo&lt;/a&gt; for a 4 minute introduction.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/strider.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;popcorn-time&quot;&gt;Popcorn Time&lt;/h2&gt;
&lt;p&gt;Popcorn Time [GitHub: &lt;a href=&quot;https://github.com/popcorn-official/popcorn-app&quot;&gt;popcorn-official/popcorn-app&lt;/a&gt;, License: GPL] allows any computer user to watch movies easily streaming from torrents, without any particular knowledge. It is, in my opinion, the most interesting applications technology wise in this list with a good amount of &lt;a href=&quot;https://torrentfreak.com/popcorn-time-devs-drop-like-flies-but-no-one-will-talk-140420/&quot;&gt;controversy&lt;/a&gt; to boot.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a desktop app build on top of the node-webkit [GitHub: &lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;rogerwang/node-webkit&lt;/a&gt;, License: MIT] that is able to stream and play a torrent movie practicaly in real time... and it&amp;#39;s all JavaScript. Seriously cool stuff!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/popcorn1.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/popcorn2.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;mediacenterjs&quot;&gt;MediacenterJS&lt;/h2&gt;
&lt;p&gt;MediacenterJS [GitHub: &lt;a href=&quot;https://github.com/jansmolders86/mediacenterjs&quot;&gt;jansmolders86/mediacenterjs&lt;/a&gt;, License: GPL] is a media center (like for instance &lt;a href=&quot;http://xbmc.org/&quot;&gt;XBMC&lt;/a&gt;) running completely from the comfort of your browser. The server application runs on Windows, MAC and Linux systems, the client runs in every modern browser.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/mediacenterjs.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;kiwiirc&quot;&gt;KiwiIRC&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://browsenpm.org/package/kiwiirc&quot;&gt;KiwiIRC&lt;/a&gt; [GitHub: &lt;a href=&quot;https://github.com/prawnsalad/KiwiIRC&quot;&gt;prawnsalad/KiwiIRC&lt;/a&gt;, License: AGPL] is a fully featured IRC client that can be extended to suit almost any needs. Using the web application is extremly simple even without any IRC knowledge as all the common needs are built directly into the UI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/kiwiirc.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;slate&quot;&gt;Slate&lt;/h2&gt;
&lt;p&gt;Slate [GitHub: &lt;a href=&quot;https://github.com/slate/slate&quot;&gt;slate/slate&lt;/a&gt;, License: MIT] is a modern minimalistic IRC client, completely extensible through plugins and built with web technologies and for OSX, Linux, and eventually Windows.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/slate.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;david&quot;&gt;David&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://browsenpm.org/package/david&quot;&gt;David&lt;/a&gt; [GitHub: &lt;a href=&quot;https://github.com/alanshaw/david-www&quot;&gt;alanshaw/david-www&lt;/a&gt;, License: MIT] is a web service that tells you when your project NPM dependencies are out of date.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/david.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;shields&quot;&gt;Shields&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://browsenpm.org/package/gh-badges&quot;&gt;Shields&lt;/a&gt; (GitHub: &lt;a href=&quot;https://github.com/badges/shields&quot;&gt;badges/shields&lt;/a&gt;, License: CC0) is a service that provides legible &amp;amp; concise status badges for third-party codebase services, like those that you see aplenty all over GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/shields.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;i-love-open-source&quot;&gt;I Love Open Source&lt;/h2&gt;
&lt;p&gt;I Love Open Source [GitHub: &lt;a href=&quot;https://github.com/codio/iloveopensource&quot;&gt;codio/iloveopensource&lt;/a&gt;, License: MIT] is a way of encouraging users of Open Source code to express their gratitude through a simple acknowledgement page. Along the way, they are gently offered a chance to donate cash or just thanks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/iloveopensource.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;browsenpm-org&quot;&gt;browsenpm.org&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://browsenpm.org/package/browsenpm&quot;&gt;browsenpm.org&lt;/a&gt; [GitHub: &lt;a href=&quot;https://github.com/nodejitsu/browsenpm.org&quot;&gt;nodejitsu/browsenpm.org&lt;/a&gt;, License: MIT] allows you to browse packages, users, code, stats and more the public npm registry in style.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/browsenpm.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;npmjs-org&quot;&gt;npmjs.org&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://browsenpm.org/package/npm-www&quot;&gt;npmjs.org&lt;/a&gt; [GitHub: &lt;a href=&quot;https://github.com/npm/npm-www&quot;&gt;npm/npm-www&lt;/a&gt;, License: BSD] is the source for npmjs.org that you probably have seen many times before but might have not realized was open for anyone to see and contribute to.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/ten-open-source-nodejs-apps/npmjs.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Have you seen other interesting applications written in Node.js? Please post them in comments!&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for June 30, 2014</title>
			<link href="http://npmawesome.com/posts/2014-06-30-links"/>
			<updated>2014-06-30T16:43:28.000Z</updated>
			<id>http://npmawesome.com/posts/2014-06-30-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/docker.png&quot; class=&quot;hide-on-mobile&quot; width=&quot;150&quot; align=&quot;right&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles&quot;&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.joyent.com/developers/node/design/errors&quot;&gt;Error Handling in Node.js&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Error handling is a pain, and it&amp;#39;s easy to get by for a long time in Node.js without dealing with many errors correctly. But building robust Node.js apps requires dealing properly with errors, and it&amp;#39;s not hard to learn how.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/mongodb/mongodb-and-amazon-web-services-deploying-for-high-availability-31642339&quot;&gt;MongoDB and Amazon Web Services: Deploying for High Availability&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Best practices are meant to be a sensible starting point&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.ponyfoo.com/2014/05/17/css-the-good-parts&quot;&gt;CSS: The Good Parts&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;This style guide is a jab at solving collisions between CSS class names, and issues that ultimately lead to confusion, having to use !important rules, copying and pasting style declarations, and other awful aspects of CSS developments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cambus.net/emulators-written-in-javascript/&quot;&gt;Emulators written in JavaScript&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;This list started as a compilation of JavaScript emulators posted to Echo JS over the years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.abhinav.ca/blog/2014/06/17/develop-a-nodejs-app-with-docker/&quot;&gt;Develop a NodeJS App With Docker&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;This is the first of two posts. This post covers a somewhat detailed tutorial on using Docker as a replacement for Vagrant when developing a Node app using the Express framework. To make things a bit non-trivial, the app will persist session information in Redis using the connect-redid middleware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.candyjapan.com/candy-japan-crosses-10000-mrr&quot;&gt;Candy Japan crosses $10000 MRR&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Out of that $10k / month revenue of course not all (not even most) is profit. Compared to a SaaS, the costs are very high, but I&amp;#39;ve carved enough profit margin to reach an income level similar to a Japanese salaryman now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flowjs/flow.js&quot;&gt;flow.js&lt;/a&gt; is a JavaScript library providing multiple simultaneous, stable, fault-tolerant and resumable/restartable file uploads via the HTML5 File API.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;startups&quot;&gt;Startups&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.counterparty.co&quot;&gt;Counterparty&lt;/a&gt; is a global marketplace and financial platform built on Bitcoin, which makes powerful peer-to-peer financial instruments available to anyone with an Internet connection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugsnag.com/&quot;&gt;bugsnap&lt;/a&gt;’s cross platform error monitoring helps you ship with confidence.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learnable.com/&quot;&gt;Learnable&lt;/a&gt; is a resource to learn web development and design from the experts.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.trycelery.com/&quot;&gt;Celery&lt;/a&gt; is the easiest way to accept orders now and charge when you&amp;#39;re ready.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;youtube&quot;&gt;YouTube&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Dh8kp1AcRg0&quot;&gt;Amazon DynamoDB Design Patterns for Ultra-High Performance Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unix&quot;&gt;Unix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hippyvm.com/&quot;&gt;HippyVM&lt;/a&gt; on average is 7.3x faster than stock PHP and 2x faster than Facebook’s HHVM.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;New &lt;a href=&quot;https://twitter.com/hashtag/dockercon?src=hash&quot;&gt;#dockercon&lt;/a&gt; 14 video: &amp;quot;Automated &lt;a href=&quot;https://twitter.com/chef&quot;&gt;@chef&lt;/a&gt; cookbook testing with &lt;a href=&quot;https://twitter.com/droneio&quot;&gt;@droneio&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/github&quot;&gt;@github&lt;/a&gt;&amp;quot; &lt;a href=&quot;http://t.co/7h13hXi2V3&quot;&gt;http://t.co/7h13hXi2V3&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/pczarkowski&quot;&gt;@pczarkowski&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/Rackspace&quot;&gt;@Rackspace&lt;/a&gt;&lt;/p&gt;&amp;mdash; Docker (@docker) &lt;a href=&quot;https://twitter.com/docker/statuses/482242087811702784&quot;&gt;June 26, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
</feed>
