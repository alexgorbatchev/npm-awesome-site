<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>npm awesome</title>
	<subtitle>Daily dose of awesome NPM modules for Node.js, old and new!</subtitle>
	<link href="http://npmawesome.com/atom.xml" rel="self" />
	<link href="http://npmawesome.com" />
	<id>http://npmawesome.com</id>
	<updated>2014-04-28T17:09:11.776Z</updated>
	<author>
		<name>Alex Gorbatchev</name>
	</author>

  
  
  
    
    
    
    
    
		<entry>
			<title>angular-injector</title>
			<link href="http://npmawesome.com/posts/2014-04-28-angular-injector"/>
			<updated>2014-04-28T16:24:35.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-28-angular-injector</id>
			<content type="html">&lt;p&gt;&lt;img class=&quot;hide-on-mobile&quot; src=&quot;http://npmawesome.com/images/posts/../authors/alexgorbatchev.jpg&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;
&lt;a href=&quot;https://github.com/alexgorbatchev/angular-injector&quot;&gt;angular-injector&lt;/a&gt; module by &lt;a href=&quot;https://github.com/alexgorbatchev&quot;&gt;Alex Gorbatchev&lt;/a&gt; (me) is meant to address minification problem with &lt;a href=&quot;https://www.angularjs.org/&quot;&gt;angular.js&lt;/a&gt; dependency injection that &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; does not - work with any dependency injection syntax.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;npm install angular-injector
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/angular-injector&quot;&gt;angular-injector&lt;/a&gt; works exactly the same way as &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; meaning that it modifies the source during build time. Unlike &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; however, it&amp;#39;s less dependent on the syntax. In fact, any function wrapped in a &lt;code&gt;ng(func)&lt;/code&gt; call will be escaped with &lt;code&gt;[&amp;#39;dep1&amp;#39;, &amp;#39;dep2&amp;#39;, func]&lt;/code&gt; injector style.&lt;/p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Write your angular functions like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory(&amp;#39;greeter&amp;#39;, ng(function($window) {
  // ...
}));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then run them through angular-injector and it will become:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory(&amp;#39;greeter&amp;#39;, [&amp;#39;$window&amp;#39;, function($window) {
  // ...
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You don&amp;#39;t need to declare ng function anywhere and it could be customized to anything. If you wanted to get fancy, use something like &lt;code&gt;ƒ&lt;/code&gt; or &lt;code&gt;∑&lt;/code&gt; to never have any naming conflicts. Or even an emoji if you feeling wild.&lt;/p&gt;
&lt;p&gt;This syntax works particularly well in CoffeeScript and is literally 2-3 extra characters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory &amp;#39;greeter&amp;#39;, ng ($window) -&amp;gt;
  # ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;build-plugins&quot;&gt;Build Plugins&lt;/h2&gt;
&lt;p&gt;Of course, I wouldn&amp;#39;t just write this module without supporting &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp.js&lt;/a&gt; and &lt;a href=&quot;http://gruntjs.com/&quot;&gt;grunt.js&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/gulp-angular-injector&quot;&gt;gulp-angular-injector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/grunt-angular-injector&quot;&gt;grunt-angular-injector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;The biggest downside of this method is basically remembering to add the &lt;code&gt;ng()&lt;/code&gt; wrapper. I found that after about half a day that becomes a habit and not an issue. Check out the plugins and let me know what you think!&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>platform.js</title>
			<link href="http://npmawesome.com/posts/2014-04-23-platform-js"/>
			<updated>2014-04-24T00:30:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-23-platform-js</id>
			<content type="html">&lt;p&gt;&lt;img class=&quot;hide-on-mobile&quot; src=&quot;https://avatars2.githubusercontent.com/u/4303?s=400&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;
&lt;img class=&quot;hide-on-mobile&quot; src=&quot;https://avatars3.githubusercontent.com/u/81942?s=400&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;
There are plenty of different runtime environments in JavaScript-land. Whereas this is a good thing there are also situations where the fragmentation is hindrance. Situations in which your application has to gather information about the platform it is running on. This is where &lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt; by &lt;a href=&quot;https://github.com/jdalton&quot;&gt;John-David Dalton&lt;/a&gt; and &lt;a href=&quot;https://github.com/mathiasbynens&quot;&gt;Mathias Bynens&lt;/a&gt; comes to the game.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s dive into this module with an example. Assume that you have to know if your application runs on &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/de/docs/Rhino&quot;&gt;Rhino&lt;/a&gt;. This could be &lt;em&gt;easily&lt;/em&gt; done by checking the type of the &lt;code&gt;global&lt;/code&gt; variable. In Node.js it is an object whereas Rhino provides a function. Boom! There you go. You can formulate a condition now! But what if you also have to know if your application is running in a browser? Well, game over. Too complicated. The good news is you don&amp;#39;t have to do such things anymore.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt; is a platform detection library which aim is to work on all platforms. It squeeze as much information out of the underlying JavaScript environment as it could and wraps them in a really nice informal abstraction. You are able to grab data like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of the platform (e.g. Google Chrome, Node.js, etc.)&lt;/li&gt;
&lt;li&gt;The version of the platform&lt;/li&gt;
&lt;li&gt;The rendering engine (of the browser; e.g. Gecko, Trident, etc.)&lt;/li&gt;
&lt;li&gt;The manufacturer of the product (e.g. Apple)&lt;/li&gt;
&lt;li&gt;The name of the product (e.g. iPhone, Kindle, etc.)&lt;/li&gt;
&lt;li&gt;The name of the operating system (e.g. iOS 7.0, Mac OS X 10.7.2, etc.)&lt;/li&gt;
&lt;li&gt;The architecture the operating system is build for (e.g. ia32, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;The installation is easy because your package manager flavor is covered. John-David and Mathias provide module descriptors for &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;, &lt;a href=&quot;https://github.com/component/component&quot;&gt;component&lt;/a&gt; and NPM:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install platform
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;The API for using &lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt; is consistent. What differs is the module loading procedure. Consider the &lt;a href=&quot;https://github.com/bestiejs/platform.js/blob/master/README.md&quot;&gt;README&lt;/a&gt; for a brief explanation about how to use the library with an AMD loader for instance. The following usage example refers to Node.js:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var platform = require(&amp;#39;platform&amp;#39;);

console.log(platform.name);  // Node.js
console.log(platform.version); // 0.10.26
console.log(platform.os.architecture); // 32
console.log(platform.os.family); // Linux
console.log(platform.description); // Node.js 0.10.26 on Linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The library provides also a function with which you are able to parse an &lt;a href=&quot;http://www.useragentstring.com/&quot;&gt;user agent string&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var platform = require(&amp;#39;platform&amp;#39;);

var browser = platform.parse(&amp;#39;Mozilla/5.0 (X11; Linux i686; rv:30.0) Gecko/20100101 Firefox/30.0&amp;#39;);

console.log(browser.name); // Firefox
console.log(browser.description); // Firefox 30.0 on Linux i686
console.log(browser.version); // 30.0
console.log(browser.layout); // Gecko
console.log(browser.os); // Linux i686
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you curious to see how it performs in a browser environment, check out this &lt;a href=&quot;http://cdpn.io/tjcEd&quot;&gt;codepen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m pretty sure that you have several use cases in mind where you could use &lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt;, but one warning: Don&amp;#39;t see it as a replacement of feature detection libraries. True to the motto: &lt;em&gt;If it is a Gecko-based rendering engine (because browsers with this engine have all the shiny new feature) then I could use &lt;code&gt;navigator.getUserMedia()&lt;/code&gt;.&lt;/em&gt; Never ever make such assumptions. Look at it more in a way to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;display a tailor-made UI.&lt;/li&gt;
&lt;li&gt;collect statistical data about the devices of your users.&lt;/li&gt;
&lt;li&gt;lazy import own platform-specific modules (e.g. Node.js modules).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt; is a powerful gift when it comes to determining exactly in which environment your application is running. That means, we do not have to write &amp;quot;if-else-if-else-if&amp;quot; statements anymore, folks. We have a rock-solid foundation now!&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for Apr 23, 2014</title>
			<link href="http://npmawesome.com/posts/2014-04-23-links"/>
			<updated>2014-04-23T17:00:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-23-links</id>
			<content type="html">&lt;h2 id=&quot;andr-k-nig&quot;&gt;André König&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/224910?s=400&quot; style=&quot;float: right; width: 250px;&quot;/&gt;
I&amp;#39;m happy to welcome &lt;a href=&quot;https://github.com/akoenig&quot;&gt;André König&lt;/a&gt; to npmawesome! Very excited to publish his first post about &lt;a href=&quot;http://npmawesome.com/posts/2014-04-23-platform-js&quot;&gt;platform.js&lt;/a&gt;! Coming from Bremen, Germany, André is very active on &lt;a href=&quot;https://www.npmjs.org/browse/author/akoenig&quot;&gt;NPM&lt;/a&gt; and better known for &lt;a href=&quot;https://github.com/akoenig/angular-deckgrid&quot;&gt;angular-deckgrid&lt;/a&gt;, &lt;a href=&quot;https://github.com/akoenig/imacss&quot;&gt;imacss&lt;/a&gt; as well as a whole bunch of gulp.js modules. Woot!&lt;/p&gt;
&lt;h2 id=&quot;articles-slides&quot;&gt;Articles &amp;amp; Slides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/nodejs/J59L1AR1lSs/hQfRPDf1Wn0J&quot;&gt;Tim Caswell on history of Node.js callbacks&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shortly after node was made, the concept of the event emitter was added.  We didn&amp;#39;t have the current callback-last style, but had a convention that non-blocking functions would return a special emitter known as a &amp;quot;Promise&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.williambrownstreet.net/blog/2014/04/faster-angularjs-rendering-angularjs-and-reactjs/&quot;&gt;Faster AngularJS Rendering (AngularJS and ReactJS)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you used AngularJs and ran into some performance problems? Using ReactJs rendering becomes much faster. A small examples explains how to use ReactJs for rendering in AngularJs and a comparison is made between native rendering and rendering using ReactJs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://randsinrepose.com/archives/bored-people-quit/&quot;&gt;Bored People Quit&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You call on the motivation and retention police because you believe they can perform the legendary “diving save”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.twilio.com/blog/2014/04/build-interactive-voicemail-for-sports-fans-with-twilio-mongodb-angular-and-node-js-part-one.html&quot;&gt;Build Interactive Voicemail for Sports Fans with Twilio, MongoDB, Angular, and node.js&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this tutorial, we’re going to show how you can build an interactive voicemail (and text message) box to support a marketing campaign around a brand or celebrity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sebastienros/jint&quot;&gt;Jint&lt;/a&gt; is a Javascript interpreter for .NET. Jint doesn&amp;#39;t compile Javascript to .NET bytecode and in this sense might be best suited for projects requiring to run relatively small scripts faster, or which need to run on different platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;~70,000% Growth in Node.js Jobs since January 2011. &lt;a href=&quot;http://t.co/HS2mTrl2ie&quot;&gt;pic.twitter.com/HS2mTrl2ie&lt;/a&gt;&lt;/p&gt;&amp;mdash; Joe McCann (@joemccann) &lt;a href=&quot;https://twitter.com/joemccann/statuses/456489213803122688&quot;&gt;April 16, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;Why isn&amp;#39;t there a bar that plays Star Trek: Deep Space 9 and has dozens of sleepy cats to pet. I&amp;#39;d hang out at that bar.&lt;/p&gt;&amp;mdash; Max Temkin (@MaxTemkin) &lt;a href=&quot;https://twitter.com/MaxTemkin/statuses/458328715491950592&quot;&gt;April 21, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for Apr 19, 2014</title>
			<link href="http://npmawesome.com/posts/2014-04-19-links"/>
			<updated>2014-04-19T17:00:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-19-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/html5.svg&quot; style=&quot;float: right; width: 150px;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles-slides&quot;&gt;Articles &amp;amp; Slides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://scotch.io/tutorials/javascript/build-a-restful-api-using-node-and-express-4&quot;&gt;Build a RESTful API Using Node and Express 4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With the release of Express 4.0 just a few days ago, lots of our Node apps will have some changes in how they handle routing. With the changes in the Express Router, we have more flexibility in how we can define the routes for our applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.sitepoint.com/controlling-arduino-nodejs-johnny-five/&quot;&gt;Controlling an Arduino with NodeJS and Johnny-Five&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Firmata and Johnny-Five make it a lot easier for JavaScript developers to get more involved and develop applications that can interact with, respond to and control Arduino powered technology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://alxhill.com/blog/articles/brunch-coffeescript-angular/&quot;&gt;Brunch - A build system without the Grunt-work&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Brunch compiles, concats and (optionally) minifies your scripts and styles. It can also package JavaScript files into AMDor CommonJS modules. Brunch automatically applies plugins in the correct order to the right files - so with the right plugins, a .coffee file would be converted into a .js file and then minified, with no explicit setup necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HY4d-0Kzp68&quot;&gt;EmberConf 2014 HTMLBars: The Next-Generation of Templating in Ember.js by Erik Bryn and Kris Selden&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i1.ytimg.com/vi/HY4d-0Kzp68/maxresdefault.jpg&quot; style=&quot;width: 400px&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2awbKQ2DLRE#t=211&quot;&gt;Pyro Board: 2D Rubens&amp;#39; Tube!&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i1.ytimg.com/vi/2awbKQ2DLRE/maxresdefault.jpg&quot; style=&quot;width: 400px&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.buzzfeed.com/mjs538/completely-surreal-pictures-of-americas-abandoned-malls&quot;&gt;Completely Surreal Photos Of America’s Abandoned Malls&lt;/a&gt; and a &lt;a href=&quot;https://www.youtube.com/watch?v=ZAo2ue6s5Bc&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://s3-ec.buzzfed.com/static/2014-04/enhanced/webdr06/2/10/enhanced-29364-1396450428-10.jpg&quot; style=&quot;width: 400px&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.buzzfeed.com/ryanhatesthis/all-hail-the-mighty-pizza-cake&quot;&gt;Pizza Cake&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://s3-ec.buzzfed.com/static/2014-04/enhanced/webdr03/18/12/enhanced-buzz-wide-14629-1397837404-8.jpg&quot; style=&quot;width: 400px&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/salomvary/soundcleod&quot;&gt;SoundCleod&lt;/a&gt; is a Mac OS X application which brings SoundCloud to the desktop without using a browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;A NodeJS Perspective on What’s New in MongoDB 2.6, Part I: Text Search &lt;a href=&quot;http://t.co/RCjrLHd2u0&quot;&gt;http://t.co/RCjrLHd2u0&lt;/a&gt;&lt;/p&gt;&amp;mdash; MongoDB (@MongoDB) &lt;a href=&quot;https://twitter.com/MongoDB/statuses/457562812223852545&quot;&gt;April 19, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;omg shut up and take my money! &lt;a href=&quot;https://t.co/UCVqDsakuJ&quot;&gt;https://t.co/UCVqDsakuJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alex Gorbatchev (@alexgorbatchev) &lt;a href=&quot;https://twitter.com/alexgorbatchev/statuses/457219682164940800&quot;&gt;April 18, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for Apr 18, 2014</title>
			<link href="http://npmawesome.com/posts/2014-04-18-links"/>
			<updated>2014-04-18T17:00:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-18-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/html5.svg&quot; style=&quot;float: right; width: 150px;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles-slides&quot;&gt;Articles &amp;amp; Slides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://googleresearch.blogspot.co.uk/2014/04/lens-blur-in-new-google-camera-app.html&quot;&gt;Lens Blur in the new Google Camera app&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Having computed the depth map, we can re-render the photo, blurring pixels by differing amounts depending on the pixel’s depth, aperture and location relative to the focal plane. The focal plane determines which pixels to blur, with the amount of blur increasing proportionally with the distance of each pixel to that focal plane. This is all achieved by simulating a physical lens using the thin lens approximation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.sitepoint.com/controlling-arduino-nodejs-johnny-five/&quot;&gt;Controlling an Arduino with NodeJS and Johnny-Five&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This video aims to help those new to Arduinos and NodeJS understand the basics of getting started. I’ll provide an overview of what you’ll need to do in order to get a Node application speaking to an Arduino using the Johnny-Five JavaScript framework. By the end we will have used the power of JavaScript to turn an LED light on and off!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://chieffancypants.github.io/angular-hotkeys/&quot;&gt;AngularHotkeys.js&lt;/a&gt; - configuration-centric keyboard shortcuts for your angular apps.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lukasz-zak/disqus-here&quot;&gt;disqusHere&lt;/a&gt; - Angular directive for embeding Disqus comments on your site.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flowjs/ng-flow&quot;&gt;Flow.js&lt;/a&gt; is a JavaScript library providing multiple simultaneous, stable and resumable uploads via the HTML5 File API. Library does not require third party dependencies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AlexNisnevich/untrusted&quot;&gt;Untrusted —or— the Continuing Adventures of Dr. Eval&lt;/a&gt; is an exciting Meta-Javascript Adventure Game wherein you guide the dashing, steadfast Dr. Eval through a mysterious MACHINE CONTINUUM, wherein, using only his trusty computer and the TURING-COMPLETE power of Javascript, he must literally ALTER HIS REALITY in order to find his freedom! You must literally edit and re-execute the very Javascript running the game in your browser to save Dr. Eval from this dark and confusing reality!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unix&quot;&gt;Unix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;openssl rand -base64 32&lt;/code&gt; to generate a “random” string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://character-code.com/arrows-html-codes.php&quot;&gt;Arrows HTML Code and Unicode Hexadecimal&lt;/a&gt; ↑↑↓↓←→←→&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;Can’t wait until gulp 4 for non-dependent task support? Try run-sequence! &lt;a href=&quot;https://t.co/PPyJnjA4Jz&quot;&gt;https://t.co/PPyJnjA4Jz&lt;/a&gt;&lt;/p&gt;&amp;mdash; gulp (@gulpjs) &lt;a href=&quot;https://twitter.com/gulpjs/statuses/457120895102754816&quot;&gt;April 18, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
</feed>
