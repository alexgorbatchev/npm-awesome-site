<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>npm awesome</title>
	<subtitle>Daily dose of awesome NPM modules for Node.js, old and new!</subtitle>
	<link href="http://npmawesome.com/atom.xml" rel="self" />
	<link href="http://npmawesome.com" />
	<id>http://npmawesome.com</id>
	<updated>2014-04-29T16:49:25.623Z</updated>
	<author>
		<name>Alex Gorbatchev</name>
	</author>

  
  
  
    
    
    
		<entry>
			<title>Comparing Express, Restify, hapi and LoopBack for building RESTful APIs</title>
			<link href="http://npmawesome.com/posts/2014-04-29-compare-express-restify-hapi-loopback"/>
			<updated>2014-04-29T17:01:54.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-29-compare-express-restify-hapi-loopback</id>
			<content type="html">&lt;p&gt;If you are writing a Node.js application, chances are you going to have some kind of API end points to be consumed by your frond end or expose data for others to take in. This is where &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful APIs&lt;/a&gt; come in. And now you have a dilemma - what tools to use and what approach to take? So many choices...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/confused.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the incredibly active Node.js community, the amount of results for a &lt;a href=&quot;https://www.npmjs.org/search?q=rest&quot;&gt;&amp;quot;rest&amp;quot; search on NPM&lt;/a&gt; is pretty overwhelming. Everyone has their own implementation and approach, but few seem to agree on a common way to go about implementing RESTful APIs in Node.js.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;restful-apis-with-express&quot;&gt;RESTful APIs with Express&lt;/h2&gt;
&lt;p&gt;The most common approach is to just roll your own end points with &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;. This practice allows you to get started quickly, but it becomes burdensome in the long run. Lets look at pros and cons:&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Here&amp;#39;s what a typical end point might look like in &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; using the latest 4.x &lt;code&gt;Router&lt;/code&gt; feature:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var Item = require(&amp;#39;models&amp;#39;).Item;
var app = express();
var itemRoute = express.Router();

itemRoute.param(&amp;#39;itemId&amp;#39;, function(req, res, next, id) {
  Item.findById(req.params.itemId, function(err, item) {
    req.item = item;
    next();
  });
});

itemRoute.route(&amp;#39;/:itemId&amp;#39;)
  .get(function(req, res, next) {
    res.json(req.item);
  })
  .put(function(req, res, next) {
    req.item.set(req.body);
    req.item.save(function(err, item) {
      res.json(item);
    });
  })
  .post(function(req, res, next) {
    var item = new Item(req.body);
    item.save(function(err, item) {
      res.json(item);
    });
  })
  .delete(function(req, res, next) {
    req.item.remove(function(err) {
      res.json({});
    });
  })
  ;

app.use(&amp;#39;/api/items&amp;#39;, itemRoute);
app.listen(8080);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Little learning curve, &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; is nearly a standard for Node.js web application&lt;/li&gt;
&lt;li&gt;Fully customizable&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;All end points need to be created manually, you end up doing a lot of the same code (or worse, start rolling your own libraries after a while)&lt;/li&gt;
&lt;li&gt;Every end point needs to be tested (or at the very least I recommend that you hit the end points with HTTP consumer to make sure they are actually there and don&amp;#39;t throw 500s)&lt;/li&gt;
&lt;li&gt;Refactoring becomes painful because everything needs to be updated everywhere&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t come with anything &amp;quot;standard&amp;quot;, have to figure out your own approach&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; is a great starting point, but eventually you will feel the pain of &amp;quot;roll your own&amp;quot; approach.&lt;/p&gt;
&lt;h2 id=&quot;restful-apis-with-restify&quot;&gt;RESTful APIs with Restify&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; is a relatively old player in the Node.js API field, very stable and being actively developed. It is built specifically to enable you to build correct REST web services and intentionally borrows heavily from &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Because &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; borrows from &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;, the syntax is nearly identical:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var restify = require(&amp;#39;restify&amp;#39;);
var Item = require(&amp;#39;models&amp;#39;).Item;
var app = restify.createServer()

app.use(function(req, res, next) {
  if (req.params.itemId) {
    Item.findById(req.params.itemId, function(err, item) {
      req.item = item;
      next();
    });
  }
  else {
    next();
  }
});

app.get(&amp;#39;/api/items/:itemId&amp;#39;, function(req, res, next) {
  res.send(200, req.item);
});

app.put(&amp;#39;/api/items/:itemId&amp;#39;, function(req, res, next) {
  req.item.set(req.body);
  req.item.save(function(err, item) {
    res.send(204, item);
  });
});

app.post(&amp;#39;/api/items/:itemId&amp;#39;, function(req, res, next) {
  var item = new Item(req.body);
  item.save(function(err, item) {
    res.send(201, item);
  });
});

app.delete(&amp;#39;/api/items/:itemId&amp;#39;, function(req, res, next) {
  req.item.remove(function(err) {
    res.send(204, {});
  });
});

app.listen(8080);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatic DTrace support for all your handlers (if you&amp;#39;re running on a platform that supports DTrace)&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t have unnecessary functionality like templating and rendering&lt;/li&gt;
&lt;li&gt;Built in throttling&lt;/li&gt;
&lt;li&gt;Built in &lt;a href=&quot;http://en.wikipedia.org/wiki/SPDY&quot;&gt;SPDY&lt;/a&gt; support&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;p&gt;The cons are all the same with &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; as they are with &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;, lots of manual labor.&lt;/p&gt;
&lt;h2 id=&quot;restful-apis-with-hapi&quot;&gt;RESTful APIs with hapi&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt; is a lesser known Node.js framework that is getting momentum thanks to fulltime support of the Walmart Labs team. It takes a somewhat different approach from &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; by providing significantly more functionality out of the box for building web servers.&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Here&amp;#39;s the same example re-written using &lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Hapi = require(&amp;#39;hapi&amp;#39;);
var Item = require(&amp;#39;models&amp;#39;).Item;
var server = Hapi.createServer(&amp;#39;0.0.0.0&amp;#39;, 8080);

server.ext(&amp;#39;onPreHandler&amp;#39;, function(req, next) {
  if (req.params.itemId) {
    Item.findById(req.params.itemId, function(err, item) {
      req.item = item;
      next();
    });
  }
  else {
    next();
  }
});

server.route([
  {
    path: &amp;#39;/api/items/{itemId}&amp;#39;,
    method: &amp;#39;GET&amp;#39;,
    config: {
      handler: function(req, reply) {
        reply(req.item);
      }
    }
  },
  {
    path: &amp;#39;/api/items&amp;#39;,
    method: &amp;#39;PUT&amp;#39;,
    config: {
      handler: function(req, reply) {
        req.item.set(req.body);
        req.item.save(function(err, item) {
          res.send(204, item);
        });
      }
    }
  },
  {
    path: &amp;#39;/api/items&amp;#39;,
    method: &amp;#39;POST&amp;#39;,
    config: {
      handler: function(req, reply) {
        var item = new Item(req.body);
        item.save(function(err, item) {
          res.send(201, item);
        });
      }
    }
  },
  {
    path: &amp;#39;/api/items/{itemId}&amp;#39;,
    method: &amp;#39;DELETE&amp;#39;,
    config: {
      handler: function(req, reply) {
        req.item.remove(function(err) {
          res.send(204, {});
        });
      }
    }
  }
]);

server.start();
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Very granular control over request handling&lt;/li&gt;
&lt;li&gt;Detailed API &lt;a href=&quot;https://github.com/spumko/hapi/blob/master/docs/Reference.md&quot;&gt;reference&lt;/a&gt; with support for documentation generation&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;p&gt;As with &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt;, &lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt; gives you great construction blocks, but you are left to your own devices figuring out how to use them.&lt;/p&gt;
&lt;h2 id=&quot;what-else-is-there-&quot;&gt;What else is there?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;, &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; and &lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt; are all great starting points, but in the long run it might not be the right choice if you plan on investing heavily into APIs.&lt;/p&gt;
&lt;h2 id=&quot;loopback&quot;&gt;LoopBack&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://strongloop.com/mobile-application-development/loopback/&quot;&gt;LoopBack&lt;/a&gt; by &lt;a href=&quot;http://strongloop.com&quot;&gt;StrongLoop&lt;/a&gt; is a fully featured Node.js backend framework to connect your consumer applications with data. It adopts &lt;a href=&quot;http://en.wikipedia.org/wiki/Convention_over_configuration&quot;&gt;convention over configuration&lt;/a&gt; mantra popularized by Ruby on Rails.&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var loopback = require(&amp;#39;loopback&amp;#39;);
var Item = require(&amp;#39;./models&amp;#39;).Item;
var app = module.exports = loopback();

app.model(Item);
app.use(&amp;#39;/api&amp;#39;, loopback.rest());
app.listen(8080);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There&amp;#39;s a lot of &amp;quot;magic&amp;quot; happening in the background. But with just 6 lines of code you now have the following end points:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DELETE /items/{id}
GET /items
GET /items/count
GET /items/findOne
GET /items/{id}
GET /items/{id}/exists
POST /items
PUT /items
PUT /items/{id}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/mind-blowing-nph.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To start exploring your own APIs right away, there&amp;#39;s a bundled &lt;code&gt;explorer&lt;/code&gt; module that you can attach to your application:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var explorer = require(&amp;#39;loopback-explorer&amp;#39;);
app.use(&amp;#39;/explorer&amp;#39;, explorer(app, {basePath: &amp;#39;/api&amp;#39;}));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now opening &lt;code&gt;http://localhost:8080/explorer&lt;/code&gt; you get this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/screenshot.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Seriously cool stuff!&lt;/p&gt;
&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Very quick RESTful API development&lt;/li&gt;
&lt;li&gt;Convention over configuration&lt;/li&gt;
&lt;li&gt;Built in models ready to use&lt;/li&gt;
&lt;li&gt;RPC support&lt;/li&gt;
&lt;li&gt;Fully configurable when needed&lt;/li&gt;
&lt;li&gt;Extensive documentation&lt;/li&gt;
&lt;li&gt;Fulltime team working on the project&lt;/li&gt;
&lt;li&gt;Available commercial support&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Learning curve can be pretty steep because there are so many moving parts&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;rpc&quot;&gt;RPC&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;http://strongloop.com/mobile-application-development/loopback/&quot;&gt;LoopBack&lt;/a&gt; example above is so tiny, I feel bad about it. How about we extend it with a quick RPC endpoint to balance things out?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var loopback = require(&amp;#39;loopback&amp;#39;);
var explorer = require(&amp;#39;loopback-explorer&amp;#39;);
var remoting = require(&amp;#39;strong-remoting&amp;#39;);
var Item = require(&amp;#39;./models&amp;#39;).Item;
var app = module.exports = loopback();
var rpc = remoting.create();

function echo(ping, callback) {
  callback(null, ping);
}

echo.shared = true;
echo.accepts = {arg: &amp;#39;ping&amp;#39;};
echo.returns = {arg: &amp;#39;echo&amp;#39;};

rpc.exports.system = {
  echo: echo
};

app.model(Item);
app.use(&amp;#39;/api&amp;#39;, loopback.rest());
app.use(&amp;#39;/explorer&amp;#39;, explorer(app, {basePath: &amp;#39;/api&amp;#39;}));
app.use(&amp;#39;/rpc&amp;#39;, rpc.handler(&amp;#39;rest&amp;#39;));
app.listen(8080);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now you can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl &amp;quot;http://localhost:8080/rpc/system/echo?ping=hello&amp;quot;
{
  &amp;quot;echo&amp;quot;: &amp;quot;hello&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/thumbs-up-nph.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-s-next-&quot;&gt;What&amp;#39;s next?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install LoopBack with a &lt;a href=&quot;http://strongloop.com/get-started/&quot;&gt;simple npm command&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&quot;http://docs.strongloop.com/display/DOC/LoopBack&quot;&gt;LoopBack documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Need performance monitoring, profiling and cluster capabilites for your Node apps? Check out &lt;a href=&quot;http://strongloop.com/node-js-performance/strongops/&quot;&gt;StrongOps&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
		</entry>
	
    
    
    
    
    
		<entry>
			<title>angular-injector</title>
			<link href="http://npmawesome.com/posts/2014-04-28-angular-injector"/>
			<updated>2014-04-28T16:24:35.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-28-angular-injector</id>
			<content type="html">&lt;p&gt;&lt;img class=&quot;hide-on-mobile&quot; src=&quot;http://npmawesome.com/images/posts/../authors/alexgorbatchev.jpg&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;
&lt;a href=&quot;https://github.com/alexgorbatchev/angular-injector&quot;&gt;angular-injector&lt;/a&gt; module by &lt;a href=&quot;https://github.com/alexgorbatchev&quot;&gt;Alex Gorbatchev&lt;/a&gt; (me) is meant to address minification problem with &lt;a href=&quot;https://www.angularjs.org/&quot;&gt;angular.js&lt;/a&gt; dependency injection that &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; does not - work with any dependency injection syntax.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;npm install angular-injector
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/angular-injector&quot;&gt;angular-injector&lt;/a&gt; works exactly the same way as &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; meaning that it modifies the source during build time. Unlike &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; however, it&amp;#39;s less dependent on the syntax. In fact, any function wrapped in a &lt;code&gt;ng(func)&lt;/code&gt; call will be escaped with &lt;code&gt;[&amp;#39;dep1&amp;#39;, &amp;#39;dep2&amp;#39;, func]&lt;/code&gt; injector style.&lt;/p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Write your angular functions like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory(&amp;#39;greeter&amp;#39;, ng(function($window) {
  // ...
}));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then run them through angular-injector and it will become:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory(&amp;#39;greeter&amp;#39;, [&amp;#39;$window&amp;#39;, function($window) {
  // ...
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You don&amp;#39;t need to declare ng function anywhere and it could be customized to anything. If you wanted to get fancy, use something like &lt;code&gt;ƒ&lt;/code&gt; or &lt;code&gt;∑&lt;/code&gt; to never have any naming conflicts. Or even an emoji if you feeling wild.&lt;/p&gt;
&lt;p&gt;This syntax works particularly well in CoffeeScript and is literally 2-3 extra characters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory &amp;#39;greeter&amp;#39;, ng ($window) -&amp;gt;
  # ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;build-plugins&quot;&gt;Build Plugins&lt;/h2&gt;
&lt;p&gt;Of course, I wouldn&amp;#39;t just write this module without supporting &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp.js&lt;/a&gt; and &lt;a href=&quot;http://gruntjs.com/&quot;&gt;grunt.js&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/gulp-angular-injector&quot;&gt;gulp-angular-injector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/grunt-angular-injector&quot;&gt;grunt-angular-injector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;The biggest downside of this method is basically remembering to add the &lt;code&gt;ng()&lt;/code&gt; wrapper. I found that after about half a day that becomes a habit and not an issue. Check out the plugins and let me know what you think!&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>platform.js</title>
			<link href="http://npmawesome.com/posts/2014-04-23-platform-js"/>
			<updated>2014-04-24T00:30:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-23-platform-js</id>
			<content type="html">&lt;p&gt;&lt;img class=&quot;hide-on-mobile&quot; src=&quot;https://avatars2.githubusercontent.com/u/4303?s=400&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;
&lt;img class=&quot;hide-on-mobile&quot; src=&quot;https://avatars3.githubusercontent.com/u/81942?s=400&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;
There are plenty of different runtime environments in JavaScript-land. Whereas this is a good thing there are also situations where the fragmentation is hindrance. Situations in which your application has to gather information about the platform it is running on. This is where &lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt; by &lt;a href=&quot;https://github.com/jdalton&quot;&gt;John-David Dalton&lt;/a&gt; and &lt;a href=&quot;https://github.com/mathiasbynens&quot;&gt;Mathias Bynens&lt;/a&gt; comes to the game.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s dive into this module with an example. Assume that you have to know if your application runs on &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/de/docs/Rhino&quot;&gt;Rhino&lt;/a&gt;. This could be &lt;em&gt;easily&lt;/em&gt; done by checking the type of the &lt;code&gt;global&lt;/code&gt; variable. In Node.js it is an object whereas Rhino provides a function. Boom! There you go. You can formulate a condition now! But what if you also need to know if your application is running in a browser? Well, game over. Too complicated. The good news is you don&amp;#39;t have to do such things anymore.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt; is a platform detection library which aim is to work on all platforms. It squeeze as much information out of the underlying JavaScript environment as it could and wraps them in a really nice informal abstraction. You are able to grab data like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of the platform (e.g. Google Chrome, Node.js, etc.)&lt;/li&gt;
&lt;li&gt;The version of the platform&lt;/li&gt;
&lt;li&gt;The rendering engine (of the browser; e.g. Gecko, Trident, etc.)&lt;/li&gt;
&lt;li&gt;The manufacturer of the product (e.g. Apple)&lt;/li&gt;
&lt;li&gt;The name of the product (e.g. iPhone, Kindle, etc.)&lt;/li&gt;
&lt;li&gt;The name of the operating system (e.g. iOS 7.0, Mac OS X 10.7.2, etc.)&lt;/li&gt;
&lt;li&gt;The architecture the operating system is build for (e.g. ia32, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;The installation is easy because your package manager flavor is covered. John-David and Mathias provide module descriptors for &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;, &lt;a href=&quot;https://github.com/component/component&quot;&gt;component&lt;/a&gt; and NPM:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install platform
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;The API for using &lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt; is consistent. What differs is the module loading procedure. Consider the &lt;a href=&quot;https://github.com/bestiejs/platform.js/blob/master/README.md&quot;&gt;README&lt;/a&gt; for a brief explanation about how to use the library with an AMD loader for instance. The following usage example refers to Node.js:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var platform = require(&amp;#39;platform&amp;#39;);

console.log(platform.name);  // Node.js
console.log(platform.version); // 0.10.26
console.log(platform.os.architecture); // 32
console.log(platform.os.family); // Linux
console.log(platform.description); // Node.js 0.10.26 on Linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The library provides also a function with which you are able to parse an &lt;a href=&quot;http://www.useragentstring.com/&quot;&gt;user agent string&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var platform = require(&amp;#39;platform&amp;#39;);

var browser = platform.parse(&amp;#39;Mozilla/5.0 (X11; Linux i686; rv:30.0) Gecko/20100101 Firefox/30.0&amp;#39;);

console.log(browser.name); // Firefox
console.log(browser.description); // Firefox 30.0 on Linux i686
console.log(browser.version); // 30.0
console.log(browser.layout); // Gecko
console.log(browser.os); // Linux i686
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you curious to see how it performs in a browser environment, check out this &lt;a href=&quot;http://cdpn.io/tjcEd&quot;&gt;codepen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m pretty sure that you have several use cases in mind where you could use &lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt;, but one warning: Don&amp;#39;t see it as a replacement of feature detection libraries. True to the motto: &lt;em&gt;If it is a Gecko-based rendering engine (because browsers with this engine have all the shiny new features) then I could use &lt;code&gt;navigator.getUserMedia()&lt;/code&gt;.&lt;/em&gt; Never ever make such assumptions. Look at it more in a way to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;display a tailor-made UI.&lt;/li&gt;
&lt;li&gt;collect statistical data about the devices of your users.&lt;/li&gt;
&lt;li&gt;lazy import own platform-specific modules (e.g. Node.js modules).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bestiejs/platform.js&quot;&gt;platform.js&lt;/a&gt; is a powerful gift when it comes to determining exactly in which environment your application is running. That means, we do not have to write &amp;quot;if-else-if-else-if&amp;quot; statements anymore, folks. We have a rock-solid foundation now!&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for Apr 23, 2014</title>
			<link href="http://npmawesome.com/posts/2014-04-23-links"/>
			<updated>2014-04-23T17:00:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-23-links</id>
			<content type="html">&lt;h2 id=&quot;andr-k-nig&quot;&gt;André König&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/224910?s=400&quot; style=&quot;float: right; width: 250px;&quot;/&gt;
I&amp;#39;m happy to welcome &lt;a href=&quot;https://github.com/akoenig&quot;&gt;André König&lt;/a&gt; to npmawesome! Very excited to publish his first post about &lt;a href=&quot;http://npmawesome.com/posts/2014-04-23-platform-js&quot;&gt;platform.js&lt;/a&gt;! Coming from Bremen, Germany, André is very active on &lt;a href=&quot;https://www.npmjs.org/browse/author/akoenig&quot;&gt;NPM&lt;/a&gt; and better known for &lt;a href=&quot;https://github.com/akoenig/angular-deckgrid&quot;&gt;angular-deckgrid&lt;/a&gt;, &lt;a href=&quot;https://github.com/akoenig/imacss&quot;&gt;imacss&lt;/a&gt; as well as a whole bunch of gulp.js modules. Woot!&lt;/p&gt;
&lt;h2 id=&quot;articles-slides&quot;&gt;Articles &amp;amp; Slides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/nodejs/J59L1AR1lSs/hQfRPDf1Wn0J&quot;&gt;Tim Caswell on history of Node.js callbacks&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shortly after node was made, the concept of the event emitter was added.  We didn&amp;#39;t have the current callback-last style, but had a convention that non-blocking functions would return a special emitter known as a &amp;quot;Promise&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.williambrownstreet.net/blog/2014/04/faster-angularjs-rendering-angularjs-and-reactjs/&quot;&gt;Faster AngularJS Rendering (AngularJS and ReactJS)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you used AngularJs and ran into some performance problems? Using ReactJs rendering becomes much faster. A small examples explains how to use ReactJs for rendering in AngularJs and a comparison is made between native rendering and rendering using ReactJs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://randsinrepose.com/archives/bored-people-quit/&quot;&gt;Bored People Quit&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You call on the motivation and retention police because you believe they can perform the legendary “diving save”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.twilio.com/blog/2014/04/build-interactive-voicemail-for-sports-fans-with-twilio-mongodb-angular-and-node-js-part-one.html&quot;&gt;Build Interactive Voicemail for Sports Fans with Twilio, MongoDB, Angular, and node.js&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this tutorial, we’re going to show how you can build an interactive voicemail (and text message) box to support a marketing campaign around a brand or celebrity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sebastienros/jint&quot;&gt;Jint&lt;/a&gt; is a Javascript interpreter for .NET. Jint doesn&amp;#39;t compile Javascript to .NET bytecode and in this sense might be best suited for projects requiring to run relatively small scripts faster, or which need to run on different platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;~70,000% Growth in Node.js Jobs since January 2011. &lt;a href=&quot;http://t.co/HS2mTrl2ie&quot;&gt;pic.twitter.com/HS2mTrl2ie&lt;/a&gt;&lt;/p&gt;&amp;mdash; Joe McCann (@joemccann) &lt;a href=&quot;https://twitter.com/joemccann/statuses/456489213803122688&quot;&gt;April 16, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;Why isn&amp;#39;t there a bar that plays Star Trek: Deep Space 9 and has dozens of sleepy cats to pet. I&amp;#39;d hang out at that bar.&lt;/p&gt;&amp;mdash; Max Temkin (@MaxTemkin) &lt;a href=&quot;https://twitter.com/MaxTemkin/statuses/458328715491950592&quot;&gt;April 21, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for Apr 19, 2014</title>
			<link href="http://npmawesome.com/posts/2014-04-19-links"/>
			<updated>2014-04-19T17:00:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-19-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/html5.svg&quot; style=&quot;float: right; width: 150px;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles-slides&quot;&gt;Articles &amp;amp; Slides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://scotch.io/tutorials/javascript/build-a-restful-api-using-node-and-express-4&quot;&gt;Build a RESTful API Using Node and Express 4&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With the release of Express 4.0 just a few days ago, lots of our Node apps will have some changes in how they handle routing. With the changes in the Express Router, we have more flexibility in how we can define the routes for our applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.sitepoint.com/controlling-arduino-nodejs-johnny-five/&quot;&gt;Controlling an Arduino with NodeJS and Johnny-Five&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Firmata and Johnny-Five make it a lot easier for JavaScript developers to get more involved and develop applications that can interact with, respond to and control Arduino powered technology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://alxhill.com/blog/articles/brunch-coffeescript-angular/&quot;&gt;Brunch - A build system without the Grunt-work&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Brunch compiles, concats and (optionally) minifies your scripts and styles. It can also package JavaScript files into AMDor CommonJS modules. Brunch automatically applies plugins in the correct order to the right files - so with the right plugins, a .coffee file would be converted into a .js file and then minified, with no explicit setup necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HY4d-0Kzp68&quot;&gt;EmberConf 2014 HTMLBars: The Next-Generation of Templating in Ember.js by Erik Bryn and Kris Selden&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i1.ytimg.com/vi/HY4d-0Kzp68/maxresdefault.jpg&quot; style=&quot;width: 400px&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2awbKQ2DLRE#t=211&quot;&gt;Pyro Board: 2D Rubens&amp;#39; Tube!&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i1.ytimg.com/vi/2awbKQ2DLRE/maxresdefault.jpg&quot; style=&quot;width: 400px&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.buzzfeed.com/mjs538/completely-surreal-pictures-of-americas-abandoned-malls&quot;&gt;Completely Surreal Photos Of America’s Abandoned Malls&lt;/a&gt; and a &lt;a href=&quot;https://www.youtube.com/watch?v=ZAo2ue6s5Bc&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://s3-ec.buzzfed.com/static/2014-04/enhanced/webdr06/2/10/enhanced-29364-1396450428-10.jpg&quot; style=&quot;width: 400px&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.buzzfeed.com/ryanhatesthis/all-hail-the-mighty-pizza-cake&quot;&gt;Pizza Cake&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://s3-ec.buzzfed.com/static/2014-04/enhanced/webdr03/18/12/enhanced-buzz-wide-14629-1397837404-8.jpg&quot; style=&quot;width: 400px&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/salomvary/soundcleod&quot;&gt;SoundCleod&lt;/a&gt; is a Mac OS X application which brings SoundCloud to the desktop without using a browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;A NodeJS Perspective on What’s New in MongoDB 2.6, Part I: Text Search &lt;a href=&quot;http://t.co/RCjrLHd2u0&quot;&gt;http://t.co/RCjrLHd2u0&lt;/a&gt;&lt;/p&gt;&amp;mdash; MongoDB (@MongoDB) &lt;a href=&quot;https://twitter.com/MongoDB/statuses/457562812223852545&quot;&gt;April 19, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;omg shut up and take my money! &lt;a href=&quot;https://t.co/UCVqDsakuJ&quot;&gt;https://t.co/UCVqDsakuJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alex Gorbatchev (@alexgorbatchev) &lt;a href=&quot;https://twitter.com/alexgorbatchev/statuses/457219682164940800&quot;&gt;April 18, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
</feed>
