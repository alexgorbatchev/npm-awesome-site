<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>npm awesome</title>
	<subtitle>Daily dose of awesome NPM modules for Node.js, old and new!</subtitle>
	<link href="http://npmawesome.com/atom.xml" rel="self" />
	<link href="http://npmawesome.com" />
	<id>http://npmawesome.com</id>
	<updated>2014-05-01T16:13:58.798Z</updated>
	<author>
		<name>Alex Gorbatchev</name>
	</author>

  
  
  
    
    
    
		<entry>
			<title>google-distance</title>
			<link href="http://npmawesome.com/posts/2014-05-01-google-distance"/>
			<updated>2014-05-01T18:30:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-05-01-google-distance</id>
			<content type="html">&lt;p&gt;Everybody appreciates the distance information between two locations in web mapping services like &lt;a href=&quot;http://maps.google.com&quot;&gt;Google Maps&lt;/a&gt;, right? Do you have a similar use case within your application but want to avoid the implementation overhead of abstracting from an external API? &lt;a href=&quot;https://github.com/edwlook/node-google-distance&quot;&gt;google-distance&lt;/a&gt; by &lt;a href=&quot;https://github.com/edwlook&quot;&gt;Edward Look&lt;/a&gt; helps you to do just that.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;p&gt;The module wraps the distance calculation functionality of the &lt;a href=&quot;https://developers.google.com/maps/documentation/distancematrix/&quot;&gt;Google Distance Matrix API&lt;/a&gt; into an &lt;em&gt;easy-to-use&lt;/em&gt; interface.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install google-distance
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s say we want to calculate the distance between New York City and San Diego. &lt;a href=&quot;https://github.com/edwlook/node-google-distance&quot;&gt;google-distance&lt;/a&gt; is frugal and very intuitive to use in this regard. It asks only for two required properties: &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following basic usage example ...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;use strict&amp;#39;;

var distance = require(&amp;#39;google-distance&amp;#39;);

var options = {
    origin: &amp;#39;New York City, USA&amp;#39;,
    destination: &amp;#39;San Diego, USA&amp;#39;
};

function onDistance (err, result) {
    if (err) {
        return console.error(err);
    }

    console.log(result);
}

distance.get(options, onDistance);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will &lt;code&gt;result&lt;/code&gt; in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    index: null,
    distance: &amp;#39;4,447 km&amp;#39;,
    distanceValue: 4447040,
    duration: &amp;#39;1 day 17 hours&amp;#39;,
    durationValue: 146399, // in seconds
    origin: &amp;#39;New York, NY, USA&amp;#39;,
    destination: &amp;#39;San Diego, CA, USA&amp;#39;,
    mode: &amp;#39;driving&amp;#39;,
    units: &amp;#39;metric&amp;#39;,
    language: &amp;#39;en&amp;#39;,
    avoid: null,
    sensor: false
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great, isn&amp;#39;t it?&lt;/p&gt;
&lt;h2 id=&quot;fine-tuning&quot;&gt;Fine tuning&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re crazy enough to cycle all the way down from Oakland to San Diego for instance and want to check how far it really is, you can measure this as well as switching the metric system or add other &lt;a href=&quot;https://github.com/edwlook/node-google-distance#additional-parameters&quot;&gt;additional parameters&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;use strict&amp;#39;;

var distance = require(&amp;#39;google-distance&amp;#39;);

var options = {
    origin: &amp;#39;Oakland, USA&amp;#39;,
    destination: &amp;#39;San Diego, USA&amp;#39;,
    mode: &amp;#39;bicycling&amp;#39;,
    units: &amp;#39;imperial&amp;#39;
};

distance.get(options, onDistance (err, result) {
    // ...
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checkout this &lt;a href=&quot;http://runnable.com/U2IHUgxWgZMpX2Ct/google-distance-example-npmawesome&quot;&gt;runnable example&lt;/a&gt; to verify that cycling is definitely a crazy idea :)&lt;/p&gt;
&lt;h2 id=&quot;api-key&quot;&gt;API key&lt;/h2&gt;
&lt;p&gt;One last note: It is not necessary to configure an API key in order to use the &lt;a href=&quot;https://github.com/edwlook/node-google-distance&quot;&gt;google-distance&lt;/a&gt; module. But: To avoid exceeding Google&amp;#39;s &lt;a href=&quot;https://developers.google.com/maps/documentation/distancematrix/#Limits&quot;&gt;quota&lt;/a&gt; it is highly recommended.&lt;/p&gt;
&lt;p&gt;Follow these &lt;a href=&quot;https://developers.google.com/maps/documentation/distancematrix/#api_key&quot;&gt;steps&lt;/a&gt; in order to obtain an API key. After that it is easy to inform the module about your key:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var distance = require(&amp;#39;google-distance&amp;#39;);

distance.apiKey = &amp;#39;YOUR_API_KEY&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;</content>
		</entry>
	
    
    
    
		<entry>
			<title>Links for Apr 30, 2014</title>
			<link href="http://npmawesome.com/posts/2014-04-30-links"/>
			<updated>2014-04-30T17:00:00.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-30-links</id>
			<content type="html">&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/html5.png&quot; style=&quot;float: right; width: 150px;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articles-slides&quot;&gt;Articles &amp;amp; Slides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2014/04/required-parameters-es6.html&quot;&gt;Handling required parameters in ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://goodui.org/&quot;&gt;A Good User Interface&lt;/a&gt; has high conversion rates and is easy to use. In other words, it&amp;#39;s nice to both the business side as well as the people using it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tjanczuk.github.io/edge/&quot;&gt;Edge.js&lt;/a&gt; - run Node.js and .NET code in-process.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.codinghorror.com/how-good-an-estimator-are-you-part-ii/&quot;&gt;How Good an Estimator Are You? Part II&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The specific goal of the exercise was to estimate at the 90 percent confidence level. There are 10 questions in the quiz, so if you were truly estimating at a 90 percent confidence level, you would have gotten about 9 answers correct.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/jessicaspacekat/an-introduction-to-designing-css-transitions-using-angularjs&quot;&gt;An introduction to designing CSS transitions using AngularJS&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…examples of how a UI designer without much JS or AngularJS experience can use some of the features built in to AngularJS (with angular-animate) to help them design interactive components and add CSS transitions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.codeship.io/2014/04/29/continuous-deployment-heroku-bitbucket-nodejs.html&quot;&gt;Continuous Deployment for node.js apps from Bitbucket to Heroku&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How to set up Continuous Integration and Continuous Deployment for a Node.js Application from Bitbucket to Heroku&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://makezine.com/2014/02/19/designing-a-vinyl-toy-with-joe-ledbetter/&quot;&gt;Designing a Vinyl Toy with Joe Ledbetter&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It all starts with an initial idea or concept for a toy. In this case I wanted to base this project on my popular character called Mr. Bunny. Mr. Bunny has been depicted in my paintings since I first began showing in galleries over 10 years ago.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://makezine.com/2014/04/22/paper-thin-arduino-enables-diy-dirigible/&quot;&gt;Printoo&lt;/a&gt; is a platform of paper-thin circuit boards and modules. It gives makers an open-source, lightweight, flexible, and modular Arduino-compatible platform to create just about anything you want! What makes Printoo amazingly unique is that it comes with a range of printed electronics modules previously unavailable to the public. These are electronics building &amp;quot;blocks&amp;quot; of the future, only not so rigid.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;github&quot;&gt;Github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://depthy.stamina.pl/&quot;&gt;Depthy&lt;/a&gt; extracts depth map and original from photos made with Google Camera&amp;#39;s Lens Blur. I think this is the future of product photography (until there’s proper 3D).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.org/package/flowdock-stream&quot;&gt;flowdock-stream&lt;/a&gt; is a node module for streaming &lt;a href=&quot;https://www.flowdock.com/&quot;&gt;flowdock&lt;/a&gt; flows.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;chrome&quot;&gt;Chrome&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://projectnaptha.com/&quot;&gt;Project Naptha&lt;/a&gt; automatically applies state-of-the-art computer vision algorithms on every image you see while browsing the web. The result is a seamless and intuitive experience, where you can highlight as well as copy and paste and even edit and translate the text formerly trapped within an image.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;twitter&quot;&gt;Twitter&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;Breathalyzers for cars? Breathalyzers for Twitter! I’d probably buy one, just to be 100% safe.&lt;/p&gt;&amp;mdash; Axel Rauschmayer (@rauschma) &lt;a href=&quot;https://twitter.com/rauschma/statuses/459111786382639104&quot;&gt;April 23, 2014&lt;/a&gt;&lt;/blockquote&gt;</content>
		</entry>
	
    
    
    
		<entry>
			<title>sentiment</title>
			<link href="http://npmawesome.com/posts/2014-04-30-sentiment"/>
			<updated>2014-04-30T16:24:35.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-30-sentiment</id>
			<content type="html">&lt;p&gt;Sentiment analysis is one of those things you don&amp;#39;t get to do very often, as cool as it sounds. It&amp;#39;s one of those things I always wanted to do but haven&amp;#39;t had a reason to yet. The field of natural language is as deep and complex as you want it to be. &lt;a href=&quot;http://nlp.stanford.edu/sentiment/&quot;&gt;Stanford Sentiment Analysis&lt;/a&gt; is a pretty massive project and nets pretty decent results.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;hide-on-mobile&quot; src=&quot;https://avatars1.githubusercontent.com/u/747641?s=400&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;
&lt;a href=&quot;https://github.com/thisandagain/sentiment&quot;&gt;sentiment&lt;/a&gt; module by &lt;a href=&quot;https://github.com/thisandagain&quot;&gt;Andrew Sliwinski&lt;/a&gt; takes a very simple approach to the problem of just counting token words and their preassigned weight. For the most part you can expect pretty average results and it gets completely lost with expressions like &amp;quot;I don&amp;#39;t know half of you half as well as I should like, and I like less than half of you half as well as you deserve&amp;quot; (frankly I don&amp;#39;t understand what it says either). But the cool thing is - it actually works and you don&amp;#39;t need a giant database. &lt;a href=&quot;https://github.com/thisandagain/sentiment&quot;&gt;sentiment&lt;/a&gt; can get you started down the path until you feel the need for something more involved.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;npm install sentiment
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/thisandagain/sentiment&quot;&gt;sentiment&lt;/a&gt; uses the &lt;a href=&quot;http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010&quot;&gt;AFINN-111&lt;/a&gt; wordlist to perform sentiment analysis on arbitrary blocks of input text and provides serveral things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;The ability to append and overwrite word / value pairs from the AFINN wordlist&lt;/li&gt;
&lt;li&gt;A build process that makes updating sentiment to future versions of the AFINN word list trivial&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s a simple example analysing bunch of latest &lt;a href=&quot;https://www.twitter.com/dhh&quot;&gt;DHH tweets&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var
  request = require(&amp;#39;request&amp;#39;),
  cheerio = require(&amp;#39;cheerio&amp;#39;),
  sentiment = require(&amp;#39;sentiment&amp;#39;)
  ;

function sentimentToSmiley(sentiment) {
  var score = sentiment.score;

  if(score === 0) { return &amp;#39;:-|&amp;#39; }
  if(score &amp;lt; 0) {
    if(score &amp;gt; -2) { return &amp;#39;:-(&amp;#39; }
    return &amp;#39;:`(&amp;#39;
  }

  if(score &amp;lt; 2) { return &amp;#39;:-)&amp;#39; }
  return &amp;#39;:-D&amp;#39;
}

request(&amp;#39;https://www.twitter.com/dhh&amp;#39;, function(err, response) {
  var $ = cheerio.load(response.body);

  $(&amp;#39;.tweet-text&amp;#39;).toArray().forEach(function(item) {
    var text = $(item).text();
    var results = sentiment(text);
    console.log(sentimentToSmiley(results), &amp;#39;-&amp;#39;, text.replace(/\n/g, &amp;#39; &amp;#39;));
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checkout out &lt;a href=&quot;http://runnable.com/U1aiDzGWpo8vHVFK/sentiment-analysis-with-node-js-for-nodejitsu-and-npmawesome&quot;&gt;functional example on runnable&lt;/a&gt;. Running this will produce result similiar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:-| - @mrbigdreamerYWF We tried to get NBC but they wouldn&amp;#39;t cover it :)
:-| - @AmianExclusive I think the C7R is the most expensive customer GTE car you can buy. And still not a proven thing.
:-| - @AmianExclusive Corvette factory team will be at Le Mans but not Viper :(. Apparently they didn&amp;#39;t sell enough cars to afford it.
:-| - Goooood morning #RailsConf! My talk is at 9:15am central. It will be streamed live on justin.tv/confreaks, if you&amp;#39;re not in Chicago.
:-| - @ashesfall Hot diggity.
:-) - (Yes, internet is fast elsewhere too, but most services of note have their app servers in the US, so that&amp;#39;s the ping that counts).
:-| - @arunagw Just about everything on the internet of note, which happens to have app servers in the US :D
:-| - For those who can&amp;#39;t attend RailsConf, we&amp;#39;ll be livestreaming the keynotes here: justin.tv/confreaks Schedule here: railsconf.com/schedule
:-D - It gets me every time I&amp;#39;m back in the US - even if just out for a few weeks: 20ms pings is internet happiness. So fast.
:-| - @turbineseaplane Nope. May depend on hand size? Could see it be harder to hold with small hands.
:-| - @mhauer I find that the hybrid model is actually the most common in anything but the newest or smallest companies. Very workable.
:-( - @N8Gard @railsconf They&amp;#39;re going to record it, I think. So no worries.
:-( - @dennismajor1 @thereaIbanksy I&amp;#39;d prefer to look at it the other way: drop the religious nonsense and enjoy a party without sin!
:-| - @turbineseaplane It is sometimes a little awkward but the sacrifice is worth it.
:-| - @andrestuul Right on the last one, not on the first two. Connecting has never been easier. 10 yrs ago I was working from Denmark.
:-| - @davegreiner @dhh we had thousands of accounts on Cork’d when it was still on a Mac mini in my friend’s rack (Rails 1.x)
:`( - @GregMolnar Horrible contortions to the false idol of testing. More on this in my keynote at RailsConf tomorrow.
:-D - @dhh Sounds familiar. CM was hosted on a cheap box with all our client&amp;#39;s sites. Went dedicated when it started slowing them down 1 yr later.
:`( - @thomasfuchs @letsfreckle Fuck yeah! But you did have to forgo such necessities as a big fancy office on day 1!
:-) - @homakov @davidpetschull I was in Denmark while I built Basecamp. But yes timezone and language can be barriers.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/thisandagain/sentiment&quot;&gt;sentiment&lt;/a&gt; is a very simple token counter which has vocabulary of about 2.5k english words. It doesn&amp;#39;t always produce reliable results, but it gets you a step forward if you need to do sentiment analysis without bringing in the heavy weight APIs or expensive commercial libraries.&lt;/p&gt;
&lt;p&gt;I can totally imagine processing customer inquiries coming in via email, twitter and other channels with &lt;a href=&quot;https://github.com/thisandagain/sentiment&quot;&gt;sentiment&lt;/a&gt;. Higher priority could be assigned to inquires with lower, more negative scores.&lt;/p&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>Comparing Express, Restify, hapi and LoopBack for building RESTful APIs</title>
			<link href="http://npmawesome.com/posts/2014-04-29-compare-express-restify-hapi-loopback"/>
			<updated>2014-04-29T17:01:54.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-29-compare-express-restify-hapi-loopback</id>
			<content type="html">&lt;p&gt;If you are writing a Node.js application, chances are you going to have some kind of API end points to be consumed by your frond end or expose data for others to take in. This is where &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful APIs&lt;/a&gt; come in. And now you have a dilemma - what tools to use and what approach to take? So many choices...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/confused.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the incredibly active Node.js community, the amount of results for a &lt;a href=&quot;https://www.npmjs.org/search?q=rest&quot;&gt;&amp;quot;rest&amp;quot; search on NPM&lt;/a&gt; is pretty overwhelming. Everyone has their own implementation and approach, but few seem to agree on a common way to go about implementing RESTful APIs in Node.js.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;restful-apis-with-express&quot;&gt;RESTful APIs with Express&lt;/h2&gt;
&lt;p&gt;The most common approach is to just roll your own end points with &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;. This practice allows you to get started quickly, but it becomes burdensome in the long run. Lets look at pros and cons:&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Here&amp;#39;s what a typical end point might look like in &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; using the latest 4.x &lt;code&gt;Router&lt;/code&gt; feature:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var Item = require(&amp;#39;models&amp;#39;).Item;
var app = express();
var itemRoute = express.Router();

itemRoute.param(&amp;#39;itemId&amp;#39;, function(req, res, next, id) {
  Item.findById(req.params.itemId, function(err, item) {
    req.item = item;
    next();
  });
});

itemRoute.route(&amp;#39;/:itemId&amp;#39;)
  .get(function(req, res, next) {
    res.json(req.item);
  })
  .put(function(req, res, next) {
    req.item.set(req.body);
    req.item.save(function(err, item) {
      res.json(item);
    });
  })
  .post(function(req, res, next) {
    var item = new Item(req.body);
    item.save(function(err, item) {
      res.json(item);
    });
  })
  .delete(function(req, res, next) {
    req.item.remove(function(err) {
      res.json({});
    });
  })
  ;

app.use(&amp;#39;/api/items&amp;#39;, itemRoute);
app.listen(8080);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Little learning curve, &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; is nearly a standard for Node.js web application&lt;/li&gt;
&lt;li&gt;Fully customizable&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;All end points need to be created manually, you end up doing a lot of the same code (or worse, start rolling your own libraries after a while)&lt;/li&gt;
&lt;li&gt;Every end point needs to be tested (or at the very least I recommend that you hit the end points with HTTP consumer to make sure they are actually there and don&amp;#39;t throw 500s)&lt;/li&gt;
&lt;li&gt;Refactoring becomes painful because everything needs to be updated everywhere&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t come with anything &amp;quot;standard&amp;quot;, have to figure out your own approach&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; is a great starting point, but eventually you will feel the pain of &amp;quot;roll your own&amp;quot; approach.&lt;/p&gt;
&lt;h2 id=&quot;restful-apis-with-restify&quot;&gt;RESTful APIs with Restify&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; is a relatively old player in the Node.js API field, very stable and being actively developed. It is built specifically to enable you to build correct REST web services and intentionally borrows heavily from &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Because &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; borrows from &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;, the syntax is nearly identical:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var restify = require(&amp;#39;restify&amp;#39;);
var Item = require(&amp;#39;models&amp;#39;).Item;
var app = restify.createServer()

app.use(function(req, res, next) {
  if (req.params.itemId) {
    Item.findById(req.params.itemId, function(err, item) {
      req.item = item;
      next();
    });
  }
  else {
    next();
  }
});

app.get(&amp;#39;/api/items/:itemId&amp;#39;, function(req, res, next) {
  res.send(200, req.item);
});

app.put(&amp;#39;/api/items/:itemId&amp;#39;, function(req, res, next) {
  req.item.set(req.body);
  req.item.save(function(err, item) {
    res.send(204, item);
  });
});

app.post(&amp;#39;/api/items/:itemId&amp;#39;, function(req, res, next) {
  var item = new Item(req.body);
  item.save(function(err, item) {
    res.send(201, item);
  });
});

app.delete(&amp;#39;/api/items/:itemId&amp;#39;, function(req, res, next) {
  req.item.remove(function(err) {
    res.send(204, {});
  });
});

app.listen(8080);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatic DTrace support for all your handlers (if you&amp;#39;re running on a platform that supports DTrace)&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t have unnecessary functionality like templating and rendering&lt;/li&gt;
&lt;li&gt;Built in throttling&lt;/li&gt;
&lt;li&gt;Built in &lt;a href=&quot;http://en.wikipedia.org/wiki/SPDY&quot;&gt;SPDY&lt;/a&gt; support&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;p&gt;The cons are all the same with &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; as they are with &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;, lots of manual labor.&lt;/p&gt;
&lt;h2 id=&quot;restful-apis-with-hapi&quot;&gt;RESTful APIs with hapi&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt; is a lesser known Node.js framework that is getting momentum thanks to fulltime support of the Walmart Labs team. It takes a somewhat different approach from &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; by providing significantly more functionality out of the box for building web servers.&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Here&amp;#39;s the same example re-written using &lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Hapi = require(&amp;#39;hapi&amp;#39;);
var Item = require(&amp;#39;models&amp;#39;).Item;
var server = Hapi.createServer(&amp;#39;0.0.0.0&amp;#39;, 8080);

server.ext(&amp;#39;onPreHandler&amp;#39;, function(req, next) {
  if (req.params.itemId) {
    Item.findById(req.params.itemId, function(err, item) {
      req.item = item;
      next();
    });
  }
  else {
    next();
  }
});

server.route([
  {
    path: &amp;#39;/api/items/{itemId}&amp;#39;,
    method: &amp;#39;GET&amp;#39;,
    config: {
      handler: function(req, reply) {
        reply(req.item);
      }
    }
  },
  {
    path: &amp;#39;/api/items&amp;#39;,
    method: &amp;#39;PUT&amp;#39;,
    config: {
      handler: function(req, reply) {
        req.item.set(req.body);
        req.item.save(function(err, item) {
          res.send(204, item);
        });
      }
    }
  },
  {
    path: &amp;#39;/api/items&amp;#39;,
    method: &amp;#39;POST&amp;#39;,
    config: {
      handler: function(req, reply) {
        var item = new Item(req.body);
        item.save(function(err, item) {
          res.send(201, item);
        });
      }
    }
  },
  {
    path: &amp;#39;/api/items/{itemId}&amp;#39;,
    method: &amp;#39;DELETE&amp;#39;,
    config: {
      handler: function(req, reply) {
        req.item.remove(function(err) {
          res.send(204, {});
        });
      }
    }
  }
]);

server.start();
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Very granular control over request handling&lt;/li&gt;
&lt;li&gt;Detailed API &lt;a href=&quot;https://github.com/spumko/hapi/blob/master/docs/Reference.md&quot;&gt;reference&lt;/a&gt; with support for documentation generation&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;p&gt;As with &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt;, &lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt; gives you great construction blocks, but you are left to your own devices figuring out how to use them.&lt;/p&gt;
&lt;h2 id=&quot;what-else-is-there-&quot;&gt;What else is there?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt;, &lt;a href=&quot;http://mcavage.me/node-restify&quot;&gt;Restify&lt;/a&gt; and &lt;a href=&quot;http://spumko.github.io/&quot;&gt;hapi&lt;/a&gt; are all great starting points, but in the long run it might not be the right choice if you plan on investing heavily into APIs.&lt;/p&gt;
&lt;h2 id=&quot;loopback&quot;&gt;LoopBack&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://strongloop.com/mobile-application-development/loopback/&quot;&gt;LoopBack&lt;/a&gt; by &lt;a href=&quot;http://strongloop.com&quot;&gt;StrongLoop&lt;/a&gt; is a fully featured Node.js backend framework to connect your consumer applications with data. It adopts &lt;a href=&quot;http://en.wikipedia.org/wiki/Convention_over_configuration&quot;&gt;convention over configuration&lt;/a&gt; mantra popularized by Ruby on Rails.&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var loopback = require(&amp;#39;loopback&amp;#39;);
var Item = require(&amp;#39;./models&amp;#39;).Item;
var app = module.exports = loopback();

app.model(Item);
app.use(&amp;#39;/api&amp;#39;, loopback.rest());
app.listen(8080);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There&amp;#39;s a lot of &amp;quot;magic&amp;quot; happening in the background. But with just 6 lines of code you now have the following end points:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DELETE /items/{id}
GET /items
GET /items/count
GET /items/findOne
GET /items/{id}
GET /items/{id}/exists
POST /items
PUT /items
PUT /items/{id}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/mind-blowing-nph.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To start exploring your own APIs right away, there&amp;#39;s a bundled &lt;code&gt;explorer&lt;/code&gt; module that you can attach to your application:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var explorer = require(&amp;#39;loopback-explorer&amp;#39;);
app.use(&amp;#39;/explorer&amp;#39;, explorer(app, {basePath: &amp;#39;/api&amp;#39;}));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now opening &lt;code&gt;http://localhost:8080/explorer&lt;/code&gt; you get this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/screenshot.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Seriously cool stuff!&lt;/p&gt;
&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Very quick RESTful API development&lt;/li&gt;
&lt;li&gt;Convention over configuration&lt;/li&gt;
&lt;li&gt;Built in models ready to use&lt;/li&gt;
&lt;li&gt;RPC support&lt;/li&gt;
&lt;li&gt;Fully configurable when needed&lt;/li&gt;
&lt;li&gt;Extensive documentation&lt;/li&gt;
&lt;li&gt;Fulltime team working on the project&lt;/li&gt;
&lt;li&gt;Available commercial support&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Learning curve can be pretty steep because there are so many moving parts&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;rpc&quot;&gt;RPC&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;http://strongloop.com/mobile-application-development/loopback/&quot;&gt;LoopBack&lt;/a&gt; example above is so tiny, I feel bad about it. How about we extend it with a quick RPC endpoint to balance things out?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var loopback = require(&amp;#39;loopback&amp;#39;);
var explorer = require(&amp;#39;loopback-explorer&amp;#39;);
var remoting = require(&amp;#39;strong-remoting&amp;#39;);
var Item = require(&amp;#39;./models&amp;#39;).Item;
var app = module.exports = loopback();
var rpc = remoting.create();

function echo(ping, callback) {
  callback(null, ping);
}

echo.shared = true;
echo.accepts = {arg: &amp;#39;ping&amp;#39;};
echo.returns = {arg: &amp;#39;echo&amp;#39;};

rpc.exports.system = {
  echo: echo
};

app.model(Item);
app.use(&amp;#39;/api&amp;#39;, loopback.rest());
app.use(&amp;#39;/explorer&amp;#39;, explorer(app, {basePath: &amp;#39;/api&amp;#39;}));
app.use(&amp;#39;/rpc&amp;#39;, rpc.handler(&amp;#39;rest&amp;#39;));
app.listen(8080);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now you can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl &amp;quot;http://localhost:8080/rpc/system/echo?ping=hello&amp;quot;
{
  &amp;quot;echo&amp;quot;: &amp;quot;hello&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://npmawesome.com/images/posts/compare-express-restify-hapi-loopback/thumbs-up-nph.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-s-next-&quot;&gt;What&amp;#39;s next?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install LoopBack with a &lt;a href=&quot;http://strongloop.com/get-started/&quot;&gt;simple npm command&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&quot;http://docs.strongloop.com/display/DOC/LoopBack&quot;&gt;LoopBack documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Need performance monitoring, profiling and cluster capabilites for your Node apps? Check out &lt;a href=&quot;http://strongloop.com/node-js-performance/strongops/&quot;&gt;StrongOps&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
		</entry>
	
    
    
    
		<entry>
			<title>angular-injector</title>
			<link href="http://npmawesome.com/posts/2014-04-28-angular-injector"/>
			<updated>2014-04-28T16:24:35.000Z</updated>
			<id>http://npmawesome.com/posts/2014-04-28-angular-injector</id>
			<content type="html">&lt;p&gt;&lt;img class=&quot;hide-on-mobile&quot; src=&quot;http://npmawesome.com/images/posts/../authors/alexgorbatchev.jpg&quot; style=&quot;float: right; margin-left: 1em; width: 100px&quot;/&gt;
&lt;a href=&quot;https://github.com/alexgorbatchev/angular-injector&quot;&gt;angular-injector&lt;/a&gt; module by &lt;a href=&quot;https://github.com/alexgorbatchev&quot;&gt;Alex Gorbatchev&lt;/a&gt; (me) is meant to address minification problem with &lt;a href=&quot;https://www.angularjs.org/&quot;&gt;angular.js&lt;/a&gt; dependency injection that &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; does not - work with any dependency injection syntax.&lt;/p&gt;
&lt;div class=&quot;read-more&quot;&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;npm install angular-injector
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/angular-injector&quot;&gt;angular-injector&lt;/a&gt; works exactly the same way as &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; meaning that it modifies the source during build time. Unlike &lt;a href=&quot;https://www.npmjs.org/package/ngmin&quot;&gt;ngmin&lt;/a&gt; however, it&amp;#39;s less dependent on the syntax. In fact, any function wrapped in a &lt;code&gt;ng(func)&lt;/code&gt; call will be escaped with &lt;code&gt;[&amp;#39;dep1&amp;#39;, &amp;#39;dep2&amp;#39;, func]&lt;/code&gt; injector style.&lt;/p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Write your angular functions like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory(&amp;#39;greeter&amp;#39;, ng(function($window) {
  // ...
}));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then run them through angular-injector and it will become:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory(&amp;#39;greeter&amp;#39;, [&amp;#39;$window&amp;#39;, function($window) {
  // ...
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You don&amp;#39;t need to declare ng function anywhere and it could be customized to anything. If you wanted to get fancy, use something like &lt;code&gt;ƒ&lt;/code&gt; or &lt;code&gt;∑&lt;/code&gt; to never have any naming conflicts. Or even an emoji if you feeling wild.&lt;/p&gt;
&lt;p&gt;This syntax works particularly well in CoffeeScript and is literally 2-3 extra characters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someModule.factory &amp;#39;greeter&amp;#39;, ng ($window) -&amp;gt;
  # ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;build-plugins&quot;&gt;Build Plugins&lt;/h2&gt;
&lt;p&gt;Of course, I wouldn&amp;#39;t just write this module without supporting &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp.js&lt;/a&gt; and &lt;a href=&quot;http://gruntjs.com/&quot;&gt;grunt.js&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/gulp-angular-injector&quot;&gt;gulp-angular-injector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexgorbatchev/grunt-angular-injector&quot;&gt;grunt-angular-injector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;The biggest downside of this method is basically remembering to add the &lt;code&gt;ng()&lt;/code&gt; wrapper. I found that after about half a day that becomes a habit and not an issue. Check out the plugins and let me know what you think!&lt;/p&gt;
</content>
		</entry>
	
</feed>
